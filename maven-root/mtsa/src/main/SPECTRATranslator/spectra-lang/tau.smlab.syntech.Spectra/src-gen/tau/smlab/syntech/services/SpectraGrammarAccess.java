/*
 * generated by Xtext 2.25.0
 */
package tau.smlab.syntech.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SpectraGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cModuleKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSpecKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDeclParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//Model:
		//    (imports+=Import)*
		//    ('module'|'spec') name=ID (elements+=Decl)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(imports+=Import)*
		//('module'|'spec') name=ID (elements+=Decl)+
		public Group getGroup() { return cGroup; }
		
		//(imports+=Import)*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//('module'|'spec')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'module'
		public Keyword getModuleKeyword_1_0() { return cModuleKeyword_1_0; }
		
		//'spec'
		public Keyword getSpecKeyword_1_1() { return cSpecKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(elements+=Decl)+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Decl
		public RuleCall getElementsDeclParserRuleCall_3_0() { return cElementsDeclParserRuleCall_3_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//    'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPredicateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPatternParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMonitorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWeightDefParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLTLGarParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLTLAsmParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEXGarParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cCounterParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDefineRegExpParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Decl:
		//    Var
		//    | TypeDef
		//    | Define
		//    | Predicate
		//    | Pattern
		//    | Monitor
		//    | WeightDef
		//    | LTLGar
		//    | LTLAsm
		//    | EXGar
		//    | Counter
		//    | DefineRegExp;
		@Override public ParserRule getRule() { return rule; }
		
		//Var
		//| TypeDef
		//| Define
		//| Predicate
		//| Pattern
		//| Monitor
		//| WeightDef
		//| LTLGar
		//| LTLAsm
		//| EXGar
		//| Counter
		//| DefineRegExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_1() { return cTypeDefParserRuleCall_1; }
		
		//Define
		public RuleCall getDefineParserRuleCall_2() { return cDefineParserRuleCall_2; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall_3() { return cPredicateParserRuleCall_3; }
		
		//Pattern
		public RuleCall getPatternParserRuleCall_4() { return cPatternParserRuleCall_4; }
		
		//Monitor
		public RuleCall getMonitorParserRuleCall_5() { return cMonitorParserRuleCall_5; }
		
		//WeightDef
		public RuleCall getWeightDefParserRuleCall_6() { return cWeightDefParserRuleCall_6; }
		
		//LTLGar
		public RuleCall getLTLGarParserRuleCall_7() { return cLTLGarParserRuleCall_7; }
		
		//LTLAsm
		public RuleCall getLTLAsmParserRuleCall_8() { return cLTLAsmParserRuleCall_8; }
		
		//EXGar
		public RuleCall getEXGarParserRuleCall_9() { return cEXGarParserRuleCall_9; }
		
		//Counter
		public RuleCall getCounterParserRuleCall_10() { return cCounterParserRuleCall_10; }
		
		//DefineRegExp
		public RuleCall getDefineRegExpParserRuleCall_11() { return cDefineRegExpParserRuleCall_11; }
	}
	public class WeightDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.WeightDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNegativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegativeHyphenMinusKeyword_2_0 = (Keyword)cNegativeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionTemporalInExprParserRuleCall_4_0 = (RuleCall)cDefinitionAssignment_4.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//WeightDef:
		//    'weight' (name=ID ':')? negative=('-')? value=INT
		//    definition=TemporalInExpr TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//'weight' (name=ID ':')? negative=('-')? value=INT
		//definition=TemporalInExpr TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//'weight'
		public Keyword getWeightKeyword_0() { return cWeightKeyword_0; }
		
		//(name=ID ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//negative=('-')?
		public Assignment getNegativeAssignment_2() { return cNegativeAssignment_2; }
		
		//('-')
		public Keyword getNegativeHyphenMinusKeyword_2_0() { return cNegativeHyphenMinusKeyword_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//definition=TemporalInExpr
		public Assignment getDefinitionAssignment_4() { return cDefinitionAssignment_4; }
		
		//TemporalInExpr
		public RuleCall getDefinitionTemporalInExprParserRuleCall_4_0() { return cDefinitionTemporalInExprParserRuleCall_4_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_5() { return cTOK_SEMIParserRuleCall_5; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindVarOwnerEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarDeclParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Var:
		//    kind=VarOwner var=VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=VarOwner var=VarDecl
		public Group getGroup() { return cGroup; }
		
		//kind=VarOwner
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//VarOwner
		public RuleCall getKindVarOwnerEnumRuleCall_0_0() { return cKindVarOwnerEnumRuleCall_0_0; }
		
		//var=VarDecl
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//VarDecl
		public RuleCall getVarVarDeclParserRuleCall_1_0() { return cVarVarDeclParserRuleCall_1_0; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeVarTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//TypeDef:
		//    'type' name=ID '=' type=VarType TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID '=' type=VarType TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//type=VarType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_3_0() { return cTypeVarTypeParserRuleCall_3_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_4() { return cTOK_SEMIParserRuleCall_4; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVarTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VarDecl:
		//    type=VarType name=ID TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//type=VarType name=ID TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//type=VarType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_0_0() { return cTypeVarTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_2() { return cTOK_SEMIParserRuleCall_2; }
	}
	public class ReferrableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Referrable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefineDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypedParamParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPatternParamParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMonitorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCounterParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDefineRegExpDeclParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDomainVarDeclParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Referrable:
		//    VarDecl | TypeConstant | DefineDecl | TypedParam | PatternParam | Monitor | Counter | DefineRegExpDecl | DomainVarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//VarDecl | TypeConstant | DefineDecl | TypedParam | PatternParam | Monitor | Counter | DefineRegExpDecl | DomainVarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0() { return cVarDeclParserRuleCall_0; }
		
		//TypeConstant
		public RuleCall getTypeConstantParserRuleCall_1() { return cTypeConstantParserRuleCall_1; }
		
		//DefineDecl
		public RuleCall getDefineDeclParserRuleCall_2() { return cDefineDeclParserRuleCall_2; }
		
		//TypedParam
		public RuleCall getTypedParamParserRuleCall_3() { return cTypedParamParserRuleCall_3; }
		
		//PatternParam
		public RuleCall getPatternParamParserRuleCall_4() { return cPatternParamParserRuleCall_4; }
		
		//Monitor
		public RuleCall getMonitorParserRuleCall_5() { return cMonitorParserRuleCall_5; }
		
		//Counter
		public RuleCall getCounterParserRuleCall_6() { return cCounterParserRuleCall_6; }
		
		//DefineRegExpDecl
		public RuleCall getDefineRegExpDeclParserRuleCall_7() { return cDefineRegExpDeclParserRuleCall_7; }
		
		//DomainVarDecl
		public RuleCall getDomainVarDeclParserRuleCall_8() { return cDomainVarDeclParserRuleCall_8; }
	}
	public class TypeConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TypeConstant");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTypeConstantLiteralParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TypeConstant:
		//    name=TypeConstantLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//name=TypeConstantLiteral
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//TypeConstantLiteral
		public RuleCall getNameTypeConstantLiteralParserRuleCall_0() { return cNameTypeConstantLiteralParserRuleCall_0; }
	}
	public class TypeConstantLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TypeConstantLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeConstantLiteral:
		//    ID | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefineListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefineListDefineDeclParserRuleCall_1_0 = (RuleCall)cDefineListAssignment_1.eContents().get(0);
		
		//Define:
		//    'define' (defineList+=DefineDecl)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'define' (defineList+=DefineDecl)+
		public Group getGroup() { return cGroup; }
		
		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//(defineList+=DefineDecl)+
		public Assignment getDefineListAssignment_1() { return cDefineListAssignment_1; }
		
		//DefineDecl
		public RuleCall getDefineListDefineDeclParserRuleCall_1_0() { return cDefineListDefineDeclParserRuleCall_1_0; }
	}
	public class DefineDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.DefineDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cSimpleExprAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cSimpleExprTemporalExpressionParserRuleCall_0_0_2_0 = (RuleCall)cSimpleExprAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cDimensionsSizeDefineDeclParserRuleCall_0_1_1_1_0 = (RuleCall)cDimensionsAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_1_2 = (Keyword)cGroup_0_1_1.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cInnerArrayAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cInnerArrayDefineArrayParserRuleCall_0_1_3_0 = (RuleCall)cInnerArrayAssignment_0_1_3.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DefineDecl:
		//    ((name=ID ':=' simpleExpr=TemporalExpression) |
		//    (name=ID ('[' dimensions+=SizeDefineDecl ']')+ ':=' innerArray=DefineArray ))
		//    TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//((name=ID ':=' simpleExpr=TemporalExpression) |
		//(name=ID ('[' dimensions+=SizeDefineDecl ']')+ ':=' innerArray=DefineArray ))
		//TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//((name=ID ':=' simpleExpr=TemporalExpression) |
		//(name=ID ('[' dimensions+=SizeDefineDecl ']')+ ':=' innerArray=DefineArray ))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(name=ID ':=' simpleExpr=TemporalExpression)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0_0() { return cNameIDTerminalRuleCall_0_0_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_0_1() { return cColonEqualsSignKeyword_0_0_1; }
		
		//simpleExpr=TemporalExpression
		public Assignment getSimpleExprAssignment_0_0_2() { return cSimpleExprAssignment_0_0_2; }
		
		//TemporalExpression
		public RuleCall getSimpleExprTemporalExpressionParserRuleCall_0_0_2_0() { return cSimpleExprTemporalExpressionParserRuleCall_0_0_2_0; }
		
		//(name=ID ('[' dimensions+=SizeDefineDecl ']')+ ':=' innerArray=DefineArray )
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_0() { return cNameIDTerminalRuleCall_0_1_0_0; }
		
		//('[' dimensions+=SizeDefineDecl ']')+
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_1_0() { return cLeftSquareBracketKeyword_0_1_1_0; }
		
		//dimensions+=SizeDefineDecl
		public Assignment getDimensionsAssignment_0_1_1_1() { return cDimensionsAssignment_0_1_1_1; }
		
		//SizeDefineDecl
		public RuleCall getDimensionsSizeDefineDeclParserRuleCall_0_1_1_1_0() { return cDimensionsSizeDefineDeclParserRuleCall_0_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_1_2() { return cRightSquareBracketKeyword_0_1_1_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1_2() { return cColonEqualsSignKeyword_0_1_2; }
		
		//innerArray=DefineArray
		public Assignment getInnerArrayAssignment_0_1_3() { return cInnerArrayAssignment_0_1_3; }
		
		//DefineArray
		public RuleCall getInnerArrayDefineArrayParserRuleCall_0_1_3_0() { return cInnerArrayDefineArrayParserRuleCall_0_1_3_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_1() { return cTOK_SEMIParserRuleCall_1; }
	}
	public class DefineArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.DefineArray");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cSimpleExprsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cSimpleExprsTemporalExpressionParserRuleCall_0_1_0_0 = (RuleCall)cSimpleExprsAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cSimpleExprsAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cSimpleExprsTemporalExpressionParserRuleCall_0_1_1_1_0 = (RuleCall)cSimpleExprsAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cInnerArraysAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cInnerArraysDefineArrayParserRuleCall_1_1_0_0 = (RuleCall)cInnerArraysAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cInnerArraysAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cInnerArraysDefineArrayParserRuleCall_1_1_1_1_0 = (RuleCall)cInnerArraysAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//DefineArray:
		//    '{' (simpleExprs+=TemporalExpression (',' simpleExprs+=TemporalExpression)*) '}' | '{' (innerArrays+=DefineArray (',' innerArrays+=DefineArray)*) '}' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (simpleExprs+=TemporalExpression (',' simpleExprs+=TemporalExpression)*) '}' | '{' (innerArrays+=DefineArray (',' innerArrays+=DefineArray)*) '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' (simpleExprs+=TemporalExpression (',' simpleExprs+=TemporalExpression)*) '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//(simpleExprs+=TemporalExpression (',' simpleExprs+=TemporalExpression)*)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//simpleExprs+=TemporalExpression
		public Assignment getSimpleExprsAssignment_0_1_0() { return cSimpleExprsAssignment_0_1_0; }
		
		//TemporalExpression
		public RuleCall getSimpleExprsTemporalExpressionParserRuleCall_0_1_0_0() { return cSimpleExprsTemporalExpressionParserRuleCall_0_1_0_0; }
		
		//(',' simpleExprs+=TemporalExpression)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }
		
		//simpleExprs+=TemporalExpression
		public Assignment getSimpleExprsAssignment_0_1_1_1() { return cSimpleExprsAssignment_0_1_1_1; }
		
		//TemporalExpression
		public RuleCall getSimpleExprsTemporalExpressionParserRuleCall_0_1_1_1_0() { return cSimpleExprsTemporalExpressionParserRuleCall_0_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//'{' (innerArrays+=DefineArray (',' innerArrays+=DefineArray)*) '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(innerArrays+=DefineArray (',' innerArrays+=DefineArray)*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//innerArrays+=DefineArray
		public Assignment getInnerArraysAssignment_1_1_0() { return cInnerArraysAssignment_1_1_0; }
		
		//DefineArray
		public RuleCall getInnerArraysDefineArrayParserRuleCall_1_1_0_0() { return cInnerArraysDefineArrayParserRuleCall_1_1_0_0; }
		
		//(',' innerArrays+=DefineArray)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//innerArrays+=DefineArray
		public Assignment getInnerArraysAssignment_1_1_1_1() { return cInnerArraysAssignment_1_1_1_1; }
		
		//DefineArray
		public RuleCall getInnerArraysDefineArrayParserRuleCall_1_1_1_1_0() { return cInnerArraysDefineArrayParserRuleCall_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class DefineRegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.DefineRegExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRegexpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefineRegsListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefineRegsListDefineRegExpDeclParserRuleCall_1_0 = (RuleCall)cDefineRegsListAssignment_1.eContents().get(0);
		
		//DefineRegExp:
		//  'regexp' (defineRegsList+=DefineRegExpDecl)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'regexp' (defineRegsList+=DefineRegExpDecl)+
		public Group getGroup() { return cGroup; }
		
		//'regexp'
		public Keyword getRegexpKeyword_0() { return cRegexpKeyword_0; }
		
		//(defineRegsList+=DefineRegExpDecl)+
		public Assignment getDefineRegsListAssignment_1() { return cDefineRegsListAssignment_1; }
		
		//DefineRegExpDecl
		public RuleCall getDefineRegsListDefineRegExpDeclParserRuleCall_1_0() { return cDefineRegsListDefineRegExpDeclParserRuleCall_1_0; }
	}
	public class DefineRegExpDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.DefineRegExpDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpRegExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DefineRegExpDecl:
		//  name=ID ':=' exp=RegExp TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':=' exp=RegExp TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exp=RegExp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//RegExp
		public RuleCall getExpRegExpParserRuleCall_2_0() { return cExpRegExpParserRuleCall_2_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_3() { return cTOK_SEMIParserRuleCall_3; }
	}
	public class PatternParamListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.PatternParamList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsPatternParamParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsPatternParamParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//PatternParamList:
		//    params+=PatternParam (',' params+=PatternParam)*;
		@Override public ParserRule getRule() { return rule; }
		
		//params+=PatternParam (',' params+=PatternParam)*
		public Group getGroup() { return cGroup; }
		
		//params+=PatternParam
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//PatternParam
		public RuleCall getParamsPatternParamParserRuleCall_0_0() { return cParamsPatternParamParserRuleCall_0_0; }
		
		//(',' params+=PatternParam)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//params+=PatternParam
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//PatternParam
		public RuleCall getParamsPatternParamParserRuleCall_1_1_0() { return cParamsPatternParamParserRuleCall_1_1_0; }
	}
	public class PatternParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.PatternParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PatternParam:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TypedParamListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TypedParamList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsTypedParamParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsTypedParamParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//TypedParamList:
		//    params+=TypedParam (',' params+=TypedParam)*;
		@Override public ParserRule getRule() { return rule; }
		
		//params+=TypedParam (',' params+=TypedParam)*
		public Group getGroup() { return cGroup; }
		
		//params+=TypedParam
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//TypedParam
		public RuleCall getParamsTypedParamParserRuleCall_0_0() { return cParamsTypedParamParserRuleCall_0_0; }
		
		//(',' params+=TypedParam)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//params+=TypedParam
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }
		
		//TypedParam
		public RuleCall getParamsTypedParamParserRuleCall_1_1_0() { return cParamsTypedParamParserRuleCall_1_1_0; }
	}
	public class TypedParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TypedParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVarTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TypedParam:
		//    type=VarType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=VarType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=VarType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_0_0() { return cTypeVarTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CounterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Counter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCounterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRangeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRangeSubrangeParserRuleCall_2_1_0 = (RuleCall)cRangeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cInitialAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cInitialTemporalInExprParserRuleCall_4_0_0_0 = (RuleCall)cInitialAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cAlternatives_4_0.eContents().get(1);
		private final Keyword cResetKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Assignment cResetPredAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cResetPredTemporalInExprParserRuleCall_4_0_1_1_0 = (RuleCall)cResetPredAssignment_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_0_2 = (Group)cAlternatives_4_0.eContents().get(2);
		private final Keyword cIncKeyword_4_0_2_0 = (Keyword)cGroup_4_0_2.eContents().get(0);
		private final Assignment cIncPredAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final RuleCall cIncPredTemporalExpressionParserRuleCall_4_0_2_1_0 = (RuleCall)cIncPredAssignment_4_0_2_1.eContents().get(0);
		private final Group cGroup_4_0_3 = (Group)cAlternatives_4_0.eContents().get(3);
		private final Keyword cDecKeyword_4_0_3_0 = (Keyword)cGroup_4_0_3.eContents().get(0);
		private final Assignment cDecPredAssignment_4_0_3_1 = (Assignment)cGroup_4_0_3.eContents().get(1);
		private final RuleCall cDecPredTemporalExpressionParserRuleCall_4_0_3_1_0 = (RuleCall)cDecPredAssignment_4_0_3_1.eContents().get(0);
		private final Group cGroup_4_0_4 = (Group)cAlternatives_4_0.eContents().get(4);
		private final Keyword cOverflowKeyword_4_0_4_0 = (Keyword)cGroup_4_0_4.eContents().get(0);
		private final Assignment cOverflowMethodAssignment_4_0_4_1 = (Assignment)cGroup_4_0_4.eContents().get(1);
		private final RuleCall cOverflowMethodOverflowMethodEnumRuleCall_4_0_4_1_0 = (RuleCall)cOverflowMethodAssignment_4_0_4_1.eContents().get(0);
		private final Group cGroup_4_0_5 = (Group)cAlternatives_4_0.eContents().get(5);
		private final Keyword cUnderflowKeyword_4_0_5_0 = (Keyword)cGroup_4_0_5.eContents().get(0);
		private final Assignment cUnderflowMethodAssignment_4_0_5_1 = (Assignment)cGroup_4_0_5.eContents().get(1);
		private final RuleCall cUnderflowMethodOverflowMethodEnumRuleCall_4_0_5_1_0 = (RuleCall)cUnderflowMethodAssignment_4_0_5_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Counter:
		//    'counter' name=ID ('(' range=Subrange ')')
		//  '{' (((initial+=TemporalInExpr)
		//      | ('reset:' resetPred+=TemporalInExpr)
		//      | ('inc:' incPred+=TemporalExpression)
		//      | ('dec:' decPred+=TemporalExpression)
		//      | ('overflow:' overflowMethod+=OverflowMethod)
		//      | ('underflow:' underflowMethod+=OverflowMethod)
		//  ) TOK_SEMI)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//  'counter' name=ID ('(' range=Subrange ')')
		//'{' (((initial+=TemporalInExpr)
		//    | ('reset:' resetPred+=TemporalInExpr)
		//    | ('inc:' incPred+=TemporalExpression)
		//    | ('dec:' decPred+=TemporalExpression)
		//    | ('overflow:' overflowMethod+=OverflowMethod)
		//    | ('underflow:' underflowMethod+=OverflowMethod)
		//) TOK_SEMI)* '}'
		public Group getGroup() { return cGroup; }
		
		//'counter'
		public Keyword getCounterKeyword_0() { return cCounterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' range=Subrange ')')
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//range=Subrange
		public Assignment getRangeAssignment_2_1() { return cRangeAssignment_2_1; }
		
		//Subrange
		public RuleCall getRangeSubrangeParserRuleCall_2_1_0() { return cRangeSubrangeParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(((initial+=TemporalInExpr)
		//     | ('reset:' resetPred+=TemporalInExpr)
		//     | ('inc:' incPred+=TemporalExpression)
		//     | ('dec:' decPred+=TemporalExpression)
		//     | ('overflow:' overflowMethod+=OverflowMethod)
		//     | ('underflow:' underflowMethod+=OverflowMethod)
		// ) TOK_SEMI)*
		public Group getGroup_4() { return cGroup_4; }
		
		//((initial+=TemporalInExpr)
		//      | ('reset:' resetPred+=TemporalInExpr)
		//      | ('inc:' incPred+=TemporalExpression)
		//      | ('dec:' decPred+=TemporalExpression)
		//      | ('overflow:' overflowMethod+=OverflowMethod)
		//      | ('underflow:' underflowMethod+=OverflowMethod)
		//  )
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//(initial+=TemporalInExpr)
		public Assignment getInitialAssignment_4_0_0() { return cInitialAssignment_4_0_0; }
		
		//TemporalInExpr
		public RuleCall getInitialTemporalInExprParserRuleCall_4_0_0_0() { return cInitialTemporalInExprParserRuleCall_4_0_0_0; }
		
		//('reset:' resetPred+=TemporalInExpr)
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//'reset:'
		public Keyword getResetKeyword_4_0_1_0() { return cResetKeyword_4_0_1_0; }
		
		//resetPred+=TemporalInExpr
		public Assignment getResetPredAssignment_4_0_1_1() { return cResetPredAssignment_4_0_1_1; }
		
		//TemporalInExpr
		public RuleCall getResetPredTemporalInExprParserRuleCall_4_0_1_1_0() { return cResetPredTemporalInExprParserRuleCall_4_0_1_1_0; }
		
		//('inc:' incPred+=TemporalExpression)
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }
		
		//'inc:'
		public Keyword getIncKeyword_4_0_2_0() { return cIncKeyword_4_0_2_0; }
		
		//incPred+=TemporalExpression
		public Assignment getIncPredAssignment_4_0_2_1() { return cIncPredAssignment_4_0_2_1; }
		
		//TemporalExpression
		public RuleCall getIncPredTemporalExpressionParserRuleCall_4_0_2_1_0() { return cIncPredTemporalExpressionParserRuleCall_4_0_2_1_0; }
		
		//('dec:' decPred+=TemporalExpression)
		public Group getGroup_4_0_3() { return cGroup_4_0_3; }
		
		//'dec:'
		public Keyword getDecKeyword_4_0_3_0() { return cDecKeyword_4_0_3_0; }
		
		//decPred+=TemporalExpression
		public Assignment getDecPredAssignment_4_0_3_1() { return cDecPredAssignment_4_0_3_1; }
		
		//TemporalExpression
		public RuleCall getDecPredTemporalExpressionParserRuleCall_4_0_3_1_0() { return cDecPredTemporalExpressionParserRuleCall_4_0_3_1_0; }
		
		//('overflow:' overflowMethod+=OverflowMethod)
		public Group getGroup_4_0_4() { return cGroup_4_0_4; }
		
		//'overflow:'
		public Keyword getOverflowKeyword_4_0_4_0() { return cOverflowKeyword_4_0_4_0; }
		
		//overflowMethod+=OverflowMethod
		public Assignment getOverflowMethodAssignment_4_0_4_1() { return cOverflowMethodAssignment_4_0_4_1; }
		
		//OverflowMethod
		public RuleCall getOverflowMethodOverflowMethodEnumRuleCall_4_0_4_1_0() { return cOverflowMethodOverflowMethodEnumRuleCall_4_0_4_1_0; }
		
		//('underflow:' underflowMethod+=OverflowMethod)
		public Group getGroup_4_0_5() { return cGroup_4_0_5; }
		
		//'underflow:'
		public Keyword getUnderflowKeyword_4_0_5_0() { return cUnderflowKeyword_4_0_5_0; }
		
		//underflowMethod+=OverflowMethod
		public Assignment getUnderflowMethodAssignment_4_0_5_1() { return cUnderflowMethodAssignment_4_0_5_1; }
		
		//OverflowMethod
		public RuleCall getUnderflowMethodOverflowMethodEnumRuleCall_4_0_5_1_0() { return cUnderflowMethodOverflowMethodEnumRuleCall_4_0_5_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_4_1() { return cTOK_SEMIParserRuleCall_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Monitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVarTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0_0 = (Alternatives)cGroup_4_0_0.eContents().get(0);
		private final Keyword cIniKeyword_4_0_0_0_0 = (Keyword)cAlternatives_4_0_0_0.eContents().get(0);
		private final Keyword cInitiallyKeyword_4_0_0_0_1 = (Keyword)cAlternatives_4_0_0_0.eContents().get(1);
		private final Assignment cInitialAssignment_4_0_0_1 = (Assignment)cGroup_4_0_0.eContents().get(1);
		private final RuleCall cInitialTemporalInExprParserRuleCall_4_0_0_1_0 = (RuleCall)cInitialAssignment_4_0_0_1.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cAlternatives_4_0.eContents().get(1);
		private final Alternatives cAlternatives_4_0_1_0 = (Alternatives)cGroup_4_0_1.eContents().get(0);
		private final Keyword cGKeyword_4_0_1_0_0 = (Keyword)cAlternatives_4_0_1_0.eContents().get(0);
		private final Keyword cTransKeyword_4_0_1_0_1 = (Keyword)cAlternatives_4_0_1_0.eContents().get(1);
		private final Assignment cSafetyAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cSafetyTemporalInExprParserRuleCall_4_0_1_1_0 = (RuleCall)cSafetyAssignment_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_0_2 = (Group)cAlternatives_4_0.eContents().get(2);
		private final Alternatives cAlternatives_4_0_2_0 = (Alternatives)cGroup_4_0_2.eContents().get(0);
		private final Keyword cAlwaysKeyword_4_0_2_0_0 = (Keyword)cAlternatives_4_0_2_0.eContents().get(0);
		private final Keyword cAlwKeyword_4_0_2_0_1 = (Keyword)cAlternatives_4_0_2_0.eContents().get(1);
		private final Assignment cStateInvAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final RuleCall cStateInvTemporalInExprParserRuleCall_4_0_2_1_0 = (RuleCall)cStateInvAssignment_4_0_2_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Monitor:
		//  'monitor' type=VarType name=ID '{' ((
		//    (('ini' | 'initially')? initial+=TemporalInExpr) |
		//    (('G' | 'trans') safety+=TemporalInExpr) |
		//    (('always' | 'alw') stateInv+=TemporalInExpr)
		//  ) TOK_SEMI)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'monitor' type=VarType name=ID '{' ((
		//  (('ini' | 'initially')? initial+=TemporalInExpr) |
		//  (('G' | 'trans') safety+=TemporalInExpr) |
		//  (('always' | 'alw') stateInv+=TemporalInExpr)
		//) TOK_SEMI)* '}'
		public Group getGroup() { return cGroup; }
		
		//'monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }
		
		//type=VarType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//VarType
		public RuleCall getTypeVarTypeParserRuleCall_1_0() { return cTypeVarTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//((
		//   (('ini' | 'initially')? initial+=TemporalInExpr) |
		//   (('G' | 'trans') safety+=TemporalInExpr) |
		//   (('always' | 'alw') stateInv+=TemporalInExpr)
		// ) TOK_SEMI)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(
		//    (('ini' | 'initially')? initial+=TemporalInExpr) |
		//    (('G' | 'trans') safety+=TemporalInExpr) |
		//    (('always' | 'alw') stateInv+=TemporalInExpr)
		//  )
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//(('ini' | 'initially')? initial+=TemporalInExpr)
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }
		
		//('ini' | 'initially')?
		public Alternatives getAlternatives_4_0_0_0() { return cAlternatives_4_0_0_0; }
		
		//'ini'
		public Keyword getIniKeyword_4_0_0_0_0() { return cIniKeyword_4_0_0_0_0; }
		
		//'initially'
		public Keyword getInitiallyKeyword_4_0_0_0_1() { return cInitiallyKeyword_4_0_0_0_1; }
		
		//initial+=TemporalInExpr
		public Assignment getInitialAssignment_4_0_0_1() { return cInitialAssignment_4_0_0_1; }
		
		//TemporalInExpr
		public RuleCall getInitialTemporalInExprParserRuleCall_4_0_0_1_0() { return cInitialTemporalInExprParserRuleCall_4_0_0_1_0; }
		
		//(('G' | 'trans') safety+=TemporalInExpr)
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//('G' | 'trans')
		public Alternatives getAlternatives_4_0_1_0() { return cAlternatives_4_0_1_0; }
		
		//'G'
		public Keyword getGKeyword_4_0_1_0_0() { return cGKeyword_4_0_1_0_0; }
		
		//'trans'
		public Keyword getTransKeyword_4_0_1_0_1() { return cTransKeyword_4_0_1_0_1; }
		
		//safety+=TemporalInExpr
		public Assignment getSafetyAssignment_4_0_1_1() { return cSafetyAssignment_4_0_1_1; }
		
		//TemporalInExpr
		public RuleCall getSafetyTemporalInExprParserRuleCall_4_0_1_1_0() { return cSafetyTemporalInExprParserRuleCall_4_0_1_1_0; }
		
		//(('always' | 'alw') stateInv+=TemporalInExpr)
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }
		
		//('always' | 'alw')
		public Alternatives getAlternatives_4_0_2_0() { return cAlternatives_4_0_2_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_4_0_2_0_0() { return cAlwaysKeyword_4_0_2_0_0; }
		
		//'alw'
		public Keyword getAlwKeyword_4_0_2_0_1() { return cAlwKeyword_4_0_2_0_1; }
		
		//stateInv+=TemporalInExpr
		public Assignment getStateInvAssignment_4_0_2_1() { return cStateInvAssignment_4_0_2_1; }
		
		//TemporalInExpr
		public RuleCall getStateInvTemporalInExprParserRuleCall_4_0_2_1_0() { return cStateInvTemporalInExprParserRuleCall_4_0_2_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_4_1() { return cTOK_SEMIParserRuleCall_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsPatternParamListParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cVarKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVarDeclListAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVarDeclListVarDeclParserRuleCall_3_1_1_0 = (RuleCall)cVarDeclListAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_2_0 = (Alternatives)cGroup_3_2.eContents().get(0);
		private final Group cGroup_3_2_0_0 = (Group)cAlternatives_3_2_0.eContents().get(0);
		private final Alternatives cAlternatives_3_2_0_0_0 = (Alternatives)cGroup_3_2_0_0.eContents().get(0);
		private final Keyword cIniKeyword_3_2_0_0_0_0 = (Keyword)cAlternatives_3_2_0_0_0.eContents().get(0);
		private final Keyword cInitiallyKeyword_3_2_0_0_0_1 = (Keyword)cAlternatives_3_2_0_0_0.eContents().get(1);
		private final Assignment cInitialAssignment_3_2_0_0_1 = (Assignment)cGroup_3_2_0_0.eContents().get(1);
		private final RuleCall cInitialTemporalInExprParserRuleCall_3_2_0_0_1_0 = (RuleCall)cInitialAssignment_3_2_0_0_1.eContents().get(0);
		private final Group cGroup_3_2_0_1 = (Group)cAlternatives_3_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3_2_0_1_0 = (Alternatives)cGroup_3_2_0_1.eContents().get(0);
		private final Keyword cGKeyword_3_2_0_1_0_0 = (Keyword)cAlternatives_3_2_0_1_0.eContents().get(0);
		private final Keyword cTransKeyword_3_2_0_1_0_1 = (Keyword)cAlternatives_3_2_0_1_0.eContents().get(1);
		private final Assignment cSafetyAssignment_3_2_0_1_1 = (Assignment)cGroup_3_2_0_1.eContents().get(1);
		private final RuleCall cSafetyTemporalInExprParserRuleCall_3_2_0_1_1_0 = (RuleCall)cSafetyAssignment_3_2_0_1_1.eContents().get(0);
		private final Group cGroup_3_2_0_2 = (Group)cAlternatives_3_2_0.eContents().get(2);
		private final Alternatives cAlternatives_3_2_0_2_0 = (Alternatives)cGroup_3_2_0_2.eContents().get(0);
		private final Keyword cAlwaysKeyword_3_2_0_2_0_0 = (Keyword)cAlternatives_3_2_0_2_0.eContents().get(0);
		private final Keyword cAlwKeyword_3_2_0_2_0_1 = (Keyword)cAlternatives_3_2_0_2_0.eContents().get(1);
		private final Assignment cStateInvAssignment_3_2_0_2_1 = (Assignment)cGroup_3_2_0_2.eContents().get(1);
		private final RuleCall cStateInvTemporalInExprParserRuleCall_3_2_0_2_1_0 = (RuleCall)cStateInvAssignment_3_2_0_2_1.eContents().get(0);
		private final Group cGroup_3_2_0_3 = (Group)cAlternatives_3_2_0.eContents().get(3);
		private final Alternatives cAlternatives_3_2_0_3_0 = (Alternatives)cGroup_3_2_0_3.eContents().get(0);
		private final Keyword cGFKeyword_3_2_0_3_0_0 = (Keyword)cAlternatives_3_2_0_3_0.eContents().get(0);
		private final Keyword cAlwEvKeyword_3_2_0_3_0_1 = (Keyword)cAlternatives_3_2_0_3_0.eContents().get(1);
		private final Keyword cAlwaysEventuallyKeyword_3_2_0_3_0_2 = (Keyword)cAlternatives_3_2_0_3_0.eContents().get(2);
		private final Assignment cJusticeAssignment_3_2_0_3_1 = (Assignment)cGroup_3_2_0_3.eContents().get(1);
		private final RuleCall cJusticeTemporalInExprParserRuleCall_3_2_0_3_1_0 = (RuleCall)cJusticeAssignment_3_2_0_3_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_3_2_1 = (RuleCall)cGroup_3_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Pattern:
		//    'pattern' name=ID ('(' params=PatternParamList ')')?
		//    ('{' ('var' varDeclList+=VarDecl)* ((
		//      (('ini' | 'initially')? initial+=TemporalInExpr) |
		//      (('G' | 'trans') safety+=TemporalInExpr) |
		//      (('always' | 'alw') stateInv+=TemporalInExpr) |
		//      (('GF' | 'alwEv'| 'alwaysEventually') justice+=TemporalInExpr)
		//    ) TOK_SEMI)+ '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' name=ID ('(' params=PatternParamList ')')?
		//('{' ('var' varDeclList+=VarDecl)* ((
		//  (('ini' | 'initially')? initial+=TemporalInExpr) |
		//  (('G' | 'trans') safety+=TemporalInExpr) |
		//  (('always' | 'alw') stateInv+=TemporalInExpr) |
		//  (('GF' | 'alwEv'| 'alwaysEventually') justice+=TemporalInExpr)
		//) TOK_SEMI)+ '}')
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' params=PatternParamList ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//params=PatternParamList
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//PatternParamList
		public RuleCall getParamsPatternParamListParserRuleCall_2_1_0() { return cParamsPatternParamListParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('{' ('var' varDeclList+=VarDecl)* ((
		//  (('ini' | 'initially')? initial+=TemporalInExpr) |
		//  (('G' | 'trans') safety+=TemporalInExpr) |
		//  (('always' | 'alw') stateInv+=TemporalInExpr) |
		//  (('GF' | 'alwEv'| 'alwaysEventually') justice+=TemporalInExpr)
		//) TOK_SEMI)+ '}')
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('var' varDeclList+=VarDecl)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'var'
		public Keyword getVarKeyword_3_1_0() { return cVarKeyword_3_1_0; }
		
		//varDeclList+=VarDecl
		public Assignment getVarDeclListAssignment_3_1_1() { return cVarDeclListAssignment_3_1_1; }
		
		//VarDecl
		public RuleCall getVarDeclListVarDeclParserRuleCall_3_1_1_0() { return cVarDeclListVarDeclParserRuleCall_3_1_1_0; }
		
		//((
		//     (('ini' | 'initially')? initial+=TemporalInExpr) |
		//     (('G' | 'trans') safety+=TemporalInExpr) |
		//     (('always' | 'alw') stateInv+=TemporalInExpr) |
		//     (('GF' | 'alwEv'| 'alwaysEventually') justice+=TemporalInExpr)
		//   ) TOK_SEMI)+
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//(
		//      (('ini' | 'initially')? initial+=TemporalInExpr) |
		//      (('G' | 'trans') safety+=TemporalInExpr) |
		//      (('always' | 'alw') stateInv+=TemporalInExpr) |
		//      (('GF' | 'alwEv'| 'alwaysEventually') justice+=TemporalInExpr)
		//    )
		public Alternatives getAlternatives_3_2_0() { return cAlternatives_3_2_0; }
		
		//(('ini' | 'initially')? initial+=TemporalInExpr)
		public Group getGroup_3_2_0_0() { return cGroup_3_2_0_0; }
		
		//('ini' | 'initially')?
		public Alternatives getAlternatives_3_2_0_0_0() { return cAlternatives_3_2_0_0_0; }
		
		//'ini'
		public Keyword getIniKeyword_3_2_0_0_0_0() { return cIniKeyword_3_2_0_0_0_0; }
		
		//'initially'
		public Keyword getInitiallyKeyword_3_2_0_0_0_1() { return cInitiallyKeyword_3_2_0_0_0_1; }
		
		//initial+=TemporalInExpr
		public Assignment getInitialAssignment_3_2_0_0_1() { return cInitialAssignment_3_2_0_0_1; }
		
		//TemporalInExpr
		public RuleCall getInitialTemporalInExprParserRuleCall_3_2_0_0_1_0() { return cInitialTemporalInExprParserRuleCall_3_2_0_0_1_0; }
		
		//(('G' | 'trans') safety+=TemporalInExpr)
		public Group getGroup_3_2_0_1() { return cGroup_3_2_0_1; }
		
		//('G' | 'trans')
		public Alternatives getAlternatives_3_2_0_1_0() { return cAlternatives_3_2_0_1_0; }
		
		//'G'
		public Keyword getGKeyword_3_2_0_1_0_0() { return cGKeyword_3_2_0_1_0_0; }
		
		//'trans'
		public Keyword getTransKeyword_3_2_0_1_0_1() { return cTransKeyword_3_2_0_1_0_1; }
		
		//safety+=TemporalInExpr
		public Assignment getSafetyAssignment_3_2_0_1_1() { return cSafetyAssignment_3_2_0_1_1; }
		
		//TemporalInExpr
		public RuleCall getSafetyTemporalInExprParserRuleCall_3_2_0_1_1_0() { return cSafetyTemporalInExprParserRuleCall_3_2_0_1_1_0; }
		
		//(('always' | 'alw') stateInv+=TemporalInExpr)
		public Group getGroup_3_2_0_2() { return cGroup_3_2_0_2; }
		
		//('always' | 'alw')
		public Alternatives getAlternatives_3_2_0_2_0() { return cAlternatives_3_2_0_2_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_3_2_0_2_0_0() { return cAlwaysKeyword_3_2_0_2_0_0; }
		
		//'alw'
		public Keyword getAlwKeyword_3_2_0_2_0_1() { return cAlwKeyword_3_2_0_2_0_1; }
		
		//stateInv+=TemporalInExpr
		public Assignment getStateInvAssignment_3_2_0_2_1() { return cStateInvAssignment_3_2_0_2_1; }
		
		//TemporalInExpr
		public RuleCall getStateInvTemporalInExprParserRuleCall_3_2_0_2_1_0() { return cStateInvTemporalInExprParserRuleCall_3_2_0_2_1_0; }
		
		//(('GF' | 'alwEv'| 'alwaysEventually') justice+=TemporalInExpr)
		public Group getGroup_3_2_0_3() { return cGroup_3_2_0_3; }
		
		//('GF' | 'alwEv'| 'alwaysEventually')
		public Alternatives getAlternatives_3_2_0_3_0() { return cAlternatives_3_2_0_3_0; }
		
		//'GF'
		public Keyword getGFKeyword_3_2_0_3_0_0() { return cGFKeyword_3_2_0_3_0_0; }
		
		//'alwEv'
		public Keyword getAlwEvKeyword_3_2_0_3_0_1() { return cAlwEvKeyword_3_2_0_3_0_1; }
		
		//'alwaysEventually'
		public Keyword getAlwaysEventuallyKeyword_3_2_0_3_0_2() { return cAlwaysEventuallyKeyword_3_2_0_3_0_2; }
		
		//justice+=TemporalInExpr
		public Assignment getJusticeAssignment_3_2_0_3_1() { return cJusticeAssignment_3_2_0_3_1; }
		
		//TemporalInExpr
		public RuleCall getJusticeTemporalInExprParserRuleCall_3_2_0_3_1_0() { return cJusticeTemporalInExprParserRuleCall_3_2_0_3_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_3_2_1() { return cTOK_SEMIParserRuleCall_3_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredicateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cParamsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParamsTypedParamListParserRuleCall_2_0_1_0 = (RuleCall)cParamsAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cBodyAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cBodyTemporalExpressionParserRuleCall_3_0_1_0 = (RuleCall)cBodyAssignment_3_0_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cBodyAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cBodyTemporalExpressionParserRuleCall_3_1_1_0 = (RuleCall)cBodyAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//Predicate:
		//  'predicate' name=ID ('(' params=TypedParamList ')' | '()')
		//  ( (':' body=TemporalExpression TOK_SEMI) |
		//    ('{' body=TemporalExpression '}')
		//  );
		@Override public ParserRule getRule() { return rule; }
		
		//'predicate' name=ID ('(' params=TypedParamList ')' | '()')
		//( (':' body=TemporalExpression TOK_SEMI) |
		//  ('{' body=TemporalExpression '}')
		//)
		public Group getGroup() { return cGroup; }
		
		//'predicate'
		public Keyword getPredicateKeyword_0() { return cPredicateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' params=TypedParamList ')' | '()')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'(' params=TypedParamList ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//params=TypedParamList
		public Assignment getParamsAssignment_2_0_1() { return cParamsAssignment_2_0_1; }
		
		//TypedParamList
		public RuleCall getParamsTypedParamListParserRuleCall_2_0_1_0() { return cParamsTypedParamListParserRuleCall_2_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }
		
		//( (':' body=TemporalExpression TOK_SEMI) |
		//  ('{' body=TemporalExpression '}')
		//)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(':' body=TemporalExpression TOK_SEMI)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }
		
		//body=TemporalExpression
		public Assignment getBodyAssignment_3_0_1() { return cBodyAssignment_3_0_1; }
		
		//TemporalExpression
		public RuleCall getBodyTemporalExpressionParserRuleCall_3_0_1_0() { return cBodyTemporalExpressionParserRuleCall_3_0_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_3_0_2() { return cTOK_SEMIParserRuleCall_3_0_2; }
		
		//('{' body=TemporalExpression '}')
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//body=TemporalExpression
		public Assignment getBodyAssignment_3_1_1() { return cBodyAssignment_3_1_1; }
		
		//TemporalExpression
		public RuleCall getBodyTemporalExpressionParserRuleCall_3_1_1_0() { return cBodyTemporalExpressionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.VarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameBooleanKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cIntKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cSubrAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cSubrSubrangeParserRuleCall_0_1_2_0 = (RuleCall)cSubrAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cConstAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cConstTypeConstantParserRuleCall_0_2_1_0 = (RuleCall)cConstAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cConstAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cConstTypeConstantParserRuleCall_0_2_2_1_0 = (RuleCall)cConstAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final CrossReference cTypeTypeDefCrossReference_0_3_0 = (CrossReference)cTypeAssignment_0_3.eContents().get(0);
		private final RuleCall cTypeTypeDefIDTerminalRuleCall_0_3_0_1 = (RuleCall)cTypeTypeDefCrossReference_0_3_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsSizeDefineDeclParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//VarType:
		//    (name='boolean'
		//    | 'Int' '(' subr=Subrange ')'
		//    | '{' const+=TypeConstant (',' const+=TypeConstant)* '}'
		//    | type=[TypeDef])
		//    ('[' dimensions+=SizeDefineDecl ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(name='boolean'
		//| 'Int' '(' subr=Subrange ')'
		//| '{' const+=TypeConstant (',' const+=TypeConstant)* '}'
		//| type=[TypeDef])
		//('[' dimensions+=SizeDefineDecl ']')*
		public Group getGroup() { return cGroup; }
		
		//(name='boolean'
		//| 'Int' '(' subr=Subrange ')'
		//| '{' const+=TypeConstant (',' const+=TypeConstant)* '}'
		//| type=[TypeDef])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//name='boolean'
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//'boolean'
		public Keyword getNameBooleanKeyword_0_0_0() { return cNameBooleanKeyword_0_0_0; }
		
		//'Int' '(' subr=Subrange ')'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'Int'
		public Keyword getIntKeyword_0_1_0() { return cIntKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_1() { return cLeftParenthesisKeyword_0_1_1; }
		
		//subr=Subrange
		public Assignment getSubrAssignment_0_1_2() { return cSubrAssignment_0_1_2; }
		
		//Subrange
		public RuleCall getSubrSubrangeParserRuleCall_0_1_2_0() { return cSubrSubrangeParserRuleCall_0_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }
		
		//'{' const+=TypeConstant (',' const+=TypeConstant)* '}'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2_0() { return cLeftCurlyBracketKeyword_0_2_0; }
		
		//const+=TypeConstant
		public Assignment getConstAssignment_0_2_1() { return cConstAssignment_0_2_1; }
		
		//TypeConstant
		public RuleCall getConstTypeConstantParserRuleCall_0_2_1_0() { return cConstTypeConstantParserRuleCall_0_2_1_0; }
		
		//(',' const+=TypeConstant)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }
		
		//const+=TypeConstant
		public Assignment getConstAssignment_0_2_2_1() { return cConstAssignment_0_2_2_1; }
		
		//TypeConstant
		public RuleCall getConstTypeConstantParserRuleCall_0_2_2_1_0() { return cConstTypeConstantParserRuleCall_0_2_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2_3() { return cRightCurlyBracketKeyword_0_2_3; }
		
		//type=[TypeDef]
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }
		
		//[TypeDef]
		public CrossReference getTypeTypeDefCrossReference_0_3_0() { return cTypeTypeDefCrossReference_0_3_0; }
		
		//ID
		public RuleCall getTypeTypeDefIDTerminalRuleCall_0_3_0_1() { return cTypeTypeDefIDTerminalRuleCall_0_3_0_1; }
		
		//('[' dimensions+=SizeDefineDecl ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//dimensions+=SizeDefineDecl
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }
		
		//SizeDefineDecl
		public RuleCall getDimensionsSizeDefineDeclParserRuleCall_1_1_0() { return cDimensionsSizeDefineDeclParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class LTLGarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.LTLGar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cGuaranteeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cGarKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParamsTypedParamListParserRuleCall_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Keyword cIniKeyword_2_0_0_0 = (Keyword)cAlternatives_2_0_0.eContents().get(0);
		private final Keyword cInitiallyKeyword_2_0_0_1 = (Keyword)cAlternatives_2_0_0.eContents().get(1);
		private final Assignment cSafetyAssignment_2_0_0_2 = (Assignment)cAlternatives_2_0_0.eContents().get(2);
		private final Alternatives cSafetyAlternatives_2_0_0_2_0 = (Alternatives)cSafetyAssignment_2_0_0_2.eContents().get(0);
		private final Keyword cSafetyGKeyword_2_0_0_2_0_0 = (Keyword)cSafetyAlternatives_2_0_0_2_0.eContents().get(0);
		private final Keyword cSafetyTransKeyword_2_0_0_2_0_1 = (Keyword)cSafetyAlternatives_2_0_0_2_0.eContents().get(1);
		private final Assignment cStateInvAssignment_2_0_0_3 = (Assignment)cAlternatives_2_0_0.eContents().get(3);
		private final Alternatives cStateInvAlternatives_2_0_0_3_0 = (Alternatives)cStateInvAssignment_2_0_0_3.eContents().get(0);
		private final Keyword cStateInvAlwaysKeyword_2_0_0_3_0_0 = (Keyword)cStateInvAlternatives_2_0_0_3_0.eContents().get(0);
		private final Keyword cStateInvAlwKeyword_2_0_0_3_0_1 = (Keyword)cStateInvAlternatives_2_0_0_3_0.eContents().get(1);
		private final Assignment cJusticeAssignment_2_0_0_4 = (Assignment)cAlternatives_2_0_0.eContents().get(4);
		private final Alternatives cJusticeAlternatives_2_0_0_4_0 = (Alternatives)cJusticeAssignment_2_0_0_4.eContents().get(0);
		private final Keyword cJusticeGFKeyword_2_0_0_4_0_0 = (Keyword)cJusticeAlternatives_2_0_0_4_0.eContents().get(0);
		private final Keyword cJusticeAlwEvKeyword_2_0_0_4_0_1 = (Keyword)cJusticeAlternatives_2_0_0_4_0.eContents().get(1);
		private final Keyword cJusticeAlwaysEventuallyKeyword_2_0_0_4_0_2 = (Keyword)cJusticeAlternatives_2_0_0_4_0.eContents().get(2);
		private final Assignment cTemporalExprAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTemporalExprQuantifierExprParserRuleCall_2_0_1_0 = (RuleCall)cTemporalExprAssignment_2_0_1.eContents().get(0);
		private final Assignment cTrigAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTrigTriggerParserRuleCall_2_1_0 = (RuleCall)cTrigAssignment_2_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//LTLGar:
		//    ('guarantee' | 'gar') (name=ID ('{' params=TypedParamList '}')? ':')?
		//    ((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger)) TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//('guarantee' | 'gar') (name=ID ('{' params=TypedParamList '}')? ':')?
		//((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger)) TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//('guarantee' | 'gar')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'guarantee'
		public Keyword getGuaranteeKeyword_0_0() { return cGuaranteeKeyword_0_0; }
		
		//'gar'
		public Keyword getGarKeyword_0_1() { return cGarKeyword_0_1; }
		
		//(name=ID ('{' params=TypedParamList '}')? ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//('{' params=TypedParamList '}')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//params=TypedParamList
		public Assignment getParamsAssignment_1_1_1() { return cParamsAssignment_1_1_1; }
		
		//TypedParamList
		public RuleCall getParamsTypedParamListParserRuleCall_1_1_1_0() { return cParamsTypedParamListParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr))
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))?
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//'ini'
		public Keyword getIniKeyword_2_0_0_0() { return cIniKeyword_2_0_0_0; }
		
		//'initially'
		public Keyword getInitiallyKeyword_2_0_0_1() { return cInitiallyKeyword_2_0_0_1; }
		
		//safety=('G' | 'trans')
		public Assignment getSafetyAssignment_2_0_0_2() { return cSafetyAssignment_2_0_0_2; }
		
		//('G' | 'trans')
		public Alternatives getSafetyAlternatives_2_0_0_2_0() { return cSafetyAlternatives_2_0_0_2_0; }
		
		//'G'
		public Keyword getSafetyGKeyword_2_0_0_2_0_0() { return cSafetyGKeyword_2_0_0_2_0_0; }
		
		//'trans'
		public Keyword getSafetyTransKeyword_2_0_0_2_0_1() { return cSafetyTransKeyword_2_0_0_2_0_1; }
		
		//stateInv=('always' | 'alw')
		public Assignment getStateInvAssignment_2_0_0_3() { return cStateInvAssignment_2_0_0_3; }
		
		//('always' | 'alw')
		public Alternatives getStateInvAlternatives_2_0_0_3_0() { return cStateInvAlternatives_2_0_0_3_0; }
		
		//'always'
		public Keyword getStateInvAlwaysKeyword_2_0_0_3_0_0() { return cStateInvAlwaysKeyword_2_0_0_3_0_0; }
		
		//'alw'
		public Keyword getStateInvAlwKeyword_2_0_0_3_0_1() { return cStateInvAlwKeyword_2_0_0_3_0_1; }
		
		//justice=('GF' | 'alwEv'| 'alwaysEventually')
		public Assignment getJusticeAssignment_2_0_0_4() { return cJusticeAssignment_2_0_0_4; }
		
		//('GF' | 'alwEv'| 'alwaysEventually')
		public Alternatives getJusticeAlternatives_2_0_0_4_0() { return cJusticeAlternatives_2_0_0_4_0; }
		
		//'GF'
		public Keyword getJusticeGFKeyword_2_0_0_4_0_0() { return cJusticeGFKeyword_2_0_0_4_0_0; }
		
		//'alwEv'
		public Keyword getJusticeAlwEvKeyword_2_0_0_4_0_1() { return cJusticeAlwEvKeyword_2_0_0_4_0_1; }
		
		//'alwaysEventually'
		public Keyword getJusticeAlwaysEventuallyKeyword_2_0_0_4_0_2() { return cJusticeAlwaysEventuallyKeyword_2_0_0_4_0_2; }
		
		//(temporalExpr=QuantifierExpr)
		public Assignment getTemporalExprAssignment_2_0_1() { return cTemporalExprAssignment_2_0_1; }
		
		//QuantifierExpr
		public RuleCall getTemporalExprQuantifierExprParserRuleCall_2_0_1_0() { return cTemporalExprQuantifierExprParserRuleCall_2_0_1_0; }
		
		//(trig=Trigger)
		public Assignment getTrigAssignment_2_1() { return cTrigAssignment_2_1; }
		
		//Trigger
		public RuleCall getTrigTriggerParserRuleCall_2_1_0() { return cTrigTriggerParserRuleCall_2_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_3() { return cTOK_SEMIParserRuleCall_3; }
	}
	public class LTLAsmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.LTLAsm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAssumptionKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAsmKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParamsTypedParamListParserRuleCall_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Keyword cIniKeyword_2_0_0_0 = (Keyword)cAlternatives_2_0_0.eContents().get(0);
		private final Keyword cInitiallyKeyword_2_0_0_1 = (Keyword)cAlternatives_2_0_0.eContents().get(1);
		private final Assignment cSafetyAssignment_2_0_0_2 = (Assignment)cAlternatives_2_0_0.eContents().get(2);
		private final Alternatives cSafetyAlternatives_2_0_0_2_0 = (Alternatives)cSafetyAssignment_2_0_0_2.eContents().get(0);
		private final Keyword cSafetyGKeyword_2_0_0_2_0_0 = (Keyword)cSafetyAlternatives_2_0_0_2_0.eContents().get(0);
		private final Keyword cSafetyTransKeyword_2_0_0_2_0_1 = (Keyword)cSafetyAlternatives_2_0_0_2_0.eContents().get(1);
		private final Assignment cStateInvAssignment_2_0_0_3 = (Assignment)cAlternatives_2_0_0.eContents().get(3);
		private final Alternatives cStateInvAlternatives_2_0_0_3_0 = (Alternatives)cStateInvAssignment_2_0_0_3.eContents().get(0);
		private final Keyword cStateInvAlwaysKeyword_2_0_0_3_0_0 = (Keyword)cStateInvAlternatives_2_0_0_3_0.eContents().get(0);
		private final Keyword cStateInvAlwKeyword_2_0_0_3_0_1 = (Keyword)cStateInvAlternatives_2_0_0_3_0.eContents().get(1);
		private final Assignment cJusticeAssignment_2_0_0_4 = (Assignment)cAlternatives_2_0_0.eContents().get(4);
		private final Alternatives cJusticeAlternatives_2_0_0_4_0 = (Alternatives)cJusticeAssignment_2_0_0_4.eContents().get(0);
		private final Keyword cJusticeGFKeyword_2_0_0_4_0_0 = (Keyword)cJusticeAlternatives_2_0_0_4_0.eContents().get(0);
		private final Keyword cJusticeAlwEvKeyword_2_0_0_4_0_1 = (Keyword)cJusticeAlternatives_2_0_0_4_0.eContents().get(1);
		private final Keyword cJusticeAlwaysEventuallyKeyword_2_0_0_4_0_2 = (Keyword)cJusticeAlternatives_2_0_0_4_0.eContents().get(2);
		private final Assignment cTemporalExprAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTemporalExprQuantifierExprParserRuleCall_2_0_1_0 = (RuleCall)cTemporalExprAssignment_2_0_1.eContents().get(0);
		private final Assignment cTrigAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTrigTriggerParserRuleCall_2_1_0 = (RuleCall)cTrigAssignment_2_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//LTLAsm:
		//    ('assumption' | 'asm') (name=ID ('{'  params=TypedParamList '}')? ':')?
		//  ((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger)) TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//  ('assumption' | 'asm') (name=ID ('{'  params=TypedParamList '}')? ':')?
		//((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger)) TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//('assumption' | 'asm')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'assumption'
		public Keyword getAssumptionKeyword_0_0() { return cAssumptionKeyword_0_0; }
		
		//'asm'
		public Keyword getAsmKeyword_0_1() { return cAsmKeyword_0_1; }
		
		//(name=ID ('{'  params=TypedParamList '}')? ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//('{'  params=TypedParamList '}')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//params=TypedParamList
		public Assignment getParamsAssignment_1_1_1() { return cParamsAssignment_1_1_1; }
		
		//TypedParamList
		public RuleCall getParamsTypedParamListParserRuleCall_1_1_1_0() { return cParamsTypedParamListParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr))
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))?
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//'ini'
		public Keyword getIniKeyword_2_0_0_0() { return cIniKeyword_2_0_0_0; }
		
		//'initially'
		public Keyword getInitiallyKeyword_2_0_0_1() { return cInitiallyKeyword_2_0_0_1; }
		
		//safety=('G' | 'trans')
		public Assignment getSafetyAssignment_2_0_0_2() { return cSafetyAssignment_2_0_0_2; }
		
		//('G' | 'trans')
		public Alternatives getSafetyAlternatives_2_0_0_2_0() { return cSafetyAlternatives_2_0_0_2_0; }
		
		//'G'
		public Keyword getSafetyGKeyword_2_0_0_2_0_0() { return cSafetyGKeyword_2_0_0_2_0_0; }
		
		//'trans'
		public Keyword getSafetyTransKeyword_2_0_0_2_0_1() { return cSafetyTransKeyword_2_0_0_2_0_1; }
		
		//stateInv=('always' | 'alw')
		public Assignment getStateInvAssignment_2_0_0_3() { return cStateInvAssignment_2_0_0_3; }
		
		//('always' | 'alw')
		public Alternatives getStateInvAlternatives_2_0_0_3_0() { return cStateInvAlternatives_2_0_0_3_0; }
		
		//'always'
		public Keyword getStateInvAlwaysKeyword_2_0_0_3_0_0() { return cStateInvAlwaysKeyword_2_0_0_3_0_0; }
		
		//'alw'
		public Keyword getStateInvAlwKeyword_2_0_0_3_0_1() { return cStateInvAlwKeyword_2_0_0_3_0_1; }
		
		//justice=('GF' | 'alwEv'| 'alwaysEventually')
		public Assignment getJusticeAssignment_2_0_0_4() { return cJusticeAssignment_2_0_0_4; }
		
		//('GF' | 'alwEv'| 'alwaysEventually')
		public Alternatives getJusticeAlternatives_2_0_0_4_0() { return cJusticeAlternatives_2_0_0_4_0; }
		
		//'GF'
		public Keyword getJusticeGFKeyword_2_0_0_4_0_0() { return cJusticeGFKeyword_2_0_0_4_0_0; }
		
		//'alwEv'
		public Keyword getJusticeAlwEvKeyword_2_0_0_4_0_1() { return cJusticeAlwEvKeyword_2_0_0_4_0_1; }
		
		//'alwaysEventually'
		public Keyword getJusticeAlwaysEventuallyKeyword_2_0_0_4_0_2() { return cJusticeAlwaysEventuallyKeyword_2_0_0_4_0_2; }
		
		//(temporalExpr=QuantifierExpr)
		public Assignment getTemporalExprAssignment_2_0_1() { return cTemporalExprAssignment_2_0_1; }
		
		//QuantifierExpr
		public RuleCall getTemporalExprQuantifierExprParserRuleCall_2_0_1_0() { return cTemporalExprQuantifierExprParserRuleCall_2_0_1_0; }
		
		//(trig=Trigger)
		public Assignment getTrigAssignment_2_1() { return cTrigAssignment_2_1; }
		
		//Trigger
		public RuleCall getTrigTriggerParserRuleCall_2_1_0() { return cTrigTriggerParserRuleCall_2_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_3() { return cTOK_SEMIParserRuleCall_3; }
	}
	public class EXGarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.EXGar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cGuaranteeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cGarKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cGEKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cElementsTemporalInExprParserRuleCall_2_0_1_0 = (RuleCall)cElementsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cElementsTemporalInExprParserRuleCall_2_0_2_1_0 = (RuleCall)cElementsAssignment_2_0_2_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cGEFKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRegExpPointerAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cRegExpPointerDefineRegExpDeclCrossReference_2_1_1_0 = (CrossReference)cRegExpPointerAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRegExpPointerDefineRegExpDeclIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cRegExpPointerDefineRegExpDeclCrossReference_2_1_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cGEFKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cRegExpAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cRegExpRegExpParserRuleCall_2_2_1_0 = (RuleCall)cRegExpAssignment_2_2_1.eContents().get(0);
		private final RuleCall cTOK_SEMIParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EXGar:
		//  ('guarantee' | 'gar') (name=ID ':')?
		//  (('GE' elements+=TemporalInExpr (',' elements+=TemporalInExpr)*) | ('GEF' regExpPointer = [DefineRegExpDecl]) | ('GEF' regExp = RegExp)) TOK_SEMI;
		@Override public ParserRule getRule() { return rule; }
		
		//('guarantee' | 'gar') (name=ID ':')?
		//(('GE' elements+=TemporalInExpr (',' elements+=TemporalInExpr)*) | ('GEF' regExpPointer = [DefineRegExpDecl]) | ('GEF' regExp = RegExp)) TOK_SEMI
		public Group getGroup() { return cGroup; }
		
		//('guarantee' | 'gar')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'guarantee'
		public Keyword getGuaranteeKeyword_0_0() { return cGuaranteeKeyword_0_0; }
		
		//'gar'
		public Keyword getGarKeyword_0_1() { return cGarKeyword_0_1; }
		
		//(name=ID ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//(('GE' elements+=TemporalInExpr (',' elements+=TemporalInExpr)*) | ('GEF' regExpPointer = [DefineRegExpDecl]) | ('GEF' regExp = RegExp))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('GE' elements+=TemporalInExpr (',' elements+=TemporalInExpr)*)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'GE'
		public Keyword getGEKeyword_2_0_0() { return cGEKeyword_2_0_0; }
		
		//elements+=TemporalInExpr
		public Assignment getElementsAssignment_2_0_1() { return cElementsAssignment_2_0_1; }
		
		//TemporalInExpr
		public RuleCall getElementsTemporalInExprParserRuleCall_2_0_1_0() { return cElementsTemporalInExprParserRuleCall_2_0_1_0; }
		
		//(',' elements+=TemporalInExpr)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//elements+=TemporalInExpr
		public Assignment getElementsAssignment_2_0_2_1() { return cElementsAssignment_2_0_2_1; }
		
		//TemporalInExpr
		public RuleCall getElementsTemporalInExprParserRuleCall_2_0_2_1_0() { return cElementsTemporalInExprParserRuleCall_2_0_2_1_0; }
		
		//('GEF' regExpPointer = [DefineRegExpDecl])
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'GEF'
		public Keyword getGEFKeyword_2_1_0() { return cGEFKeyword_2_1_0; }
		
		//regExpPointer = [DefineRegExpDecl]
		public Assignment getRegExpPointerAssignment_2_1_1() { return cRegExpPointerAssignment_2_1_1; }
		
		//[DefineRegExpDecl]
		public CrossReference getRegExpPointerDefineRegExpDeclCrossReference_2_1_1_0() { return cRegExpPointerDefineRegExpDeclCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getRegExpPointerDefineRegExpDeclIDTerminalRuleCall_2_1_1_0_1() { return cRegExpPointerDefineRegExpDeclIDTerminalRuleCall_2_1_1_0_1; }
		
		//('GEF' regExp = RegExp)
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'GEF'
		public Keyword getGEFKeyword_2_2_0() { return cGEFKeyword_2_2_0; }
		
		//regExp = RegExp
		public Assignment getRegExpAssignment_2_2_1() { return cRegExpAssignment_2_2_1; }
		
		//RegExp
		public RuleCall getRegExpRegExpParserRuleCall_2_2_1_0() { return cRegExpRegExpParserRuleCall_2_2_1_0; }
		
		//TOK_SEMI
		public RuleCall getTOK_SEMIParserRuleCall_3() { return cTOK_SEMIParserRuleCall_3; }
	}
	public class TemporalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalExpression");
		private final RuleCall cQuantifierExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TemporalExpression:
		//  QuantifierExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//QuantifierExpr
		public RuleCall getQuantifierExprParserRuleCall() { return cQuantifierExprParserRuleCall; }
	}
	public class TemporalInExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalInExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalImpExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalInExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNotAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNotNotKeyword_1_1_0 = (Keyword)cNotAssignment_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cOperatorInKeyword_1_2_0 = (Keyword)cOperatorAssignment_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValuesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cValuesValueInRangeParserRuleCall_1_4_0 = (RuleCall)cValuesAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cValuesAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cValuesValueInRangeParserRuleCall_1_5_1_0 = (RuleCall)cValuesAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//TemporalInExpr returns TemporalExpression:
		//    TemporalImpExpr ({TemporalInExpr.left=current} (not?='not')? operator=('in') '{'  values+=ValueInRange (',' values+=ValueInRange)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalImpExpr ({TemporalInExpr.left=current} (not?='not')? operator=('in') '{'  values+=ValueInRange (',' values+=ValueInRange)* '}')?
		public Group getGroup() { return cGroup; }
		
		//TemporalImpExpr
		public RuleCall getTemporalImpExprParserRuleCall_0() { return cTemporalImpExprParserRuleCall_0; }
		
		//({TemporalInExpr.left=current} (not?='not')? operator=('in') '{'  values+=ValueInRange (',' values+=ValueInRange)* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalInExpr.left=current}
		public Action getTemporalInExprLeftAction_1_0() { return cTemporalInExprLeftAction_1_0; }
		
		//(not?='not')?
		public Assignment getNotAssignment_1_1() { return cNotAssignment_1_1; }
		
		//'not'
		public Keyword getNotNotKeyword_1_1_0() { return cNotNotKeyword_1_1_0; }
		
		//operator=('in')
		public Assignment getOperatorAssignment_1_2() { return cOperatorAssignment_1_2; }
		
		//('in')
		public Keyword getOperatorInKeyword_1_2_0() { return cOperatorInKeyword_1_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//values+=ValueInRange
		public Assignment getValuesAssignment_1_4() { return cValuesAssignment_1_4; }
		
		//ValueInRange
		public RuleCall getValuesValueInRangeParserRuleCall_1_4_0() { return cValuesValueInRangeParserRuleCall_1_4_0; }
		
		//(',' values+=ValueInRange)*
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//','
		public Keyword getCommaKeyword_1_5_0() { return cCommaKeyword_1_5_0; }
		
		//values+=ValueInRange
		public Assignment getValuesAssignment_1_5_1() { return cValuesAssignment_1_5_1; }
		
		//ValueInRange
		public RuleCall getValuesValueInRangeParserRuleCall_1_5_1_0() { return cValuesValueInRangeParserRuleCall_1_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}
	public class TemporalImpExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalImpExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalIffExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalImpExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorImpliesKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cImplicationAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cImplicationTemporalImpExprParserRuleCall_1_2_0 = (RuleCall)cImplicationAssignment_1_2.eContents().get(0);
		
		//TemporalImpExpr returns TemporalExpression:
		//    TemporalIffExpr ({TemporalImpExpr.left=current} operator=('->' | 'implies') implication=TemporalImpExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalIffExpr ({TemporalImpExpr.left=current} operator=('->' | 'implies') implication=TemporalImpExpr)?
		public Group getGroup() { return cGroup; }
		
		//TemporalIffExpr
		public RuleCall getTemporalIffExprParserRuleCall_0() { return cTemporalIffExprParserRuleCall_0; }
		
		//({TemporalImpExpr.left=current} operator=('->' | 'implies') implication=TemporalImpExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalImpExpr.left=current}
		public Action getTemporalImpExprLeftAction_1_0() { return cTemporalImpExprLeftAction_1_0; }
		
		//operator=('->' | 'implies')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('->' | 'implies')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'->'
		public Keyword getOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0() { return cOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0; }
		
		//'implies'
		public Keyword getOperatorImpliesKeyword_1_1_0_1() { return cOperatorImpliesKeyword_1_1_0_1; }
		
		//implication=TemporalImpExpr
		public Assignment getImplicationAssignment_1_2() { return cImplicationAssignment_1_2; }
		
		//TemporalImpExpr
		public RuleCall getImplicationTemporalImpExprParserRuleCall_1_2_0() { return cImplicationTemporalImpExprParserRuleCall_1_2_0; }
	}
	public class TemporalIffExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalIffExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalIffExprElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorIffKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsTemporalOrExprParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//TemporalIffExpr returns TemporalExpression:
		//    TemporalOrExpr ({TemporalIffExpr.elements+=current} operator=('<->' | 'iff') elements+=TemporalOrExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalOrExpr ({TemporalIffExpr.elements+=current} operator=('<->' | 'iff') elements+=TemporalOrExpr)*
		public Group getGroup() { return cGroup; }
		
		//TemporalOrExpr
		public RuleCall getTemporalOrExprParserRuleCall_0() { return cTemporalOrExprParserRuleCall_0; }
		
		//({TemporalIffExpr.elements+=current} operator=('<->' | 'iff') elements+=TemporalOrExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalIffExpr.elements+=current}
		public Action getTemporalIffExprElementsAction_1_0() { return cTemporalIffExprElementsAction_1_0; }
		
		//operator=('<->' | 'iff')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('<->' | 'iff')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'<->'
		public Keyword getOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_0; }
		
		//'iff'
		public Keyword getOperatorIffKeyword_1_1_0_1() { return cOperatorIffKeyword_1_1_0_1; }
		
		//elements+=TemporalOrExpr
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//TemporalOrExpr
		public RuleCall getElementsTemporalOrExprParserRuleCall_1_2_0() { return cElementsTemporalOrExprParserRuleCall_1_2_0; }
	}
	public class TemporalOrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalOrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalOrExprElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorOrKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorXorKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsTemporalAndExprParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//TemporalOrExpr returns TemporalExpression:
		//    TemporalAndExpr    ({TemporalOrExpr.elements+=current} operator+=('|' | 'or' | 'xor') elements+=TemporalAndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalAndExpr	({TemporalOrExpr.elements+=current} operator+=('|' | 'or' | 'xor') elements+=TemporalAndExpr)*
		public Group getGroup() { return cGroup; }
		
		//TemporalAndExpr
		public RuleCall getTemporalAndExprParserRuleCall_0() { return cTemporalAndExprParserRuleCall_0; }
		
		//({TemporalOrExpr.elements+=current} operator+=('|' | 'or' | 'xor') elements+=TemporalAndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalOrExpr.elements+=current}
		public Action getTemporalOrExprElementsAction_1_0() { return cTemporalOrExprElementsAction_1_0; }
		
		//operator+=('|' | 'or' | 'xor')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('|' | 'or' | 'xor')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0_0() { return cOperatorVerticalLineKeyword_1_1_0_0; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_1_0_1() { return cOperatorOrKeyword_1_1_0_1; }
		
		//'xor'
		public Keyword getOperatorXorKeyword_1_1_0_2() { return cOperatorXorKeyword_1_1_0_2; }
		
		//elements+=TemporalAndExpr
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//TemporalAndExpr
		public RuleCall getElementsTemporalAndExprParserRuleCall_1_2_0() { return cElementsTemporalAndExprParserRuleCall_1_2_0; }
	}
	public class TemporalAndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalAndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalAndExprElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAmpersandKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsTemporalRelationalExprParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//TemporalAndExpr returns TemporalExpression:
		//    TemporalRelationalExpr ({TemporalAndExpr.elements+=current} operator+=('&' | 'and') elements+=TemporalRelationalExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalRelationalExpr ({TemporalAndExpr.elements+=current} operator+=('&' | 'and') elements+=TemporalRelationalExpr)*
		public Group getGroup() { return cGroup; }
		
		//TemporalRelationalExpr
		public RuleCall getTemporalRelationalExprParserRuleCall_0() { return cTemporalRelationalExprParserRuleCall_0; }
		
		//({TemporalAndExpr.elements+=current} operator+=('&' | 'and') elements+=TemporalRelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalAndExpr.elements+=current}
		public Action getTemporalAndExprElementsAction_1_0() { return cTemporalAndExprElementsAction_1_0; }
		
		//operator+=('&' | 'and')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('&' | 'and')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'&'
		public Keyword getOperatorAmpersandKeyword_1_1_0_0() { return cOperatorAmpersandKeyword_1_1_0_0; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_1_0_1() { return cOperatorAndKeyword_1_1_0_1; }
		
		//elements+=TemporalRelationalExpr
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//TemporalRelationalExpr
		public RuleCall getElementsTemporalRelationalExprParserRuleCall_1_2_0() { return cElementsTemporalRelationalExprParserRuleCall_1_2_0; }
	}
	public class TemporalRelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalRelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalRemainderExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalRelationalExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTemporalRemainderExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//TemporalRelationalExpr returns TemporalExpression:
		//    TemporalRemainderExpr    ({TemporalRelationalExpr.left=current} operator=('='|'!='|'<'|'>'|'<='|'>=') right=TemporalRemainderExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalRemainderExpr	({TemporalRelationalExpr.left=current} operator=('='|'!='|'<'|'>'|'<='|'>=') right=TemporalRemainderExpr)?
		public Group getGroup() { return cGroup; }
		
		//TemporalRemainderExpr
		public RuleCall getTemporalRemainderExprParserRuleCall_0() { return cTemporalRemainderExprParserRuleCall_0; }
		
		//({TemporalRelationalExpr.left=current} operator=('='|'!='|'<'|'>'|'<='|'>=') right=TemporalRemainderExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalRelationalExpr.left=current}
		public Action getTemporalRelationalExprLeftAction_1_0() { return cTemporalRelationalExprLeftAction_1_0; }
		
		//operator=('='|'!='|'<'|'>'|'<='|'>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('='|'!='|'<'|'>'|'<='|'>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_2() { return cOperatorLessThanSignKeyword_1_1_0_2; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignKeyword_1_1_0_3; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_4() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_4; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5; }
		
		//right=TemporalRemainderExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//TemporalRemainderExpr
		public RuleCall getRightTemporalRemainderExprParserRuleCall_1_2_0() { return cRightTemporalRemainderExprParserRuleCall_1_2_0; }
	}
	public class TemporalRemainderExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalRemainderExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalAdditiveExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalRemainderExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorModKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorPercentSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTemporalAdditiveExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//TemporalRemainderExpr returns TemporalExpression:
		//    TemporalAdditiveExpr ({TemporalRemainderExpr.left=current} operator=('mod' | '%') right=TemporalAdditiveExpr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalAdditiveExpr ({TemporalRemainderExpr.left=current} operator=('mod' | '%') right=TemporalAdditiveExpr)?
		public Group getGroup() { return cGroup; }
		
		//TemporalAdditiveExpr
		public RuleCall getTemporalAdditiveExprParserRuleCall_0() { return cTemporalAdditiveExprParserRuleCall_0; }
		
		//({TemporalRemainderExpr.left=current} operator=('mod' | '%') right=TemporalAdditiveExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalRemainderExpr.left=current}
		public Action getTemporalRemainderExprLeftAction_1_0() { return cTemporalRemainderExprLeftAction_1_0; }
		
		//operator=('mod' | '%')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('mod' | '%')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'mod'
		public Keyword getOperatorModKeyword_1_1_0_0() { return cOperatorModKeyword_1_1_0_0; }
		
		//'%'
		public Keyword getOperatorPercentSignKeyword_1_1_0_1() { return cOperatorPercentSignKeyword_1_1_0_1; }
		
		//right=TemporalAdditiveExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//TemporalAdditiveExpr
		public RuleCall getRightTemporalAdditiveExprParserRuleCall_1_2_0() { return cRightTemporalAdditiveExprParserRuleCall_1_2_0; }
	}
	public class TemporalAdditiveExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalAdditiveExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalMultiplicativeExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalAdditiveExprElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsTemporalMultiplicativeExprParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//TemporalAdditiveExpr returns TemporalExpression:
		//    TemporalMultiplicativeExpr ({TemporalAdditiveExpr.elements+=current} operator+=('+'|'-') elements+=TemporalMultiplicativeExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalMultiplicativeExpr ({TemporalAdditiveExpr.elements+=current} operator+=('+'|'-') elements+=TemporalMultiplicativeExpr)*
		public Group getGroup() { return cGroup; }
		
		//TemporalMultiplicativeExpr
		public RuleCall getTemporalMultiplicativeExprParserRuleCall_0() { return cTemporalMultiplicativeExprParserRuleCall_0; }
		
		//({TemporalAdditiveExpr.elements+=current} operator+=('+'|'-') elements+=TemporalMultiplicativeExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalAdditiveExpr.elements+=current}
		public Action getTemporalAdditiveExprElementsAction_1_0() { return cTemporalAdditiveExprElementsAction_1_0; }
		
		//operator+=('+'|'-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+'|'-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//elements+=TemporalMultiplicativeExpr
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//TemporalMultiplicativeExpr
		public RuleCall getElementsTemporalMultiplicativeExprParserRuleCall_1_2_0() { return cElementsTemporalMultiplicativeExprParserRuleCall_1_2_0; }
	}
	public class TemporalMultiplicativeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalMultiplicativeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalBinaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalMultiplicativeExprElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsTemporalBinaryExprParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//TemporalMultiplicativeExpr returns TemporalExpression:
		//    TemporalBinaryExpr ({TemporalMultiplicativeExpr.elements+=current} operator+=('*'|'/') elements+=TemporalBinaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalBinaryExpr ({TemporalMultiplicativeExpr.elements+=current} operator+=('*'|'/') elements+=TemporalBinaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//TemporalBinaryExpr
		public RuleCall getTemporalBinaryExprParserRuleCall_0() { return cTemporalBinaryExprParserRuleCall_0; }
		
		//({TemporalMultiplicativeExpr.elements+=current} operator+=('*'|'/') elements+=TemporalBinaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalMultiplicativeExpr.elements+=current}
		public Action getTemporalMultiplicativeExprElementsAction_1_0() { return cTemporalMultiplicativeExprElementsAction_1_0; }
		
		//operator+=('*'|'/')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*'|'/')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//elements+=TemporalBinaryExpr
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//TemporalBinaryExpr
		public RuleCall getElementsTemporalBinaryExprParserRuleCall_1_2_0() { return cElementsTemporalBinaryExprParserRuleCall_1_2_0; }
	}
	public class TemporalBinaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalBinaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTemporalBinaryExprElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorSKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSINCEKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorTKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorTRIGGEREDKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementsTemporalUnaryExprParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		
		//TemporalBinaryExpr returns TemporalExpression:
		//    TemporalUnaryExpr    ({TemporalBinaryExpr.elements+=current} operator+=('S' | 'SINCE' | 'T' | 'TRIGGERED') elements+=TemporalUnaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalUnaryExpr	({TemporalBinaryExpr.elements+=current} operator+=('S' | 'SINCE' | 'T' | 'TRIGGERED') elements+=TemporalUnaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//TemporalUnaryExpr
		public RuleCall getTemporalUnaryExprParserRuleCall_0() { return cTemporalUnaryExprParserRuleCall_0; }
		
		//({TemporalBinaryExpr.elements+=current} operator+=('S' | 'SINCE' | 'T' | 'TRIGGERED') elements+=TemporalUnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalBinaryExpr.elements+=current}
		public Action getTemporalBinaryExprElementsAction_1_0() { return cTemporalBinaryExprElementsAction_1_0; }
		
		//operator+=('S' | 'SINCE' | 'T' | 'TRIGGERED')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('S' | 'SINCE' | 'T' | 'TRIGGERED')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'S'
		public Keyword getOperatorSKeyword_1_1_0_0() { return cOperatorSKeyword_1_1_0_0; }
		
		//'SINCE'
		public Keyword getOperatorSINCEKeyword_1_1_0_1() { return cOperatorSINCEKeyword_1_1_0_1; }
		
		//'T'
		public Keyword getOperatorTKeyword_1_1_0_2() { return cOperatorTKeyword_1_1_0_2; }
		
		//'TRIGGERED'
		public Keyword getOperatorTRIGGEREDKeyword_1_1_0_3() { return cOperatorTRIGGEREDKeyword_1_1_0_3; }
		
		//elements+=TemporalUnaryExpr
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//TemporalUnaryExpr
		public RuleCall getElementsTemporalUnaryExprParserRuleCall_1_2_0() { return cElementsTemporalUnaryExprParserRuleCall_1_2_0; }
	}
	public class TemporalUnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalUnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemporalPrimaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTemporalUnaryExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Assignment cKindsAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cKindsAlternatives_1_1_0_0_0 = (Alternatives)cKindsAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cKindsYKeyword_1_1_0_0_0_0 = (Keyword)cKindsAlternatives_1_1_0_0_0.eContents().get(0);
		private final Keyword cKindsPREVKeyword_1_1_0_0_0_1 = (Keyword)cKindsAlternatives_1_1_0_0_0.eContents().get(1);
		private final Assignment cTueAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cTueTemporalUnaryExprParserRuleCall_1_1_0_1_0 = (RuleCall)cTueAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cKindsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cKindsAlternatives_1_1_1_0_0 = (Alternatives)cKindsAssignment_1_1_1_0.eContents().get(0);
		private final Keyword cKindsHKeyword_1_1_1_0_0_0 = (Keyword)cKindsAlternatives_1_1_1_0_0.eContents().get(0);
		private final Keyword cKindsHISTORICALLYKeyword_1_1_1_0_0_1 = (Keyword)cKindsAlternatives_1_1_1_0_0.eContents().get(1);
		private final Assignment cTueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTueTemporalUnaryExprParserRuleCall_1_1_1_1_0 = (RuleCall)cTueAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Assignment cKindsAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final Alternatives cKindsAlternatives_1_1_2_0_0 = (Alternatives)cKindsAssignment_1_1_2_0.eContents().get(0);
		private final Keyword cKindsOKeyword_1_1_2_0_0_0 = (Keyword)cKindsAlternatives_1_1_2_0_0.eContents().get(0);
		private final Keyword cKindsONCEKeyword_1_1_2_0_0_1 = (Keyword)cKindsAlternatives_1_1_2_0_0.eContents().get(1);
		private final Assignment cTueAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cTueTemporalUnaryExprParserRuleCall_1_1_2_1_0 = (RuleCall)cTueAssignment_1_1_2_1.eContents().get(0);
		
		//TemporalUnaryExpr returns TemporalExpression:
		//    TemporalPrimaryExpr
		//    | {TemporalUnaryExpr}
		//      (kinds=('Y' | 'PREV') tue=TemporalUnaryExpr
		//      | kinds=('H' | 'HISTORICALLY') tue=TemporalUnaryExpr
		//      | kinds=('O' | 'ONCE') tue=TemporalUnaryExpr);
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalPrimaryExpr
		//| {TemporalUnaryExpr}
		//  (kinds=('Y' | 'PREV') tue=TemporalUnaryExpr
		//  | kinds=('H' | 'HISTORICALLY') tue=TemporalUnaryExpr
		//  | kinds=('O' | 'ONCE') tue=TemporalUnaryExpr)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TemporalPrimaryExpr
		public RuleCall getTemporalPrimaryExprParserRuleCall_0() { return cTemporalPrimaryExprParserRuleCall_0; }
		
		//{TemporalUnaryExpr}
		//     (kinds=('Y' | 'PREV') tue=TemporalUnaryExpr
		//     | kinds=('H' | 'HISTORICALLY') tue=TemporalUnaryExpr
		//     | kinds=('O' | 'ONCE') tue=TemporalUnaryExpr)
		public Group getGroup_1() { return cGroup_1; }
		
		//{TemporalUnaryExpr}
		public Action getTemporalUnaryExprAction_1_0() { return cTemporalUnaryExprAction_1_0; }
		
		//(kinds=('Y' | 'PREV') tue=TemporalUnaryExpr
		//| kinds=('H' | 'HISTORICALLY') tue=TemporalUnaryExpr
		//| kinds=('O' | 'ONCE') tue=TemporalUnaryExpr)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//kinds=('Y' | 'PREV') tue=TemporalUnaryExpr
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//kinds=('Y' | 'PREV')
		public Assignment getKindsAssignment_1_1_0_0() { return cKindsAssignment_1_1_0_0; }
		
		//('Y' | 'PREV')
		public Alternatives getKindsAlternatives_1_1_0_0_0() { return cKindsAlternatives_1_1_0_0_0; }
		
		//'Y'
		public Keyword getKindsYKeyword_1_1_0_0_0_0() { return cKindsYKeyword_1_1_0_0_0_0; }
		
		//'PREV'
		public Keyword getKindsPREVKeyword_1_1_0_0_0_1() { return cKindsPREVKeyword_1_1_0_0_0_1; }
		
		//tue=TemporalUnaryExpr
		public Assignment getTueAssignment_1_1_0_1() { return cTueAssignment_1_1_0_1; }
		
		//TemporalUnaryExpr
		public RuleCall getTueTemporalUnaryExprParserRuleCall_1_1_0_1_0() { return cTueTemporalUnaryExprParserRuleCall_1_1_0_1_0; }
		
		//kinds=('H' | 'HISTORICALLY') tue=TemporalUnaryExpr
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//kinds=('H' | 'HISTORICALLY')
		public Assignment getKindsAssignment_1_1_1_0() { return cKindsAssignment_1_1_1_0; }
		
		//('H' | 'HISTORICALLY')
		public Alternatives getKindsAlternatives_1_1_1_0_0() { return cKindsAlternatives_1_1_1_0_0; }
		
		//'H'
		public Keyword getKindsHKeyword_1_1_1_0_0_0() { return cKindsHKeyword_1_1_1_0_0_0; }
		
		//'HISTORICALLY'
		public Keyword getKindsHISTORICALLYKeyword_1_1_1_0_0_1() { return cKindsHISTORICALLYKeyword_1_1_1_0_0_1; }
		
		//tue=TemporalUnaryExpr
		public Assignment getTueAssignment_1_1_1_1() { return cTueAssignment_1_1_1_1; }
		
		//TemporalUnaryExpr
		public RuleCall getTueTemporalUnaryExprParserRuleCall_1_1_1_1_0() { return cTueTemporalUnaryExprParserRuleCall_1_1_1_1_0; }
		
		//kinds=('O' | 'ONCE') tue=TemporalUnaryExpr
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//kinds=('O' | 'ONCE')
		public Assignment getKindsAssignment_1_1_2_0() { return cKindsAssignment_1_1_2_0; }
		
		//('O' | 'ONCE')
		public Alternatives getKindsAlternatives_1_1_2_0_0() { return cKindsAlternatives_1_1_2_0_0; }
		
		//'O'
		public Keyword getKindsOKeyword_1_1_2_0_0_0() { return cKindsOKeyword_1_1_2_0_0_0; }
		
		//'ONCE'
		public Keyword getKindsONCEKeyword_1_1_2_0_0_1() { return cKindsONCEKeyword_1_1_2_0_0_1; }
		
		//tue=TemporalUnaryExpr
		public Assignment getTueAssignment_1_1_2_1() { return cTueAssignment_1_1_2_1; }
		
		//TemporalUnaryExpr
		public RuleCall getTueTemporalUnaryExprParserRuleCall_1_1_2_1_0() { return cTueTemporalUnaryExprParserRuleCall_1_1_2_1_0; }
	}
	public class TemporalPrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TemporalPrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cQuantifierExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTemporalPrimaryExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Assignment cPredPattAssignment_2_1_0_0 = (Assignment)cGroup_2_1_0.eContents().get(0);
		private final CrossReference cPredPattPredicateOrPatternReferrableCrossReference_2_1_0_0_0 = (CrossReference)cPredPattAssignment_2_1_0_0.eContents().get(0);
		private final RuleCall cPredPattPredicateOrPatternReferrableIDTerminalRuleCall_2_1_0_0_0_1 = (RuleCall)cPredPattPredicateOrPatternReferrableCrossReference_2_1_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0_1 = (Alternatives)cGroup_2_1_0.eContents().get(1);
		private final Group cGroup_2_1_0_1_0 = (Group)cAlternatives_2_1_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_0_1_0_0 = (Keyword)cGroup_2_1_0_1_0.eContents().get(0);
		private final Assignment cPredPattParamsAssignment_2_1_0_1_0_1 = (Assignment)cGroup_2_1_0_1_0.eContents().get(1);
		private final RuleCall cPredPattParamsTemporalInExprParserRuleCall_2_1_0_1_0_1_0 = (RuleCall)cPredPattParamsAssignment_2_1_0_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_0_1_0_2 = (Group)cGroup_2_1_0_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_0_1_0_2_0 = (Keyword)cGroup_2_1_0_1_0_2.eContents().get(0);
		private final Assignment cPredPattParamsAssignment_2_1_0_1_0_2_1 = (Assignment)cGroup_2_1_0_1_0_2.eContents().get(1);
		private final RuleCall cPredPattParamsTemporalInExprParserRuleCall_2_1_0_1_0_2_1_0 = (RuleCall)cPredPattParamsAssignment_2_1_0_1_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_0_1_0_3 = (Keyword)cGroup_2_1_0_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1_0_1_1 = (Keyword)cAlternatives_2_1_0_1.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final Alternatives cOperatorAlternatives_2_1_1_0_0 = (Alternatives)cOperatorAssignment_2_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_2_1_1_0_0_0 = (Keyword)cOperatorAlternatives_2_1_1_0_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkKeyword_2_1_1_0_0_1 = (Keyword)cOperatorAlternatives_2_1_1_0_0.eContents().get(1);
		private final Assignment cTpeAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cTpeTemporalPrimaryExprParserRuleCall_2_1_1_1_0 = (RuleCall)cTpeAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Assignment cPointerAssignment_2_1_2_0 = (Assignment)cGroup_2_1_2.eContents().get(0);
		private final CrossReference cPointerReferrableCrossReference_2_1_2_0_0 = (CrossReference)cPointerAssignment_2_1_2_0.eContents().get(0);
		private final RuleCall cPointerReferrableIDTerminalRuleCall_2_1_2_0_0_1 = (RuleCall)cPointerReferrableCrossReference_2_1_2_0_0.eContents().get(1);
		private final Group cGroup_2_1_2_1 = (Group)cGroup_2_1_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_2_1_0 = (Keyword)cGroup_2_1_2_1.eContents().get(0);
		private final Assignment cIndexAssignment_2_1_2_1_1 = (Assignment)cGroup_2_1_2_1.eContents().get(1);
		private final RuleCall cIndexTemporalInExprParserRuleCall_2_1_2_1_1_0 = (RuleCall)cIndexAssignment_2_1_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2_1_2 = (Keyword)cGroup_2_1_2_1.eContents().get(2);
		private final Group cGroup_2_1_3 = (Group)cAlternatives_2_1.eContents().get(3);
		private final Assignment cOperatorAssignment_2_1_3_0 = (Assignment)cGroup_2_1_3.eContents().get(0);
		private final Keyword cOperatorNextKeyword_2_1_3_0_0 = (Keyword)cOperatorAssignment_2_1_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_3_1 = (Keyword)cGroup_2_1_3.eContents().get(1);
		private final Assignment cTemporalExpressionAssignment_2_1_3_2 = (Assignment)cGroup_2_1_3.eContents().get(2);
		private final RuleCall cTemporalExpressionTemporalInExprParserRuleCall_2_1_3_2_0 = (RuleCall)cTemporalExpressionAssignment_2_1_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3_3 = (Keyword)cGroup_2_1_3.eContents().get(3);
		private final Group cGroup_2_1_4 = (Group)cAlternatives_2_1.eContents().get(4);
		private final Assignment cOperatorAssignment_2_1_4_0 = (Assignment)cGroup_2_1_4.eContents().get(0);
		private final Keyword cOperatorRegexpKeyword_2_1_4_0_0 = (Keyword)cOperatorAssignment_2_1_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_4_1 = (Keyword)cGroup_2_1_4.eContents().get(1);
		private final Alternatives cAlternatives_2_1_4_2 = (Alternatives)cGroup_2_1_4.eContents().get(2);
		private final Assignment cRegexpAssignment_2_1_4_2_0 = (Assignment)cAlternatives_2_1_4_2.eContents().get(0);
		private final RuleCall cRegexpRegExpParserRuleCall_2_1_4_2_0_0 = (RuleCall)cRegexpAssignment_2_1_4_2_0.eContents().get(0);
		private final Assignment cRegexpPointerAssignment_2_1_4_2_1 = (Assignment)cAlternatives_2_1_4_2.eContents().get(1);
		private final CrossReference cRegexpPointerDefineRegExpDeclCrossReference_2_1_4_2_1_0 = (CrossReference)cRegexpPointerAssignment_2_1_4_2_1.eContents().get(0);
		private final RuleCall cRegexpPointerDefineRegExpDeclIDTerminalRuleCall_2_1_4_2_1_0_1 = (RuleCall)cRegexpPointerDefineRegExpDeclCrossReference_2_1_4_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_4_3 = (Keyword)cGroup_2_1_4.eContents().get(3);
		private final Group cGroup_2_1_5 = (Group)cAlternatives_2_1.eContents().get(5);
		private final Assignment cPointerAssignment_2_1_5_0 = (Assignment)cGroup_2_1_5.eContents().get(0);
		private final CrossReference cPointerReferrableCrossReference_2_1_5_0_0 = (CrossReference)cPointerAssignment_2_1_5_0.eContents().get(0);
		private final RuleCall cPointerReferrableIDTerminalRuleCall_2_1_5_0_0_1 = (RuleCall)cPointerReferrableCrossReference_2_1_5_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_5_1 = (Assignment)cGroup_2_1_5.eContents().get(1);
		private final Keyword cOperatorAllKeyword_2_1_5_1_0 = (Keyword)cOperatorAssignment_2_1_5_1.eContents().get(0);
		private final Group cGroup_2_1_6 = (Group)cAlternatives_2_1.eContents().get(6);
		private final Assignment cPointerAssignment_2_1_6_0 = (Assignment)cGroup_2_1_6.eContents().get(0);
		private final CrossReference cPointerReferrableCrossReference_2_1_6_0_0 = (CrossReference)cPointerAssignment_2_1_6_0.eContents().get(0);
		private final RuleCall cPointerReferrableIDTerminalRuleCall_2_1_6_0_0_1 = (RuleCall)cPointerReferrableCrossReference_2_1_6_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_6_1 = (Assignment)cGroup_2_1_6.eContents().get(1);
		private final Keyword cOperatorAnyKeyword_2_1_6_1_0 = (Keyword)cOperatorAssignment_2_1_6_1.eContents().get(0);
		private final Group cGroup_2_1_7 = (Group)cAlternatives_2_1.eContents().get(7);
		private final Assignment cPointerAssignment_2_1_7_0 = (Assignment)cGroup_2_1_7.eContents().get(0);
		private final CrossReference cPointerReferrableCrossReference_2_1_7_0_0 = (CrossReference)cPointerAssignment_2_1_7_0.eContents().get(0);
		private final RuleCall cPointerReferrableIDTerminalRuleCall_2_1_7_0_0_1 = (RuleCall)cPointerReferrableCrossReference_2_1_7_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_7_1 = (Assignment)cGroup_2_1_7.eContents().get(1);
		private final Keyword cOperatorProdKeyword_2_1_7_1_0 = (Keyword)cOperatorAssignment_2_1_7_1.eContents().get(0);
		private final Group cGroup_2_1_8 = (Group)cAlternatives_2_1.eContents().get(8);
		private final Assignment cPointerAssignment_2_1_8_0 = (Assignment)cGroup_2_1_8.eContents().get(0);
		private final CrossReference cPointerReferrableCrossReference_2_1_8_0_0 = (CrossReference)cPointerAssignment_2_1_8_0.eContents().get(0);
		private final RuleCall cPointerReferrableIDTerminalRuleCall_2_1_8_0_0_1 = (RuleCall)cPointerReferrableCrossReference_2_1_8_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_8_1 = (Assignment)cGroup_2_1_8.eContents().get(1);
		private final Keyword cOperatorSumKeyword_2_1_8_1_0 = (Keyword)cOperatorAssignment_2_1_8_1.eContents().get(0);
		private final Group cGroup_2_1_9 = (Group)cAlternatives_2_1.eContents().get(9);
		private final Assignment cPointerAssignment_2_1_9_0 = (Assignment)cGroup_2_1_9.eContents().get(0);
		private final CrossReference cPointerReferrableCrossReference_2_1_9_0_0 = (CrossReference)cPointerAssignment_2_1_9_0.eContents().get(0);
		private final RuleCall cPointerReferrableIDTerminalRuleCall_2_1_9_0_0_1 = (RuleCall)cPointerReferrableCrossReference_2_1_9_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_9_1 = (Assignment)cGroup_2_1_9.eContents().get(1);
		private final Keyword cOperatorMinKeyword_2_1_9_1_0 = (Keyword)cOperatorAssignment_2_1_9_1.eContents().get(0);
		private final Group cGroup_2_1_10 = (Group)cAlternatives_2_1.eContents().get(10);
		private final Assignment cPointerAssignment_2_1_10_0 = (Assignment)cGroup_2_1_10.eContents().get(0);
		private final CrossReference cPointerReferrableCrossReference_2_1_10_0_0 = (CrossReference)cPointerAssignment_2_1_10_0.eContents().get(0);
		private final RuleCall cPointerReferrableIDTerminalRuleCall_2_1_10_0_0_1 = (RuleCall)cPointerReferrableCrossReference_2_1_10_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_10_1 = (Assignment)cGroup_2_1_10.eContents().get(1);
		private final Keyword cOperatorMaxKeyword_2_1_10_1_0 = (Keyword)cOperatorAssignment_2_1_10_1.eContents().get(0);
		
		//TemporalPrimaryExpr returns TemporalExpression:
		//    Constant
		//    | '(' QuantifierExpr ')'
		//    | {TemporalPrimaryExpr}
		//     (predPatt=[PredicateOrPatternReferrable] ('(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')' | '()')
		//     | operator=('-'|'!') tpe=TemporalPrimaryExpr
		//     | pointer=[Referrable]('[' index+=TemporalInExpr ']')*
		//     | operator='next' '(' temporalExpression=TemporalInExpr ')'
		//     | operator='regexp' '(' (regexp=RegExp | regexpPointer=[DefineRegExpDecl]) ')'
		//     | pointer=[Referrable] operator='.all'
		//     | pointer=[Referrable] operator='.any'
		//     | pointer=[Referrable] operator='.prod'
		//     | pointer=[Referrable] operator='.sum'
		//     | pointer=[Referrable] operator='.min'
		//     | pointer=[Referrable] operator='.max');
		@Override public ParserRule getRule() { return rule; }
		
		//Constant
		//| '(' QuantifierExpr ')'
		//| {TemporalPrimaryExpr}
		// (predPatt=[PredicateOrPatternReferrable] ('(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')' | '()')
		// | operator=('-'|'!') tpe=TemporalPrimaryExpr
		// | pointer=[Referrable]('[' index+=TemporalInExpr ']')*
		// | operator='next' '(' temporalExpression=TemporalInExpr ')'
		// | operator='regexp' '(' (regexp=RegExp | regexpPointer=[DefineRegExpDecl]) ')'
		// | pointer=[Referrable] operator='.all'
		// | pointer=[Referrable] operator='.any'
		// | pointer=[Referrable] operator='.prod'
		// | pointer=[Referrable] operator='.sum'
		// | pointer=[Referrable] operator='.min'
		// | pointer=[Referrable] operator='.max')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//'(' QuantifierExpr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//QuantifierExpr
		public RuleCall getQuantifierExprParserRuleCall_1_1() { return cQuantifierExprParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//{TemporalPrimaryExpr}
		//    (predPatt=[PredicateOrPatternReferrable] ('(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')' | '()')
		//    | operator=('-'|'!') tpe=TemporalPrimaryExpr
		//    | pointer=[Referrable]('[' index+=TemporalInExpr ']')*
		//    | operator='next' '(' temporalExpression=TemporalInExpr ')'
		//    | operator='regexp' '(' (regexp=RegExp | regexpPointer=[DefineRegExpDecl]) ')'
		//    | pointer=[Referrable] operator='.all'
		//    | pointer=[Referrable] operator='.any'
		//    | pointer=[Referrable] operator='.prod'
		//    | pointer=[Referrable] operator='.sum'
		//    | pointer=[Referrable] operator='.min'
		//    | pointer=[Referrable] operator='.max')
		public Group getGroup_2() { return cGroup_2; }
		
		//{TemporalPrimaryExpr}
		public Action getTemporalPrimaryExprAction_2_0() { return cTemporalPrimaryExprAction_2_0; }
		
		//(predPatt=[PredicateOrPatternReferrable] ('(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')' | '()')
		//| operator=('-'|'!') tpe=TemporalPrimaryExpr
		//| pointer=[Referrable]('[' index+=TemporalInExpr ']')*
		//| operator='next' '(' temporalExpression=TemporalInExpr ')'
		//| operator='regexp' '(' (regexp=RegExp | regexpPointer=[DefineRegExpDecl]) ')'
		//| pointer=[Referrable] operator='.all'
		//| pointer=[Referrable] operator='.any'
		//| pointer=[Referrable] operator='.prod'
		//| pointer=[Referrable] operator='.sum'
		//| pointer=[Referrable] operator='.min'
		//| pointer=[Referrable] operator='.max')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//predPatt=[PredicateOrPatternReferrable] ('(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')' | '()')
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//predPatt=[PredicateOrPatternReferrable]
		public Assignment getPredPattAssignment_2_1_0_0() { return cPredPattAssignment_2_1_0_0; }
		
		//[PredicateOrPatternReferrable]
		public CrossReference getPredPattPredicateOrPatternReferrableCrossReference_2_1_0_0_0() { return cPredPattPredicateOrPatternReferrableCrossReference_2_1_0_0_0; }
		
		//ID
		public RuleCall getPredPattPredicateOrPatternReferrableIDTerminalRuleCall_2_1_0_0_0_1() { return cPredPattPredicateOrPatternReferrableIDTerminalRuleCall_2_1_0_0_0_1; }
		
		//('(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')' | '()')
		public Alternatives getAlternatives_2_1_0_1() { return cAlternatives_2_1_0_1; }
		
		//'(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')'
		public Group getGroup_2_1_0_1_0() { return cGroup_2_1_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0_1_0_0() { return cLeftParenthesisKeyword_2_1_0_1_0_0; }
		
		//predPattParams+=TemporalInExpr
		public Assignment getPredPattParamsAssignment_2_1_0_1_0_1() { return cPredPattParamsAssignment_2_1_0_1_0_1; }
		
		//TemporalInExpr
		public RuleCall getPredPattParamsTemporalInExprParserRuleCall_2_1_0_1_0_1_0() { return cPredPattParamsTemporalInExprParserRuleCall_2_1_0_1_0_1_0; }
		
		//(',' predPattParams+=TemporalInExpr)*
		public Group getGroup_2_1_0_1_0_2() { return cGroup_2_1_0_1_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_0_1_0_2_0() { return cCommaKeyword_2_1_0_1_0_2_0; }
		
		//predPattParams+=TemporalInExpr
		public Assignment getPredPattParamsAssignment_2_1_0_1_0_2_1() { return cPredPattParamsAssignment_2_1_0_1_0_2_1; }
		
		//TemporalInExpr
		public RuleCall getPredPattParamsTemporalInExprParserRuleCall_2_1_0_1_0_2_1_0() { return cPredPattParamsTemporalInExprParserRuleCall_2_1_0_1_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_0_1_0_3() { return cRightParenthesisKeyword_2_1_0_1_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1_0_1_1() { return cLeftParenthesisRightParenthesisKeyword_2_1_0_1_1; }
		
		//operator=('-'|'!') tpe=TemporalPrimaryExpr
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//operator=('-'|'!')
		public Assignment getOperatorAssignment_2_1_1_0() { return cOperatorAssignment_2_1_1_0; }
		
		//('-'|'!')
		public Alternatives getOperatorAlternatives_2_1_1_0_0() { return cOperatorAlternatives_2_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_2_1_1_0_0_0() { return cOperatorHyphenMinusKeyword_2_1_1_0_0_0; }
		
		//'!'
		public Keyword getOperatorExclamationMarkKeyword_2_1_1_0_0_1() { return cOperatorExclamationMarkKeyword_2_1_1_0_0_1; }
		
		//tpe=TemporalPrimaryExpr
		public Assignment getTpeAssignment_2_1_1_1() { return cTpeAssignment_2_1_1_1; }
		
		//TemporalPrimaryExpr
		public RuleCall getTpeTemporalPrimaryExprParserRuleCall_2_1_1_1_0() { return cTpeTemporalPrimaryExprParserRuleCall_2_1_1_1_0; }
		
		//pointer=[Referrable]('[' index+=TemporalInExpr ']')*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//pointer=[Referrable]
		public Assignment getPointerAssignment_2_1_2_0() { return cPointerAssignment_2_1_2_0; }
		
		//[Referrable]
		public CrossReference getPointerReferrableCrossReference_2_1_2_0_0() { return cPointerReferrableCrossReference_2_1_2_0_0; }
		
		//ID
		public RuleCall getPointerReferrableIDTerminalRuleCall_2_1_2_0_0_1() { return cPointerReferrableIDTerminalRuleCall_2_1_2_0_0_1; }
		
		//('[' index+=TemporalInExpr ']')*
		public Group getGroup_2_1_2_1() { return cGroup_2_1_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_2_1_0() { return cLeftSquareBracketKeyword_2_1_2_1_0; }
		
		//index+=TemporalInExpr
		public Assignment getIndexAssignment_2_1_2_1_1() { return cIndexAssignment_2_1_2_1_1; }
		
		//TemporalInExpr
		public RuleCall getIndexTemporalInExprParserRuleCall_2_1_2_1_1_0() { return cIndexTemporalInExprParserRuleCall_2_1_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_2_1_2() { return cRightSquareBracketKeyword_2_1_2_1_2; }
		
		//operator='next' '(' temporalExpression=TemporalInExpr ')'
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }
		
		//operator='next'
		public Assignment getOperatorAssignment_2_1_3_0() { return cOperatorAssignment_2_1_3_0; }
		
		//'next'
		public Keyword getOperatorNextKeyword_2_1_3_0_0() { return cOperatorNextKeyword_2_1_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_3_1() { return cLeftParenthesisKeyword_2_1_3_1; }
		
		//temporalExpression=TemporalInExpr
		public Assignment getTemporalExpressionAssignment_2_1_3_2() { return cTemporalExpressionAssignment_2_1_3_2; }
		
		//TemporalInExpr
		public RuleCall getTemporalExpressionTemporalInExprParserRuleCall_2_1_3_2_0() { return cTemporalExpressionTemporalInExprParserRuleCall_2_1_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3_3() { return cRightParenthesisKeyword_2_1_3_3; }
		
		//operator='regexp' '(' (regexp=RegExp | regexpPointer=[DefineRegExpDecl]) ')'
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }
		
		//operator='regexp'
		public Assignment getOperatorAssignment_2_1_4_0() { return cOperatorAssignment_2_1_4_0; }
		
		//'regexp'
		public Keyword getOperatorRegexpKeyword_2_1_4_0_0() { return cOperatorRegexpKeyword_2_1_4_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_4_1() { return cLeftParenthesisKeyword_2_1_4_1; }
		
		//(regexp=RegExp | regexpPointer=[DefineRegExpDecl])
		public Alternatives getAlternatives_2_1_4_2() { return cAlternatives_2_1_4_2; }
		
		//regexp=RegExp
		public Assignment getRegexpAssignment_2_1_4_2_0() { return cRegexpAssignment_2_1_4_2_0; }
		
		//RegExp
		public RuleCall getRegexpRegExpParserRuleCall_2_1_4_2_0_0() { return cRegexpRegExpParserRuleCall_2_1_4_2_0_0; }
		
		//regexpPointer=[DefineRegExpDecl]
		public Assignment getRegexpPointerAssignment_2_1_4_2_1() { return cRegexpPointerAssignment_2_1_4_2_1; }
		
		//[DefineRegExpDecl]
		public CrossReference getRegexpPointerDefineRegExpDeclCrossReference_2_1_4_2_1_0() { return cRegexpPointerDefineRegExpDeclCrossReference_2_1_4_2_1_0; }
		
		//ID
		public RuleCall getRegexpPointerDefineRegExpDeclIDTerminalRuleCall_2_1_4_2_1_0_1() { return cRegexpPointerDefineRegExpDeclIDTerminalRuleCall_2_1_4_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_4_3() { return cRightParenthesisKeyword_2_1_4_3; }
		
		//pointer=[Referrable] operator='.all'
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }
		
		//pointer=[Referrable]
		public Assignment getPointerAssignment_2_1_5_0() { return cPointerAssignment_2_1_5_0; }
		
		//[Referrable]
		public CrossReference getPointerReferrableCrossReference_2_1_5_0_0() { return cPointerReferrableCrossReference_2_1_5_0_0; }
		
		//ID
		public RuleCall getPointerReferrableIDTerminalRuleCall_2_1_5_0_0_1() { return cPointerReferrableIDTerminalRuleCall_2_1_5_0_0_1; }
		
		//operator='.all'
		public Assignment getOperatorAssignment_2_1_5_1() { return cOperatorAssignment_2_1_5_1; }
		
		//'.all'
		public Keyword getOperatorAllKeyword_2_1_5_1_0() { return cOperatorAllKeyword_2_1_5_1_0; }
		
		//pointer=[Referrable] operator='.any'
		public Group getGroup_2_1_6() { return cGroup_2_1_6; }
		
		//pointer=[Referrable]
		public Assignment getPointerAssignment_2_1_6_0() { return cPointerAssignment_2_1_6_0; }
		
		//[Referrable]
		public CrossReference getPointerReferrableCrossReference_2_1_6_0_0() { return cPointerReferrableCrossReference_2_1_6_0_0; }
		
		//ID
		public RuleCall getPointerReferrableIDTerminalRuleCall_2_1_6_0_0_1() { return cPointerReferrableIDTerminalRuleCall_2_1_6_0_0_1; }
		
		//operator='.any'
		public Assignment getOperatorAssignment_2_1_6_1() { return cOperatorAssignment_2_1_6_1; }
		
		//'.any'
		public Keyword getOperatorAnyKeyword_2_1_6_1_0() { return cOperatorAnyKeyword_2_1_6_1_0; }
		
		//pointer=[Referrable] operator='.prod'
		public Group getGroup_2_1_7() { return cGroup_2_1_7; }
		
		//pointer=[Referrable]
		public Assignment getPointerAssignment_2_1_7_0() { return cPointerAssignment_2_1_7_0; }
		
		//[Referrable]
		public CrossReference getPointerReferrableCrossReference_2_1_7_0_0() { return cPointerReferrableCrossReference_2_1_7_0_0; }
		
		//ID
		public RuleCall getPointerReferrableIDTerminalRuleCall_2_1_7_0_0_1() { return cPointerReferrableIDTerminalRuleCall_2_1_7_0_0_1; }
		
		//operator='.prod'
		public Assignment getOperatorAssignment_2_1_7_1() { return cOperatorAssignment_2_1_7_1; }
		
		//'.prod'
		public Keyword getOperatorProdKeyword_2_1_7_1_0() { return cOperatorProdKeyword_2_1_7_1_0; }
		
		//pointer=[Referrable] operator='.sum'
		public Group getGroup_2_1_8() { return cGroup_2_1_8; }
		
		//pointer=[Referrable]
		public Assignment getPointerAssignment_2_1_8_0() { return cPointerAssignment_2_1_8_0; }
		
		//[Referrable]
		public CrossReference getPointerReferrableCrossReference_2_1_8_0_0() { return cPointerReferrableCrossReference_2_1_8_0_0; }
		
		//ID
		public RuleCall getPointerReferrableIDTerminalRuleCall_2_1_8_0_0_1() { return cPointerReferrableIDTerminalRuleCall_2_1_8_0_0_1; }
		
		//operator='.sum'
		public Assignment getOperatorAssignment_2_1_8_1() { return cOperatorAssignment_2_1_8_1; }
		
		//'.sum'
		public Keyword getOperatorSumKeyword_2_1_8_1_0() { return cOperatorSumKeyword_2_1_8_1_0; }
		
		//pointer=[Referrable] operator='.min'
		public Group getGroup_2_1_9() { return cGroup_2_1_9; }
		
		//pointer=[Referrable]
		public Assignment getPointerAssignment_2_1_9_0() { return cPointerAssignment_2_1_9_0; }
		
		//[Referrable]
		public CrossReference getPointerReferrableCrossReference_2_1_9_0_0() { return cPointerReferrableCrossReference_2_1_9_0_0; }
		
		//ID
		public RuleCall getPointerReferrableIDTerminalRuleCall_2_1_9_0_0_1() { return cPointerReferrableIDTerminalRuleCall_2_1_9_0_0_1; }
		
		//operator='.min'
		public Assignment getOperatorAssignment_2_1_9_1() { return cOperatorAssignment_2_1_9_1; }
		
		//'.min'
		public Keyword getOperatorMinKeyword_2_1_9_1_0() { return cOperatorMinKeyword_2_1_9_1_0; }
		
		//pointer=[Referrable] operator='.max'
		public Group getGroup_2_1_10() { return cGroup_2_1_10; }
		
		//pointer=[Referrable]
		public Assignment getPointerAssignment_2_1_10_0() { return cPointerAssignment_2_1_10_0; }
		
		//[Referrable]
		public CrossReference getPointerReferrableCrossReference_2_1_10_0_0() { return cPointerReferrableCrossReference_2_1_10_0_0; }
		
		//ID
		public RuleCall getPointerReferrableIDTerminalRuleCall_2_1_10_0_0_1() { return cPointerReferrableIDTerminalRuleCall_2_1_10_0_0_1; }
		
		//operator='.max'
		public Assignment getOperatorAssignment_2_1_10_1() { return cOperatorAssignment_2_1_10_1; }
		
		//'.max'
		public Keyword getOperatorMaxKeyword_2_1_10_1_0() { return cOperatorMaxKeyword_2_1_10_1_0; }
	}
	public class PredicateOrPatternReferrableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.PredicateOrPatternReferrable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//    // |Trigger;
		//PredicateOrPatternReferrable:
		//  Pattern | Predicate;
		@Override public ParserRule getRule() { return rule; }
		
		//Pattern | Predicate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Pattern
		public RuleCall getPatternParserRuleCall_0() { return cPatternParserRuleCall_0; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall_1() { return cPredicateParserRuleCall_1; }
	}
	public class SubrangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Subrange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromSizeDefineDeclParserRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToSizeDefineDeclParserRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		////now subrange can be defined with define declaration
		//Subrange:
		//    from=SizeDefineDecl '..' to=SizeDefineDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//from=SizeDefineDecl '..' to=SizeDefineDecl
		public Group getGroup() { return cGroup; }
		
		//from=SizeDefineDecl
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//SizeDefineDecl
		public RuleCall getFromSizeDefineDeclParserRuleCall_0_0() { return cFromSizeDefineDeclParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//to=SizeDefineDecl
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//SizeDefineDecl
		public RuleCall getToSizeDefineDeclParserRuleCall_2_0() { return cToSizeDefineDeclParserRuleCall_2_0; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBooleanValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cBooleanValueFALSEKeyword_1_0_0 = (Keyword)cBooleanValueAssignment_1_0.eContents().get(0);
		private final Assignment cBooleanValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cBooleanValueFalseKeyword_1_1_0 = (Keyword)cBooleanValueAssignment_1_1.eContents().get(0);
		private final Assignment cBooleanValueAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cBooleanValueTRUEKeyword_1_2_0 = (Keyword)cBooleanValueAssignment_1_2.eContents().get(0);
		private final Assignment cBooleanValueAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cBooleanValueTrueKeyword_1_3_0 = (Keyword)cBooleanValueAssignment_1_3.eContents().get(0);
		private final Assignment cIntegerValueAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cIntegerValueINTTerminalRuleCall_1_4_0 = (RuleCall)cIntegerValueAssignment_1_4.eContents().get(0);
		
		//Constant returns TemporalExpression:
		//    {Constant}
		//      (booleanValue='FALSE'
		//      | booleanValue='false'
		//      | booleanValue='TRUE'
		//      | booleanValue='true'
		//      | integerValue=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant}
		//  (booleanValue='FALSE'
		//  | booleanValue='false'
		//  | booleanValue='TRUE'
		//  | booleanValue='true'
		//  | integerValue=INT)
		public Group getGroup() { return cGroup; }
		
		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//(booleanValue='FALSE'
		//| booleanValue='false'
		//| booleanValue='TRUE'
		//| booleanValue='true'
		//| integerValue=INT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//booleanValue='FALSE'
		public Assignment getBooleanValueAssignment_1_0() { return cBooleanValueAssignment_1_0; }
		
		//'FALSE'
		public Keyword getBooleanValueFALSEKeyword_1_0_0() { return cBooleanValueFALSEKeyword_1_0_0; }
		
		//booleanValue='false'
		public Assignment getBooleanValueAssignment_1_1() { return cBooleanValueAssignment_1_1; }
		
		//'false'
		public Keyword getBooleanValueFalseKeyword_1_1_0() { return cBooleanValueFalseKeyword_1_1_0; }
		
		//booleanValue='TRUE'
		public Assignment getBooleanValueAssignment_1_2() { return cBooleanValueAssignment_1_2; }
		
		//'TRUE'
		public Keyword getBooleanValueTRUEKeyword_1_2_0() { return cBooleanValueTRUEKeyword_1_2_0; }
		
		//booleanValue='true'
		public Assignment getBooleanValueAssignment_1_3() { return cBooleanValueAssignment_1_3; }
		
		//'true'
		public Keyword getBooleanValueTrueKeyword_1_3_0() { return cBooleanValueTrueKeyword_1_3_0; }
		
		//integerValue=INT
		public Assignment getIntegerValueAssignment_1_4() { return cIntegerValueAssignment_1_4; }
		
		//INT
		public RuleCall getIntegerValueINTTerminalRuleCall_1_4_0() { return cIntegerValueINTTerminalRuleCall_1_4_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInitPointerAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cInitPointerDefineRegExpDeclCrossReference_2_0_0 = (CrossReference)cInitPointerAssignment_2_0.eContents().get(0);
		private final RuleCall cInitPointerDefineRegExpDeclIDTerminalRuleCall_2_0_0_1 = (RuleCall)cInitPointerDefineRegExpDeclCrossReference_2_0_0.eContents().get(1);
		private final Assignment cInitRegExpAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInitRegExpRegExpParserRuleCall_2_1_0 = (RuleCall)cInitRegExpAssignment_2_1.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cEffectPointerAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cEffectPointerDefineRegExpDeclCrossReference_4_0_0 = (CrossReference)cEffectPointerAssignment_4_0.eContents().get(0);
		private final RuleCall cEffectPointerDefineRegExpDeclIDTerminalRuleCall_4_0_0_1 = (RuleCall)cEffectPointerDefineRegExpDeclCrossReference_4_0_0.eContents().get(1);
		private final Assignment cEffectRegExpAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEffectRegExpRegExpParserRuleCall_4_1_0 = (RuleCall)cEffectRegExpAssignment_4_1.eContents().get(0);
		
		//Trigger:
		//{Trigger} 'trig'  (initPointer=[DefineRegExpDecl] | initRegExp=RegExp ) '|=>' (effectPointer=[DefineRegExpDecl] | effectRegExp=RegExp);
		@Override public ParserRule getRule() { return rule; }
		
		//{Trigger} 'trig'  (initPointer=[DefineRegExpDecl] | initRegExp=RegExp ) '|=>' (effectPointer=[DefineRegExpDecl] | effectRegExp=RegExp)
		public Group getGroup() { return cGroup; }
		
		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }
		
		//'trig'
		public Keyword getTrigKeyword_1() { return cTrigKeyword_1; }
		
		//(initPointer=[DefineRegExpDecl] | initRegExp=RegExp )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//initPointer=[DefineRegExpDecl]
		public Assignment getInitPointerAssignment_2_0() { return cInitPointerAssignment_2_0; }
		
		//[DefineRegExpDecl]
		public CrossReference getInitPointerDefineRegExpDeclCrossReference_2_0_0() { return cInitPointerDefineRegExpDeclCrossReference_2_0_0; }
		
		//ID
		public RuleCall getInitPointerDefineRegExpDeclIDTerminalRuleCall_2_0_0_1() { return cInitPointerDefineRegExpDeclIDTerminalRuleCall_2_0_0_1; }
		
		//initRegExp=RegExp
		public Assignment getInitRegExpAssignment_2_1() { return cInitRegExpAssignment_2_1; }
		
		//RegExp
		public RuleCall getInitRegExpRegExpParserRuleCall_2_1_0() { return cInitRegExpRegExpParserRuleCall_2_1_0; }
		
		//'|=>'
		public Keyword getVerticalLineEqualsSignGreaterThanSignKeyword_3() { return cVerticalLineEqualsSignGreaterThanSignKeyword_3; }
		
		//(effectPointer=[DefineRegExpDecl] | effectRegExp=RegExp)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//effectPointer=[DefineRegExpDecl]
		public Assignment getEffectPointerAssignment_4_0() { return cEffectPointerAssignment_4_0; }
		
		//[DefineRegExpDecl]
		public CrossReference getEffectPointerDefineRegExpDeclCrossReference_4_0_0() { return cEffectPointerDefineRegExpDeclCrossReference_4_0_0; }
		
		//ID
		public RuleCall getEffectPointerDefineRegExpDeclIDTerminalRuleCall_4_0_0_1() { return cEffectPointerDefineRegExpDeclIDTerminalRuleCall_4_0_0_1; }
		
		//effectRegExp=RegExp
		public Assignment getEffectRegExpAssignment_4_1() { return cEffectRegExpAssignment_4_1; }
		
		//RegExp
		public RuleCall getEffectRegExpRegExpParserRuleCall_4_1_0() { return cEffectRegExpRegExpParserRuleCall_4_1_0; }
	}
	public class RegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.RegExp");
		private final RuleCall cBinaryRegExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RegExp:
		//     BinaryRegExp;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryRegExp
		public RuleCall getBinaryRegExpParserRuleCall() { return cBinaryRegExpParserRuleCall; }
	}
	public class BinaryRegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.BinaryRegExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryRegExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryRegExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAmpersandKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpVerticalLineKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryRegExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryRegExp returns RegExp:
		//    UnaryRegExp ({BinaryRegExp.left=current} (op=('&' | '|'))? right=UnaryRegExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryRegExp ({BinaryRegExp.left=current} (op=('&' | '|'))? right=UnaryRegExp)*
		public Group getGroup() { return cGroup; }
		
		//UnaryRegExp
		public RuleCall getUnaryRegExpParserRuleCall_0() { return cUnaryRegExpParserRuleCall_0; }
		
		//({BinaryRegExp.left=current} (op=('&' | '|'))? right=UnaryRegExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryRegExp.left=current}
		public Action getBinaryRegExpLeftAction_1_0() { return cBinaryRegExpLeftAction_1_0; }
		
		//(op=('&' | '|'))?
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('&' | '|')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0_0() { return cOpAmpersandKeyword_1_1_0_0; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0_1() { return cOpVerticalLineKeyword_1_1_0_1; }
		
		//right=UnaryRegExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryRegExp
		public RuleCall getRightUnaryRegExpParserRuleCall_1_2_0() { return cRightUnaryRegExpParserRuleCall_1_2_0; }
	}
	public class UnaryRegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.UnaryRegExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompRegExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUnaryRegExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cKleenedAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cKleenedAsteriskKeyword_1_1_0_0 = (Keyword)cKleenedAssignment_1_1_0.eContents().get(0);
		private final Assignment cQuestionMarkAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cQuestionMarkQuestionMarkKeyword_1_1_1_0 = (Keyword)cQuestionMarkAssignment_1_1_1.eContents().get(0);
		private final Assignment cPlusAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cPlusPlusSignKeyword_1_1_2_0 = (Keyword)cPlusAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cAlternatives_1_1.eContents().get(3);
		private final Assignment cHaveExactRepetitionAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cHaveExactRepetitionLeftCurlyBracketKeyword_1_1_3_0_0 = (Keyword)cHaveExactRepetitionAssignment_1_1_3_0.eContents().get(0);
		private final Assignment cExactRepetitionAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cExactRepetitionINTTerminalRuleCall_1_1_3_1_0 = (RuleCall)cExactRepetitionAssignment_1_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		private final Group cGroup_1_1_4 = (Group)cAlternatives_1_1.eContents().get(4);
		private final Assignment cHaveAtLeastAssignment_1_1_4_0 = (Assignment)cGroup_1_1_4.eContents().get(0);
		private final Keyword cHaveAtLeastLeftCurlyBracketKeyword_1_1_4_0_0 = (Keyword)cHaveAtLeastAssignment_1_1_4_0.eContents().get(0);
		private final Assignment cAtLeastAssignment_1_1_4_1 = (Assignment)cGroup_1_1_4.eContents().get(1);
		private final RuleCall cAtLeastINTTerminalRuleCall_1_1_4_1_0 = (RuleCall)cAtLeastAssignment_1_1_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_4_2 = (Keyword)cGroup_1_1_4.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_1_4_3 = (Keyword)cGroup_1_1_4.eContents().get(3);
		private final Group cGroup_1_1_5 = (Group)cAlternatives_1_1.eContents().get(5);
		private final Assignment cHaveRangeAssignment_1_1_5_0 = (Assignment)cGroup_1_1_5.eContents().get(0);
		private final Keyword cHaveRangeLeftCurlyBracketKeyword_1_1_5_0_0 = (Keyword)cHaveRangeAssignment_1_1_5_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_5_1 = (Alternatives)cGroup_1_1_5.eContents().get(1);
		private final Assignment cFromAssignment_1_1_5_1_0 = (Assignment)cAlternatives_1_1_5_1.eContents().get(0);
		private final RuleCall cFromINTTerminalRuleCall_1_1_5_1_0_0 = (RuleCall)cFromAssignment_1_1_5_1_0.eContents().get(0);
		private final Assignment cFromDefineAssignment_1_1_5_1_1 = (Assignment)cAlternatives_1_1_5_1.eContents().get(1);
		private final CrossReference cFromDefineDefineDeclCrossReference_1_1_5_1_1_0 = (CrossReference)cFromDefineAssignment_1_1_5_1_1.eContents().get(0);
		private final RuleCall cFromDefineDefineDeclIDTerminalRuleCall_1_1_5_1_1_0_1 = (RuleCall)cFromDefineDefineDeclCrossReference_1_1_5_1_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_5_2 = (Keyword)cGroup_1_1_5.eContents().get(2);
		private final Alternatives cAlternatives_1_1_5_3 = (Alternatives)cGroup_1_1_5.eContents().get(3);
		private final Assignment cToAssignment_1_1_5_3_0 = (Assignment)cAlternatives_1_1_5_3.eContents().get(0);
		private final RuleCall cToINTTerminalRuleCall_1_1_5_3_0_0 = (RuleCall)cToAssignment_1_1_5_3_0.eContents().get(0);
		private final Assignment cToDefineAssignment_1_1_5_3_1 = (Assignment)cAlternatives_1_1_5_3.eContents().get(1);
		private final CrossReference cToDefineDefineDeclCrossReference_1_1_5_3_1_0 = (CrossReference)cToDefineAssignment_1_1_5_3_1.eContents().get(0);
		private final RuleCall cToDefineDefineDeclIDTerminalRuleCall_1_1_5_3_1_0_1 = (RuleCall)cToDefineDefineDeclCrossReference_1_1_5_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_5_4 = (Keyword)cGroup_1_1_5.eContents().get(4);
		
		//UnaryRegExp returns RegExp:
		//    CompRegExp ({UnaryRegExp.left=current}
		//       ((kleened?='*')|
		//        (questionMark?='?')|
		//        (plus?='+')|
		//       (haveExactRepetition?='{' exactRepetition=INT '}')|
		//       (haveAtLeast?='{' atLeast=INT ',' '}')|
		//       (haveRange?='{' (from=INT | fromDefine=[DefineDecl]) ',' (to=INT | toDefine=[DefineDecl]) '}')))?;
		@Override public ParserRule getRule() { return rule; }
		
		//CompRegExp ({UnaryRegExp.left=current}
		//   ((kleened?='*')|
		//    (questionMark?='?')|
		//    (plus?='+')|
		//   (haveExactRepetition?='{' exactRepetition=INT '}')|
		//   (haveAtLeast?='{' atLeast=INT ',' '}')|
		//   (haveRange?='{' (from=INT | fromDefine=[DefineDecl]) ',' (to=INT | toDefine=[DefineDecl]) '}')))?
		public Group getGroup() { return cGroup; }
		
		//CompRegExp
		public RuleCall getCompRegExpParserRuleCall_0() { return cCompRegExpParserRuleCall_0; }
		
		//({UnaryRegExp.left=current}
		//       ((kleened?='*')|
		//        (questionMark?='?')|
		//        (plus?='+')|
		//       (haveExactRepetition?='{' exactRepetition=INT '}')|
		//       (haveAtLeast?='{' atLeast=INT ',' '}')|
		//       (haveRange?='{' (from=INT | fromDefine=[DefineDecl]) ',' (to=INT | toDefine=[DefineDecl]) '}')))?
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryRegExp.left=current}
		public Action getUnaryRegExpLeftAction_1_0() { return cUnaryRegExpLeftAction_1_0; }
		
		//((kleened?='*')|
		// (questionMark?='?')|
		// (plus?='+')|
		//(haveExactRepetition?='{' exactRepetition=INT '}')|
		//(haveAtLeast?='{' atLeast=INT ',' '}')|
		//(haveRange?='{' (from=INT | fromDefine=[DefineDecl]) ',' (to=INT | toDefine=[DefineDecl]) '}'))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//(kleened?='*')
		public Assignment getKleenedAssignment_1_1_0() { return cKleenedAssignment_1_1_0; }
		
		//'*'
		public Keyword getKleenedAsteriskKeyword_1_1_0_0() { return cKleenedAsteriskKeyword_1_1_0_0; }
		
		//(questionMark?='?')
		public Assignment getQuestionMarkAssignment_1_1_1() { return cQuestionMarkAssignment_1_1_1; }
		
		//'?'
		public Keyword getQuestionMarkQuestionMarkKeyword_1_1_1_0() { return cQuestionMarkQuestionMarkKeyword_1_1_1_0; }
		
		//(plus?='+')
		public Assignment getPlusAssignment_1_1_2() { return cPlusAssignment_1_1_2; }
		
		//'+'
		public Keyword getPlusPlusSignKeyword_1_1_2_0() { return cPlusPlusSignKeyword_1_1_2_0; }
		
		//(haveExactRepetition?='{' exactRepetition=INT '}')
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//haveExactRepetition?='{'
		public Assignment getHaveExactRepetitionAssignment_1_1_3_0() { return cHaveExactRepetitionAssignment_1_1_3_0; }
		
		//'{'
		public Keyword getHaveExactRepetitionLeftCurlyBracketKeyword_1_1_3_0_0() { return cHaveExactRepetitionLeftCurlyBracketKeyword_1_1_3_0_0; }
		
		//exactRepetition=INT
		public Assignment getExactRepetitionAssignment_1_1_3_1() { return cExactRepetitionAssignment_1_1_3_1; }
		
		//INT
		public RuleCall getExactRepetitionINTTerminalRuleCall_1_1_3_1_0() { return cExactRepetitionINTTerminalRuleCall_1_1_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_3_2() { return cRightCurlyBracketKeyword_1_1_3_2; }
		
		//(haveAtLeast?='{' atLeast=INT ',' '}')
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }
		
		//haveAtLeast?='{'
		public Assignment getHaveAtLeastAssignment_1_1_4_0() { return cHaveAtLeastAssignment_1_1_4_0; }
		
		//'{'
		public Keyword getHaveAtLeastLeftCurlyBracketKeyword_1_1_4_0_0() { return cHaveAtLeastLeftCurlyBracketKeyword_1_1_4_0_0; }
		
		//atLeast=INT
		public Assignment getAtLeastAssignment_1_1_4_1() { return cAtLeastAssignment_1_1_4_1; }
		
		//INT
		public RuleCall getAtLeastINTTerminalRuleCall_1_1_4_1_0() { return cAtLeastINTTerminalRuleCall_1_1_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_4_2() { return cCommaKeyword_1_1_4_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_4_3() { return cRightCurlyBracketKeyword_1_1_4_3; }
		
		//(haveRange?='{' (from=INT | fromDefine=[DefineDecl]) ',' (to=INT | toDefine=[DefineDecl]) '}')
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }
		
		//haveRange?='{'
		public Assignment getHaveRangeAssignment_1_1_5_0() { return cHaveRangeAssignment_1_1_5_0; }
		
		//'{'
		public Keyword getHaveRangeLeftCurlyBracketKeyword_1_1_5_0_0() { return cHaveRangeLeftCurlyBracketKeyword_1_1_5_0_0; }
		
		//(from=INT | fromDefine=[DefineDecl])
		public Alternatives getAlternatives_1_1_5_1() { return cAlternatives_1_1_5_1; }
		
		//from=INT
		public Assignment getFromAssignment_1_1_5_1_0() { return cFromAssignment_1_1_5_1_0; }
		
		//INT
		public RuleCall getFromINTTerminalRuleCall_1_1_5_1_0_0() { return cFromINTTerminalRuleCall_1_1_5_1_0_0; }
		
		//fromDefine=[DefineDecl]
		public Assignment getFromDefineAssignment_1_1_5_1_1() { return cFromDefineAssignment_1_1_5_1_1; }
		
		//[DefineDecl]
		public CrossReference getFromDefineDefineDeclCrossReference_1_1_5_1_1_0() { return cFromDefineDefineDeclCrossReference_1_1_5_1_1_0; }
		
		//ID
		public RuleCall getFromDefineDefineDeclIDTerminalRuleCall_1_1_5_1_1_0_1() { return cFromDefineDefineDeclIDTerminalRuleCall_1_1_5_1_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_5_2() { return cCommaKeyword_1_1_5_2; }
		
		//(to=INT | toDefine=[DefineDecl])
		public Alternatives getAlternatives_1_1_5_3() { return cAlternatives_1_1_5_3; }
		
		//to=INT
		public Assignment getToAssignment_1_1_5_3_0() { return cToAssignment_1_1_5_3_0; }
		
		//INT
		public RuleCall getToINTTerminalRuleCall_1_1_5_3_0_0() { return cToINTTerminalRuleCall_1_1_5_3_0_0; }
		
		//toDefine=[DefineDecl]
		public Assignment getToDefineAssignment_1_1_5_3_1() { return cToDefineAssignment_1_1_5_3_1; }
		
		//[DefineDecl]
		public CrossReference getToDefineDefineDeclCrossReference_1_1_5_3_1_0() { return cToDefineDefineDeclCrossReference_1_1_5_3_1_0; }
		
		//ID
		public RuleCall getToDefineDefineDeclIDTerminalRuleCall_1_1_5_3_1_0_1() { return cToDefineDefineDeclIDTerminalRuleCall_1_1_5_3_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_5_4() { return cRightCurlyBracketKeyword_1_1_5_4; }
	}
	public class CompRegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.CompRegExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryRegExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCompRegExpAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cCompAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cCompTildeKeyword_1_1_0 = (Keyword)cCompAssignment_1_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftCompRegExpParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		
		//CompRegExp returns RegExp:
		//    PrimaryRegExp | ({CompRegExp} (comp='~') left=CompRegExp);
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryRegExp | ({CompRegExp} (comp='~') left=CompRegExp)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryRegExp
		public RuleCall getPrimaryRegExpParserRuleCall_0() { return cPrimaryRegExpParserRuleCall_0; }
		
		//({CompRegExp} (comp='~') left=CompRegExp)
		public Group getGroup_1() { return cGroup_1; }
		
		//{CompRegExp}
		public Action getCompRegExpAction_1_0() { return cCompRegExpAction_1_0; }
		
		//(comp='~')
		public Assignment getCompAssignment_1_1() { return cCompAssignment_1_1; }
		
		//'~'
		public Keyword getCompTildeKeyword_1_1_0() { return cCompTildeKeyword_1_1_0; }
		
		//left=CompRegExp
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }
		
		//CompRegExp
		public RuleCall getLeftCompRegExpParserRuleCall_1_2_0() { return cLeftCompRegExpParserRuleCall_1_2_0; }
	}
	public class PrimaryRegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.PrimaryRegExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRegExpParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cValAlternatives_1_0 = (Alternatives)cValAssignment_1.eContents().get(0);
		private final Keyword cValTRUEKeyword_1_0_0 = (Keyword)cValAlternatives_1_0.eContents().get(0);
		private final Keyword cValFALSEKeyword_1_0_1 = (Keyword)cValAlternatives_1_0.eContents().get(1);
		private final Keyword cValTrueKeyword_1_0_2 = (Keyword)cValAlternatives_1_0.eContents().get(2);
		private final Keyword cValFalseKeyword_1_0_3 = (Keyword)cValAlternatives_1_0.eContents().get(3);
		private final Assignment cAssrtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAssrtBooleanTermParserRuleCall_2_0 = (RuleCall)cAssrtAssignment_2.eContents().get(0);
		private final Assignment cEmptyAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cEmptyLeftParenthesisRightParenthesisKeyword_3_0 = (Keyword)cEmptyAssignment_3.eContents().get(0);
		
		//PrimaryRegExp returns RegExp:
		//    '(' RegExp ')' | val=('TRUE' |'FALSE' | 'true' | 'false') | assrt=BooleanTerm  | empty?='()';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' RegExp ')' | val=('TRUE' |'FALSE' | 'true' | 'false') | assrt=BooleanTerm  | empty?='()'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' RegExp ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//RegExp
		public RuleCall getRegExpParserRuleCall_0_1() { return cRegExpParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//val=('TRUE' |'FALSE' | 'true' | 'false')
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//('TRUE' |'FALSE' | 'true' | 'false')
		public Alternatives getValAlternatives_1_0() { return cValAlternatives_1_0; }
		
		//'TRUE'
		public Keyword getValTRUEKeyword_1_0_0() { return cValTRUEKeyword_1_0_0; }
		
		//'FALSE'
		public Keyword getValFALSEKeyword_1_0_1() { return cValFALSEKeyword_1_0_1; }
		
		//'true'
		public Keyword getValTrueKeyword_1_0_2() { return cValTrueKeyword_1_0_2; }
		
		//'false'
		public Keyword getValFalseKeyword_1_0_3() { return cValFalseKeyword_1_0_3; }
		
		//assrt=BooleanTerm
		public Assignment getAssrtAssignment_2() { return cAssrtAssignment_2; }
		
		//BooleanTerm
		public RuleCall getAssrtBooleanTermParserRuleCall_2_0() { return cAssrtBooleanTermParserRuleCall_2_0; }
		
		//empty?='()'
		public Assignment getEmptyAssignment_3() { return cEmptyAssignment_3; }
		
		//'()'
		public Keyword getEmptyLeftParenthesisRightParenthesisKeyword_3_0() { return cEmptyLeftParenthesisRightParenthesisKeyword_3_0; }
	}
	public class BooleanTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.BooleanTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelExprTemporalInExprParserRuleCall_2_0 = (RuleCall)cRelExprAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		// //| (neg?='!')? pointer=[VarDecl]
		//BooleanTerm:
		//    {BooleanTerm} '[' relExpr=TemporalInExpr ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanTerm} '[' relExpr=TemporalInExpr ']'
		public Group getGroup() { return cGroup; }
		
		//{BooleanTerm}
		public Action getBooleanTermAction_0() { return cBooleanTermAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//relExpr=TemporalInExpr
		public Assignment getRelExprAssignment_2() { return cRelExprAssignment_2; }
		
		//TemporalInExpr
		public RuleCall getRelExprTemporalInExprParserRuleCall_2_0() { return cRelExprTemporalInExprParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ValueInRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.ValueInRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cConstTypeConstantCrossReference_0_0 = (CrossReference)cConstAssignment_0.eContents().get(0);
		private final RuleCall cConstTypeConstantIDTerminalRuleCall_0_0_1 = (RuleCall)cConstTypeConstantCrossReference_0_0.eContents().get(1);
		private final Assignment cIntAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_1_0 = (RuleCall)cIntAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cFromAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFromINTTerminalRuleCall_2_0_0 = (RuleCall)cFromAssignment_2_0.eContents().get(0);
		private final Assignment cMultiAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cMultiHyphenMinusKeyword_2_1_0 = (Keyword)cMultiAssignment_2_1.eContents().get(0);
		private final Assignment cToAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cToINTTerminalRuleCall_2_2_0 = (RuleCall)cToAssignment_2_2.eContents().get(0);
		private final Assignment cBooleanValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBooleanValueAlternatives_3_0 = (Alternatives)cBooleanValueAssignment_3.eContents().get(0);
		private final Keyword cBooleanValueTRUEKeyword_3_0_0 = (Keyword)cBooleanValueAlternatives_3_0.eContents().get(0);
		private final Keyword cBooleanValueFALSEKeyword_3_0_1 = (Keyword)cBooleanValueAlternatives_3_0.eContents().get(1);
		private final Keyword cBooleanValueTrueKeyword_3_0_2 = (Keyword)cBooleanValueAlternatives_3_0.eContents().get(2);
		private final Keyword cBooleanValueFalseKeyword_3_0_3 = (Keyword)cBooleanValueAlternatives_3_0.eContents().get(3);
		
		//ValueInRange:
		//     const=[TypeConstant] | int=INT | (from=INT multi?='-' to=INT) | booleanValue=('TRUE' |'FALSE' | 'true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//const=[TypeConstant] | int=INT | (from=INT multi?='-' to=INT) | booleanValue=('TRUE' |'FALSE' | 'true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//const=[TypeConstant]
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//[TypeConstant]
		public CrossReference getConstTypeConstantCrossReference_0_0() { return cConstTypeConstantCrossReference_0_0; }
		
		//ID
		public RuleCall getConstTypeConstantIDTerminalRuleCall_0_0_1() { return cConstTypeConstantIDTerminalRuleCall_0_0_1; }
		
		//int=INT
		public Assignment getIntAssignment_1() { return cIntAssignment_1; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_1_0() { return cIntINTTerminalRuleCall_1_0; }
		
		//(from=INT multi?='-' to=INT)
		public Group getGroup_2() { return cGroup_2; }
		
		//from=INT
		public Assignment getFromAssignment_2_0() { return cFromAssignment_2_0; }
		
		//INT
		public RuleCall getFromINTTerminalRuleCall_2_0_0() { return cFromINTTerminalRuleCall_2_0_0; }
		
		//multi?='-'
		public Assignment getMultiAssignment_2_1() { return cMultiAssignment_2_1; }
		
		//'-'
		public Keyword getMultiHyphenMinusKeyword_2_1_0() { return cMultiHyphenMinusKeyword_2_1_0; }
		
		//to=INT
		public Assignment getToAssignment_2_2() { return cToAssignment_2_2; }
		
		//INT
		public RuleCall getToINTTerminalRuleCall_2_2_0() { return cToINTTerminalRuleCall_2_2_0; }
		
		//booleanValue=('TRUE' |'FALSE' | 'true' | 'false')
		public Assignment getBooleanValueAssignment_3() { return cBooleanValueAssignment_3; }
		
		//('TRUE' |'FALSE' | 'true' | 'false')
		public Alternatives getBooleanValueAlternatives_3_0() { return cBooleanValueAlternatives_3_0; }
		
		//'TRUE'
		public Keyword getBooleanValueTRUEKeyword_3_0_0() { return cBooleanValueTRUEKeyword_3_0_0; }
		
		//'FALSE'
		public Keyword getBooleanValueFALSEKeyword_3_0_1() { return cBooleanValueFALSEKeyword_3_0_1; }
		
		//'true'
		public Keyword getBooleanValueTrueKeyword_3_0_2() { return cBooleanValueTrueKeyword_3_0_2; }
		
		//'false'
		public Keyword getBooleanValueFalseKeyword_3_0_3() { return cBooleanValueFalseKeyword_3_0_3; }
	}
	public class QuantifierExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.QuantifierExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemporalInExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cQuantifierExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cOperatorAlternatives_1_1_0_0 = (Alternatives)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Keyword cOperatorForallKeyword_1_1_0_0_0 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(0);
		private final Keyword cOperatorExistsKeyword_1_1_0_0_1 = (Keyword)cOperatorAlternatives_1_1_0_0.eContents().get(1);
		private final Assignment cDomainVarAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDomainVarDomainVarDeclParserRuleCall_1_1_1_0 = (RuleCall)cDomainVarAssignment_1_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTemporalExprAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cTemporalExprQuantifierExprParserRuleCall_1_1_3_0 = (RuleCall)cTemporalExprAssignment_1_1_3.eContents().get(0);
		
		//// UnaryRegExp returns RegExp:
		////     left = PrimaryRegExp  (
		////        (kleened?='*')|
		////         (questionMark?='?')|
		////         (plus?='+')|
		////        (haveExactRepetition?='{' exactRepetition=INT '}')|
		////        (haveAtLeast?='{' atLeast=INT ',' '}')|
		////        (haveRange?='{' from=INT ',' to=INT '}'))?;
		//// PrimaryRegExp returns RegExp:
		////     (comp?='~')? left = AtomicRegExp;
		////AtomicRegExp returns RegExp:
		////    '(' RegExp ')' | (neg?='!')? var=[VarDecl]  (((neq='!=') | '=') (const=[TypeConstant] | int=INT))? | val=('TRUE' |'FALSE' | 'true' | 'false') | rangedVar=RangedVar  | empty?= '()';
		////RangedVar:
		////    var=[VarDecl] ((neq='!=') | '=') '[' (values+=ValueInRange)+ ']';
		////quantifier expression - a temporal logic expression with quantifiers.
		//QuantifierExpr returns TemporalExpression:
		//  TemporalInExpr
		//  |{QuantifierExpr}
		//  (operator=('forall' | 'exists') domainVar=DomainVarDecl '.' temporalExpr=(QuantifierExpr));
		@Override public ParserRule getRule() { return rule; }
		
		//TemporalInExpr
		//|{QuantifierExpr}
		//(operator=('forall' | 'exists') domainVar=DomainVarDecl '.' temporalExpr=(QuantifierExpr))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TemporalInExpr
		public RuleCall getTemporalInExprParserRuleCall_0() { return cTemporalInExprParserRuleCall_0; }
		
		//{QuantifierExpr}
		//  (operator=('forall' | 'exists') domainVar=DomainVarDecl '.' temporalExpr=(QuantifierExpr))
		public Group getGroup_1() { return cGroup_1; }
		
		//{QuantifierExpr}
		public Action getQuantifierExprAction_1_0() { return cQuantifierExprAction_1_0; }
		
		//(operator=('forall' | 'exists') domainVar=DomainVarDecl '.' temporalExpr=(QuantifierExpr))
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operator=('forall' | 'exists')
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }
		
		//('forall' | 'exists')
		public Alternatives getOperatorAlternatives_1_1_0_0() { return cOperatorAlternatives_1_1_0_0; }
		
		//'forall'
		public Keyword getOperatorForallKeyword_1_1_0_0_0() { return cOperatorForallKeyword_1_1_0_0_0; }
		
		//'exists'
		public Keyword getOperatorExistsKeyword_1_1_0_0_1() { return cOperatorExistsKeyword_1_1_0_0_1; }
		
		//domainVar=DomainVarDecl
		public Assignment getDomainVarAssignment_1_1_1() { return cDomainVarAssignment_1_1_1; }
		
		//DomainVarDecl
		public RuleCall getDomainVarDomainVarDeclParserRuleCall_1_1_1_0() { return cDomainVarDomainVarDeclParserRuleCall_1_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_2() { return cFullStopKeyword_1_1_2; }
		
		//temporalExpr=(QuantifierExpr)
		public Assignment getTemporalExprAssignment_1_1_3() { return cTemporalExprAssignment_1_1_3; }
		
		//(QuantifierExpr)
		public RuleCall getTemporalExprQuantifierExprParserRuleCall_1_1_3_0() { return cTemporalExprQuantifierExprParserRuleCall_1_1_3_0; }
	}
	public class DomainVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.DomainVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainTypeVarTypeParserRuleCall_2_0 = (RuleCall)cDomainTypeAssignment_2.eContents().get(0);
		
		////declaration of a var from domain for quantifier
		//DomainVarDecl:
		//    name=ID 'in' domainType=(VarType);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'in' domainType=(VarType)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//domainType=(VarType)
		public Assignment getDomainTypeAssignment_2() { return cDomainTypeAssignment_2; }
		
		//(VarType)
		public RuleCall getDomainTypeVarTypeParserRuleCall_2_0() { return cDomainTypeVarTypeParserRuleCall_2_0; }
	}
	public class SizeDefineDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.SizeDefineDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cNameDefineDeclCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameDefineDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cNameDefineDeclCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArithExpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArithExpTemporalExpressionParserRuleCall_2_1_0 = (RuleCall)cArithExpAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////all the declaration that can determine size of array and range of int
		//SizeDefineDecl:
		//    value=INT | name=[DefineDecl] | '(' arithExp=TemporalExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT | name=[DefineDecl] | '(' arithExp=TemporalExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//name=[DefineDecl]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[DefineDecl]
		public CrossReference getNameDefineDeclCrossReference_1_0() { return cNameDefineDeclCrossReference_1_0; }
		
		//ID
		public RuleCall getNameDefineDeclIDTerminalRuleCall_1_0_1() { return cNameDefineDeclIDTerminalRuleCall_1_0_1; }
		
		//'(' arithExp=TemporalExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//arithExp=TemporalExpression
		public Assignment getArithExpAssignment_2_1() { return cArithExpAssignment_2_1; }
		
		//TemporalExpression
		public RuleCall getArithExpTemporalExpressionParserRuleCall_2_1_0() { return cArithExpTemporalExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TOK_SEMIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.TOK_SEMI");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//TOK_SEMI:
		//    ';';
		@Override public ParserRule getRule() { return rule; }
		
		//';'
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	
	public class VarOwnerElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.VarOwner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSYSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSYSOutputKeyword_0_0 = (Keyword)cSYSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSYSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSYSOutKeyword_1_0 = (Keyword)cSYSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSYSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSYSSysvarKeyword_2_0 = (Keyword)cSYSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSYSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSYSSysKeyword_3_0 = (Keyword)cSYSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cENVEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cENVInputKeyword_4_0 = (Keyword)cENVEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cENVEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cENVInKeyword_5_0 = (Keyword)cENVEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cENVEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cENVEnvvarKeyword_6_0 = (Keyword)cENVEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cENVEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cENVEnvKeyword_7_0 = (Keyword)cENVEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cAUXEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cAUXAuxvarKeyword_8_0 = (Keyword)cAUXEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cAUXEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cAUXAuxKeyword_9_0 = (Keyword)cAUXEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum VarOwner: SYS='output' | SYS='out' | SYS='sysvar' | SYS='sys' |  ENV='input' |  ENV='in' | ENV='envvar' |  ENV='env' | AUX='auxvar' | AUX='aux';
		public EnumRule getRule() { return rule; }
		
		//SYS='output' | SYS='out' | SYS='sysvar' | SYS='sys' |  ENV='input' |  ENV='in' | ENV='envvar' |  ENV='env' | AUX='auxvar' | AUX='aux'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SYS='output'
		public EnumLiteralDeclaration getSYSEnumLiteralDeclaration_0() { return cSYSEnumLiteralDeclaration_0; }
		
		//'output'
		public Keyword getSYSOutputKeyword_0_0() { return cSYSOutputKeyword_0_0; }
		
		//SYS='out'
		public EnumLiteralDeclaration getSYSEnumLiteralDeclaration_1() { return cSYSEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getSYSOutKeyword_1_0() { return cSYSOutKeyword_1_0; }
		
		//SYS='sysvar'
		public EnumLiteralDeclaration getSYSEnumLiteralDeclaration_2() { return cSYSEnumLiteralDeclaration_2; }
		
		//'sysvar'
		public Keyword getSYSSysvarKeyword_2_0() { return cSYSSysvarKeyword_2_0; }
		
		//SYS='sys'
		public EnumLiteralDeclaration getSYSEnumLiteralDeclaration_3() { return cSYSEnumLiteralDeclaration_3; }
		
		//'sys'
		public Keyword getSYSSysKeyword_3_0() { return cSYSSysKeyword_3_0; }
		
		//ENV='input'
		public EnumLiteralDeclaration getENVEnumLiteralDeclaration_4() { return cENVEnumLiteralDeclaration_4; }
		
		//'input'
		public Keyword getENVInputKeyword_4_0() { return cENVInputKeyword_4_0; }
		
		//ENV='in'
		public EnumLiteralDeclaration getENVEnumLiteralDeclaration_5() { return cENVEnumLiteralDeclaration_5; }
		
		//'in'
		public Keyword getENVInKeyword_5_0() { return cENVInKeyword_5_0; }
		
		//ENV='envvar'
		public EnumLiteralDeclaration getENVEnumLiteralDeclaration_6() { return cENVEnumLiteralDeclaration_6; }
		
		//'envvar'
		public Keyword getENVEnvvarKeyword_6_0() { return cENVEnvvarKeyword_6_0; }
		
		//ENV='env'
		public EnumLiteralDeclaration getENVEnumLiteralDeclaration_7() { return cENVEnumLiteralDeclaration_7; }
		
		//'env'
		public Keyword getENVEnvKeyword_7_0() { return cENVEnvKeyword_7_0; }
		
		//AUX='auxvar'
		public EnumLiteralDeclaration getAUXEnumLiteralDeclaration_8() { return cAUXEnumLiteralDeclaration_8; }
		
		//'auxvar'
		public Keyword getAUXAuxvarKeyword_8_0() { return cAUXAuxvarKeyword_8_0; }
		
		//AUX='aux'
		public EnumLiteralDeclaration getAUXEnumLiteralDeclaration_9() { return cAUXEnumLiteralDeclaration_9; }
		
		//'aux'
		public Keyword getAUXAuxKeyword_9_0() { return cAUXAuxKeyword_9_0; }
	}
	public class OverflowMethodElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.OverflowMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cKEEPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cKEEPKeepKeyword_0_0 = (Keyword)cKEEPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODULOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODULOModuloKeyword_2_0 = (Keyword)cMODULOEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OverflowMethod: KEEP='keep' | FALSE='false' | MODULO='modulo';
		public EnumRule getRule() { return rule; }
		
		//KEEP='keep' | FALSE='false' | MODULO='modulo'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KEEP='keep'
		public EnumLiteralDeclaration getKEEPEnumLiteralDeclaration_0() { return cKEEPEnumLiteralDeclaration_0; }
		
		//'keep'
		public Keyword getKEEPKeepKeyword_0_0() { return cKEEPKeepKeyword_0_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
		
		//MODULO='modulo'
		public EnumLiteralDeclaration getMODULOEnumLiteralDeclaration_2() { return cMODULOEnumLiteralDeclaration_2; }
		
		//'modulo'
		public Keyword getMODULOModuloKeyword_2_0() { return cMODULOModuloKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final DeclElements pDecl;
	private final WeightDefElements pWeightDef;
	private final VarOwnerElements eVarOwner;
	private final VarElements pVar;
	private final TypeDefElements pTypeDef;
	private final VarDeclElements pVarDecl;
	private final ReferrableElements pReferrable;
	private final TypeConstantElements pTypeConstant;
	private final TypeConstantLiteralElements pTypeConstantLiteral;
	private final DefineElements pDefine;
	private final DefineDeclElements pDefineDecl;
	private final DefineArrayElements pDefineArray;
	private final DefineRegExpElements pDefineRegExp;
	private final DefineRegExpDeclElements pDefineRegExpDecl;
	private final PatternParamListElements pPatternParamList;
	private final PatternParamElements pPatternParam;
	private final TypedParamListElements pTypedParamList;
	private final TypedParamElements pTypedParam;
	private final OverflowMethodElements eOverflowMethod;
	private final CounterElements pCounter;
	private final MonitorElements pMonitor;
	private final PatternElements pPattern;
	private final PredicateElements pPredicate;
	private final VarTypeElements pVarType;
	private final LTLGarElements pLTLGar;
	private final LTLAsmElements pLTLAsm;
	private final EXGarElements pEXGar;
	private final TemporalExpressionElements pTemporalExpression;
	private final TemporalInExprElements pTemporalInExpr;
	private final TemporalImpExprElements pTemporalImpExpr;
	private final TemporalIffExprElements pTemporalIffExpr;
	private final TemporalOrExprElements pTemporalOrExpr;
	private final TemporalAndExprElements pTemporalAndExpr;
	private final TemporalRelationalExprElements pTemporalRelationalExpr;
	private final TemporalRemainderExprElements pTemporalRemainderExpr;
	private final TemporalAdditiveExprElements pTemporalAdditiveExpr;
	private final TemporalMultiplicativeExprElements pTemporalMultiplicativeExpr;
	private final TemporalBinaryExprElements pTemporalBinaryExpr;
	private final TemporalUnaryExprElements pTemporalUnaryExpr;
	private final TemporalPrimaryExprElements pTemporalPrimaryExpr;
	private final PredicateOrPatternReferrableElements pPredicateOrPatternReferrable;
	private final SubrangeElements pSubrange;
	private final ConstantElements pConstant;
	private final TriggerElements pTrigger;
	private final RegExpElements pRegExp;
	private final BinaryRegExpElements pBinaryRegExp;
	private final UnaryRegExpElements pUnaryRegExp;
	private final CompRegExpElements pCompRegExp;
	private final PrimaryRegExpElements pPrimaryRegExp;
	private final BooleanTermElements pBooleanTerm;
	private final ValueInRangeElements pValueInRange;
	private final QuantifierExprElements pQuantifierExpr;
	private final DomainVarDeclElements pDomainVarDecl;
	private final SizeDefineDeclElements pSizeDefineDecl;
	private final TOK_SEMIElements pTOK_SEMI;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpectraGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pDecl = new DeclElements();
		this.pWeightDef = new WeightDefElements();
		this.eVarOwner = new VarOwnerElements();
		this.pVar = new VarElements();
		this.pTypeDef = new TypeDefElements();
		this.pVarDecl = new VarDeclElements();
		this.pReferrable = new ReferrableElements();
		this.pTypeConstant = new TypeConstantElements();
		this.pTypeConstantLiteral = new TypeConstantLiteralElements();
		this.pDefine = new DefineElements();
		this.pDefineDecl = new DefineDeclElements();
		this.pDefineArray = new DefineArrayElements();
		this.pDefineRegExp = new DefineRegExpElements();
		this.pDefineRegExpDecl = new DefineRegExpDeclElements();
		this.pPatternParamList = new PatternParamListElements();
		this.pPatternParam = new PatternParamElements();
		this.pTypedParamList = new TypedParamListElements();
		this.pTypedParam = new TypedParamElements();
		this.eOverflowMethod = new OverflowMethodElements();
		this.pCounter = new CounterElements();
		this.pMonitor = new MonitorElements();
		this.pPattern = new PatternElements();
		this.pPredicate = new PredicateElements();
		this.pVarType = new VarTypeElements();
		this.pLTLGar = new LTLGarElements();
		this.pLTLAsm = new LTLAsmElements();
		this.pEXGar = new EXGarElements();
		this.pTemporalExpression = new TemporalExpressionElements();
		this.pTemporalInExpr = new TemporalInExprElements();
		this.pTemporalImpExpr = new TemporalImpExprElements();
		this.pTemporalIffExpr = new TemporalIffExprElements();
		this.pTemporalOrExpr = new TemporalOrExprElements();
		this.pTemporalAndExpr = new TemporalAndExprElements();
		this.pTemporalRelationalExpr = new TemporalRelationalExprElements();
		this.pTemporalRemainderExpr = new TemporalRemainderExprElements();
		this.pTemporalAdditiveExpr = new TemporalAdditiveExprElements();
		this.pTemporalMultiplicativeExpr = new TemporalMultiplicativeExprElements();
		this.pTemporalBinaryExpr = new TemporalBinaryExprElements();
		this.pTemporalUnaryExpr = new TemporalUnaryExprElements();
		this.pTemporalPrimaryExpr = new TemporalPrimaryExprElements();
		this.pPredicateOrPatternReferrable = new PredicateOrPatternReferrableElements();
		this.pSubrange = new SubrangeElements();
		this.pConstant = new ConstantElements();
		this.pTrigger = new TriggerElements();
		this.pRegExp = new RegExpElements();
		this.pBinaryRegExp = new BinaryRegExpElements();
		this.pUnaryRegExp = new UnaryRegExpElements();
		this.pCompRegExp = new CompRegExpElements();
		this.pPrimaryRegExp = new PrimaryRegExpElements();
		this.pBooleanTerm = new BooleanTermElements();
		this.pValueInRange = new ValueInRangeElements();
		this.pQuantifierExpr = new QuantifierExprElements();
		this.pDomainVarDecl = new DomainVarDeclElements();
		this.pSizeDefineDecl = new SizeDefineDeclElements();
		this.pTOK_SEMI = new TOK_SEMIElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "tau.smlab.syntech.Spectra.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tau.smlab.syntech.Spectra".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (imports+=Import)*
	//    ('module'|'spec') name=ID (elements+=Decl)+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import:
	//    'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Decl:
	//    Var
	//    | TypeDef
	//    | Define
	//    | Predicate
	//    | Pattern
	//    | Monitor
	//    | WeightDef
	//    | LTLGar
	//    | LTLAsm
	//    | EXGar
	//    | Counter
	//    | DefineRegExp;
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//WeightDef:
	//    'weight' (name=ID ':')? negative=('-')? value=INT
	//    definition=TemporalInExpr TOK_SEMI;
	public WeightDefElements getWeightDefAccess() {
		return pWeightDef;
	}
	
	public ParserRule getWeightDefRule() {
		return getWeightDefAccess().getRule();
	}
	
	//enum VarOwner: SYS='output' | SYS='out' | SYS='sysvar' | SYS='sys' |  ENV='input' |  ENV='in' | ENV='envvar' |  ENV='env' | AUX='auxvar' | AUX='aux';
	public VarOwnerElements getVarOwnerAccess() {
		return eVarOwner;
	}
	
	public EnumRule getVarOwnerRule() {
		return getVarOwnerAccess().getRule();
	}
	
	//Var:
	//    kind=VarOwner var=VarDecl;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//TypeDef:
	//    'type' name=ID '=' type=VarType TOK_SEMI;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//VarDecl:
	//    type=VarType name=ID TOK_SEMI;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//Referrable:
	//    VarDecl | TypeConstant | DefineDecl | TypedParam | PatternParam | Monitor | Counter | DefineRegExpDecl | DomainVarDecl;
	public ReferrableElements getReferrableAccess() {
		return pReferrable;
	}
	
	public ParserRule getReferrableRule() {
		return getReferrableAccess().getRule();
	}
	
	//TypeConstant:
	//    name=TypeConstantLiteral;
	public TypeConstantElements getTypeConstantAccess() {
		return pTypeConstant;
	}
	
	public ParserRule getTypeConstantRule() {
		return getTypeConstantAccess().getRule();
	}
	
	//TypeConstantLiteral:
	//    ID | INT;
	public TypeConstantLiteralElements getTypeConstantLiteralAccess() {
		return pTypeConstantLiteral;
	}
	
	public ParserRule getTypeConstantLiteralRule() {
		return getTypeConstantLiteralAccess().getRule();
	}
	
	//Define:
	//    'define' (defineList+=DefineDecl)+;
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//DefineDecl:
	//    ((name=ID ':=' simpleExpr=TemporalExpression) |
	//    (name=ID ('[' dimensions+=SizeDefineDecl ']')+ ':=' innerArray=DefineArray ))
	//    TOK_SEMI;
	public DefineDeclElements getDefineDeclAccess() {
		return pDefineDecl;
	}
	
	public ParserRule getDefineDeclRule() {
		return getDefineDeclAccess().getRule();
	}
	
	//DefineArray:
	//    '{' (simpleExprs+=TemporalExpression (',' simpleExprs+=TemporalExpression)*) '}' | '{' (innerArrays+=DefineArray (',' innerArrays+=DefineArray)*) '}' ;
	public DefineArrayElements getDefineArrayAccess() {
		return pDefineArray;
	}
	
	public ParserRule getDefineArrayRule() {
		return getDefineArrayAccess().getRule();
	}
	
	//DefineRegExp:
	//  'regexp' (defineRegsList+=DefineRegExpDecl)+;
	public DefineRegExpElements getDefineRegExpAccess() {
		return pDefineRegExp;
	}
	
	public ParserRule getDefineRegExpRule() {
		return getDefineRegExpAccess().getRule();
	}
	
	//DefineRegExpDecl:
	//  name=ID ':=' exp=RegExp TOK_SEMI;
	public DefineRegExpDeclElements getDefineRegExpDeclAccess() {
		return pDefineRegExpDecl;
	}
	
	public ParserRule getDefineRegExpDeclRule() {
		return getDefineRegExpDeclAccess().getRule();
	}
	
	//PatternParamList:
	//    params+=PatternParam (',' params+=PatternParam)*;
	public PatternParamListElements getPatternParamListAccess() {
		return pPatternParamList;
	}
	
	public ParserRule getPatternParamListRule() {
		return getPatternParamListAccess().getRule();
	}
	
	//PatternParam:
	//    name=ID;
	public PatternParamElements getPatternParamAccess() {
		return pPatternParam;
	}
	
	public ParserRule getPatternParamRule() {
		return getPatternParamAccess().getRule();
	}
	
	//TypedParamList:
	//    params+=TypedParam (',' params+=TypedParam)*;
	public TypedParamListElements getTypedParamListAccess() {
		return pTypedParamList;
	}
	
	public ParserRule getTypedParamListRule() {
		return getTypedParamListAccess().getRule();
	}
	
	//TypedParam:
	//    type=VarType name=ID;
	public TypedParamElements getTypedParamAccess() {
		return pTypedParam;
	}
	
	public ParserRule getTypedParamRule() {
		return getTypedParamAccess().getRule();
	}
	
	//enum OverflowMethod: KEEP='keep' | FALSE='false' | MODULO='modulo';
	public OverflowMethodElements getOverflowMethodAccess() {
		return eOverflowMethod;
	}
	
	public EnumRule getOverflowMethodRule() {
		return getOverflowMethodAccess().getRule();
	}
	
	//Counter:
	//    'counter' name=ID ('(' range=Subrange ')')
	//  '{' (((initial+=TemporalInExpr)
	//      | ('reset:' resetPred+=TemporalInExpr)
	//      | ('inc:' incPred+=TemporalExpression)
	//      | ('dec:' decPred+=TemporalExpression)
	//      | ('overflow:' overflowMethod+=OverflowMethod)
	//      | ('underflow:' underflowMethod+=OverflowMethod)
	//  ) TOK_SEMI)* '}';
	public CounterElements getCounterAccess() {
		return pCounter;
	}
	
	public ParserRule getCounterRule() {
		return getCounterAccess().getRule();
	}
	
	//Monitor:
	//  'monitor' type=VarType name=ID '{' ((
	//    (('ini' | 'initially')? initial+=TemporalInExpr) |
	//    (('G' | 'trans') safety+=TemporalInExpr) |
	//    (('always' | 'alw') stateInv+=TemporalInExpr)
	//  ) TOK_SEMI)* '}';
	public MonitorElements getMonitorAccess() {
		return pMonitor;
	}
	
	public ParserRule getMonitorRule() {
		return getMonitorAccess().getRule();
	}
	
	//Pattern:
	//    'pattern' name=ID ('(' params=PatternParamList ')')?
	//    ('{' ('var' varDeclList+=VarDecl)* ((
	//      (('ini' | 'initially')? initial+=TemporalInExpr) |
	//      (('G' | 'trans') safety+=TemporalInExpr) |
	//      (('always' | 'alw') stateInv+=TemporalInExpr) |
	//      (('GF' | 'alwEv'| 'alwaysEventually') justice+=TemporalInExpr)
	//    ) TOK_SEMI)+ '}');
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Predicate:
	//  'predicate' name=ID ('(' params=TypedParamList ')' | '()')
	//  ( (':' body=TemporalExpression TOK_SEMI) |
	//    ('{' body=TemporalExpression '}')
	//  );
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//VarType:
	//    (name='boolean'
	//    | 'Int' '(' subr=Subrange ')'
	//    | '{' const+=TypeConstant (',' const+=TypeConstant)* '}'
	//    | type=[TypeDef])
	//    ('[' dimensions+=SizeDefineDecl ']')*;
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//LTLGar:
	//    ('guarantee' | 'gar') (name=ID ('{' params=TypedParamList '}')? ':')?
	//    ((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger)) TOK_SEMI;
	public LTLGarElements getLTLGarAccess() {
		return pLTLGar;
	}
	
	public ParserRule getLTLGarRule() {
		return getLTLGarAccess().getRule();
	}
	
	//LTLAsm:
	//    ('assumption' | 'asm') (name=ID ('{'  params=TypedParamList '}')? ':')?
	//  ((('ini' | 'initially' | safety=('G' | 'trans') | stateInv=('always' | 'alw') | justice=('GF' | 'alwEv'| 'alwaysEventually'))? (temporalExpr=QuantifierExpr)) | (trig=Trigger)) TOK_SEMI;
	public LTLAsmElements getLTLAsmAccess() {
		return pLTLAsm;
	}
	
	public ParserRule getLTLAsmRule() {
		return getLTLAsmAccess().getRule();
	}
	
	//EXGar:
	//  ('guarantee' | 'gar') (name=ID ':')?
	//  (('GE' elements+=TemporalInExpr (',' elements+=TemporalInExpr)*) | ('GEF' regExpPointer = [DefineRegExpDecl]) | ('GEF' regExp = RegExp)) TOK_SEMI;
	public EXGarElements getEXGarAccess() {
		return pEXGar;
	}
	
	public ParserRule getEXGarRule() {
		return getEXGarAccess().getRule();
	}
	
	//TemporalExpression:
	//  QuantifierExpr;
	public TemporalExpressionElements getTemporalExpressionAccess() {
		return pTemporalExpression;
	}
	
	public ParserRule getTemporalExpressionRule() {
		return getTemporalExpressionAccess().getRule();
	}
	
	//TemporalInExpr returns TemporalExpression:
	//    TemporalImpExpr ({TemporalInExpr.left=current} (not?='not')? operator=('in') '{'  values+=ValueInRange (',' values+=ValueInRange)* '}')?;
	public TemporalInExprElements getTemporalInExprAccess() {
		return pTemporalInExpr;
	}
	
	public ParserRule getTemporalInExprRule() {
		return getTemporalInExprAccess().getRule();
	}
	
	//TemporalImpExpr returns TemporalExpression:
	//    TemporalIffExpr ({TemporalImpExpr.left=current} operator=('->' | 'implies') implication=TemporalImpExpr)?;
	public TemporalImpExprElements getTemporalImpExprAccess() {
		return pTemporalImpExpr;
	}
	
	public ParserRule getTemporalImpExprRule() {
		return getTemporalImpExprAccess().getRule();
	}
	
	//TemporalIffExpr returns TemporalExpression:
	//    TemporalOrExpr ({TemporalIffExpr.elements+=current} operator=('<->' | 'iff') elements+=TemporalOrExpr)*;
	public TemporalIffExprElements getTemporalIffExprAccess() {
		return pTemporalIffExpr;
	}
	
	public ParserRule getTemporalIffExprRule() {
		return getTemporalIffExprAccess().getRule();
	}
	
	//TemporalOrExpr returns TemporalExpression:
	//    TemporalAndExpr    ({TemporalOrExpr.elements+=current} operator+=('|' | 'or' | 'xor') elements+=TemporalAndExpr)*;
	public TemporalOrExprElements getTemporalOrExprAccess() {
		return pTemporalOrExpr;
	}
	
	public ParserRule getTemporalOrExprRule() {
		return getTemporalOrExprAccess().getRule();
	}
	
	//TemporalAndExpr returns TemporalExpression:
	//    TemporalRelationalExpr ({TemporalAndExpr.elements+=current} operator+=('&' | 'and') elements+=TemporalRelationalExpr)*;
	public TemporalAndExprElements getTemporalAndExprAccess() {
		return pTemporalAndExpr;
	}
	
	public ParserRule getTemporalAndExprRule() {
		return getTemporalAndExprAccess().getRule();
	}
	
	//TemporalRelationalExpr returns TemporalExpression:
	//    TemporalRemainderExpr    ({TemporalRelationalExpr.left=current} operator=('='|'!='|'<'|'>'|'<='|'>=') right=TemporalRemainderExpr)?;
	public TemporalRelationalExprElements getTemporalRelationalExprAccess() {
		return pTemporalRelationalExpr;
	}
	
	public ParserRule getTemporalRelationalExprRule() {
		return getTemporalRelationalExprAccess().getRule();
	}
	
	//TemporalRemainderExpr returns TemporalExpression:
	//    TemporalAdditiveExpr ({TemporalRemainderExpr.left=current} operator=('mod' | '%') right=TemporalAdditiveExpr)?;
	public TemporalRemainderExprElements getTemporalRemainderExprAccess() {
		return pTemporalRemainderExpr;
	}
	
	public ParserRule getTemporalRemainderExprRule() {
		return getTemporalRemainderExprAccess().getRule();
	}
	
	//TemporalAdditiveExpr returns TemporalExpression:
	//    TemporalMultiplicativeExpr ({TemporalAdditiveExpr.elements+=current} operator+=('+'|'-') elements+=TemporalMultiplicativeExpr)*;
	public TemporalAdditiveExprElements getTemporalAdditiveExprAccess() {
		return pTemporalAdditiveExpr;
	}
	
	public ParserRule getTemporalAdditiveExprRule() {
		return getTemporalAdditiveExprAccess().getRule();
	}
	
	//TemporalMultiplicativeExpr returns TemporalExpression:
	//    TemporalBinaryExpr ({TemporalMultiplicativeExpr.elements+=current} operator+=('*'|'/') elements+=TemporalBinaryExpr)*;
	public TemporalMultiplicativeExprElements getTemporalMultiplicativeExprAccess() {
		return pTemporalMultiplicativeExpr;
	}
	
	public ParserRule getTemporalMultiplicativeExprRule() {
		return getTemporalMultiplicativeExprAccess().getRule();
	}
	
	//TemporalBinaryExpr returns TemporalExpression:
	//    TemporalUnaryExpr    ({TemporalBinaryExpr.elements+=current} operator+=('S' | 'SINCE' | 'T' | 'TRIGGERED') elements+=TemporalUnaryExpr)*;
	public TemporalBinaryExprElements getTemporalBinaryExprAccess() {
		return pTemporalBinaryExpr;
	}
	
	public ParserRule getTemporalBinaryExprRule() {
		return getTemporalBinaryExprAccess().getRule();
	}
	
	//TemporalUnaryExpr returns TemporalExpression:
	//    TemporalPrimaryExpr
	//    | {TemporalUnaryExpr}
	//      (kinds=('Y' | 'PREV') tue=TemporalUnaryExpr
	//      | kinds=('H' | 'HISTORICALLY') tue=TemporalUnaryExpr
	//      | kinds=('O' | 'ONCE') tue=TemporalUnaryExpr);
	public TemporalUnaryExprElements getTemporalUnaryExprAccess() {
		return pTemporalUnaryExpr;
	}
	
	public ParserRule getTemporalUnaryExprRule() {
		return getTemporalUnaryExprAccess().getRule();
	}
	
	//TemporalPrimaryExpr returns TemporalExpression:
	//    Constant
	//    | '(' QuantifierExpr ')'
	//    | {TemporalPrimaryExpr}
	//     (predPatt=[PredicateOrPatternReferrable] ('(' predPattParams+=TemporalInExpr (',' predPattParams+=TemporalInExpr)* ')' | '()')
	//     | operator=('-'|'!') tpe=TemporalPrimaryExpr
	//     | pointer=[Referrable]('[' index+=TemporalInExpr ']')*
	//     | operator='next' '(' temporalExpression=TemporalInExpr ')'
	//     | operator='regexp' '(' (regexp=RegExp | regexpPointer=[DefineRegExpDecl]) ')'
	//     | pointer=[Referrable] operator='.all'
	//     | pointer=[Referrable] operator='.any'
	//     | pointer=[Referrable] operator='.prod'
	//     | pointer=[Referrable] operator='.sum'
	//     | pointer=[Referrable] operator='.min'
	//     | pointer=[Referrable] operator='.max');
	public TemporalPrimaryExprElements getTemporalPrimaryExprAccess() {
		return pTemporalPrimaryExpr;
	}
	
	public ParserRule getTemporalPrimaryExprRule() {
		return getTemporalPrimaryExprAccess().getRule();
	}
	
	//    // |Trigger;
	//PredicateOrPatternReferrable:
	//  Pattern | Predicate;
	public PredicateOrPatternReferrableElements getPredicateOrPatternReferrableAccess() {
		return pPredicateOrPatternReferrable;
	}
	
	public ParserRule getPredicateOrPatternReferrableRule() {
		return getPredicateOrPatternReferrableAccess().getRule();
	}
	
	////now subrange can be defined with define declaration
	//Subrange:
	//    from=SizeDefineDecl '..' to=SizeDefineDecl;
	public SubrangeElements getSubrangeAccess() {
		return pSubrange;
	}
	
	public ParserRule getSubrangeRule() {
		return getSubrangeAccess().getRule();
	}
	
	//Constant returns TemporalExpression:
	//    {Constant}
	//      (booleanValue='FALSE'
	//      | booleanValue='false'
	//      | booleanValue='TRUE'
	//      | booleanValue='true'
	//      | integerValue=INT);
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Trigger:
	//{Trigger} 'trig'  (initPointer=[DefineRegExpDecl] | initRegExp=RegExp ) '|=>' (effectPointer=[DefineRegExpDecl] | effectRegExp=RegExp);
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//RegExp:
	//     BinaryRegExp;
	public RegExpElements getRegExpAccess() {
		return pRegExp;
	}
	
	public ParserRule getRegExpRule() {
		return getRegExpAccess().getRule();
	}
	
	//BinaryRegExp returns RegExp:
	//    UnaryRegExp ({BinaryRegExp.left=current} (op=('&' | '|'))? right=UnaryRegExp)*;
	public BinaryRegExpElements getBinaryRegExpAccess() {
		return pBinaryRegExp;
	}
	
	public ParserRule getBinaryRegExpRule() {
		return getBinaryRegExpAccess().getRule();
	}
	
	//UnaryRegExp returns RegExp:
	//    CompRegExp ({UnaryRegExp.left=current}
	//       ((kleened?='*')|
	//        (questionMark?='?')|
	//        (plus?='+')|
	//       (haveExactRepetition?='{' exactRepetition=INT '}')|
	//       (haveAtLeast?='{' atLeast=INT ',' '}')|
	//       (haveRange?='{' (from=INT | fromDefine=[DefineDecl]) ',' (to=INT | toDefine=[DefineDecl]) '}')))?;
	public UnaryRegExpElements getUnaryRegExpAccess() {
		return pUnaryRegExp;
	}
	
	public ParserRule getUnaryRegExpRule() {
		return getUnaryRegExpAccess().getRule();
	}
	
	//CompRegExp returns RegExp:
	//    PrimaryRegExp | ({CompRegExp} (comp='~') left=CompRegExp);
	public CompRegExpElements getCompRegExpAccess() {
		return pCompRegExp;
	}
	
	public ParserRule getCompRegExpRule() {
		return getCompRegExpAccess().getRule();
	}
	
	//PrimaryRegExp returns RegExp:
	//    '(' RegExp ')' | val=('TRUE' |'FALSE' | 'true' | 'false') | assrt=BooleanTerm  | empty?='()';
	public PrimaryRegExpElements getPrimaryRegExpAccess() {
		return pPrimaryRegExp;
	}
	
	public ParserRule getPrimaryRegExpRule() {
		return getPrimaryRegExpAccess().getRule();
	}
	
	// //| (neg?='!')? pointer=[VarDecl]
	//BooleanTerm:
	//    {BooleanTerm} '[' relExpr=TemporalInExpr ']';
	public BooleanTermElements getBooleanTermAccess() {
		return pBooleanTerm;
	}
	
	public ParserRule getBooleanTermRule() {
		return getBooleanTermAccess().getRule();
	}
	
	//ValueInRange:
	//     const=[TypeConstant] | int=INT | (from=INT multi?='-' to=INT) | booleanValue=('TRUE' |'FALSE' | 'true' | 'false');
	public ValueInRangeElements getValueInRangeAccess() {
		return pValueInRange;
	}
	
	public ParserRule getValueInRangeRule() {
		return getValueInRangeAccess().getRule();
	}
	
	//// UnaryRegExp returns RegExp:
	////     left = PrimaryRegExp  (
	////        (kleened?='*')|
	////         (questionMark?='?')|
	////         (plus?='+')|
	////        (haveExactRepetition?='{' exactRepetition=INT '}')|
	////        (haveAtLeast?='{' atLeast=INT ',' '}')|
	////        (haveRange?='{' from=INT ',' to=INT '}'))?;
	//// PrimaryRegExp returns RegExp:
	////     (comp?='~')? left = AtomicRegExp;
	////AtomicRegExp returns RegExp:
	////    '(' RegExp ')' | (neg?='!')? var=[VarDecl]  (((neq='!=') | '=') (const=[TypeConstant] | int=INT))? | val=('TRUE' |'FALSE' | 'true' | 'false') | rangedVar=RangedVar  | empty?= '()';
	////RangedVar:
	////    var=[VarDecl] ((neq='!=') | '=') '[' (values+=ValueInRange)+ ']';
	////quantifier expression - a temporal logic expression with quantifiers.
	//QuantifierExpr returns TemporalExpression:
	//  TemporalInExpr
	//  |{QuantifierExpr}
	//  (operator=('forall' | 'exists') domainVar=DomainVarDecl '.' temporalExpr=(QuantifierExpr));
	public QuantifierExprElements getQuantifierExprAccess() {
		return pQuantifierExpr;
	}
	
	public ParserRule getQuantifierExprRule() {
		return getQuantifierExprAccess().getRule();
	}
	
	////declaration of a var from domain for quantifier
	//DomainVarDecl:
	//    name=ID 'in' domainType=(VarType);
	public DomainVarDeclElements getDomainVarDeclAccess() {
		return pDomainVarDecl;
	}
	
	public ParserRule getDomainVarDeclRule() {
		return getDomainVarDeclAccess().getRule();
	}
	
	////all the declaration that can determine size of array and range of int
	//SizeDefineDecl:
	//    value=INT | name=[DefineDecl] | '(' arithExp=TemporalExpression ')';
	public SizeDefineDeclElements getSizeDefineDeclAccess() {
		return pSizeDefineDecl;
	}
	
	public ParserRule getSizeDefineDeclRule() {
		return getSizeDefineDeclAccess().getRule();
	}
	
	//TOK_SEMI:
	//    ';';
	public TOK_SEMIElements getTOK_SEMIAccess() {
		return pTOK_SEMI;
	}
	
	public ParserRule getTOK_SEMIRule() {
		return getTOK_SEMIAccess().getRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//    ('//' | '--') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
