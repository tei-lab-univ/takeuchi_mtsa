/**
 * generated by Xtext 2.25.0
 */
package tau.smlab.syntech.spectra;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Var</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link tau.smlab.syntech.spectra.Var#getKind <em>Kind</em>}</li>
 *   <li>{@link tau.smlab.syntech.spectra.Var#getVar <em>Var</em>}</li>
 * </ul>
 *
 * @see tau.smlab.syntech.spectra.SpectraPackage#getVar()
 * @model
 * @generated
 */
public interface Var extends Decl
{
  /**
   * Returns the value of the '<em><b>Kind</b></em>' attribute.
   * The literals are from the enumeration {@link tau.smlab.syntech.spectra.VarOwner}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Kind</em>' attribute.
   * @see tau.smlab.syntech.spectra.VarOwner
   * @see #setKind(VarOwner)
   * @see tau.smlab.syntech.spectra.SpectraPackage#getVar_Kind()
   * @model
   * @generated
   */
  VarOwner getKind();

  /**
   * Sets the value of the '{@link tau.smlab.syntech.spectra.Var#getKind <em>Kind</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Kind</em>' attribute.
   * @see tau.smlab.syntech.spectra.VarOwner
   * @see #getKind()
   * @generated
   */
  void setKind(VarOwner value);

  /**
   * Returns the value of the '<em><b>Var</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Var</em>' containment reference.
   * @see #setVar(VarDecl)
   * @see tau.smlab.syntech.spectra.SpectraPackage#getVar_Var()
   * @model containment="true"
   * @generated
   */
  VarDecl getVar();

  /**
   * Sets the value of the '{@link tau.smlab.syntech.spectra.Var#getVar <em>Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Var</em>' containment reference.
   * @see #getVar()
   * @generated
   */
  void setVar(VarDecl value);

} // Var
