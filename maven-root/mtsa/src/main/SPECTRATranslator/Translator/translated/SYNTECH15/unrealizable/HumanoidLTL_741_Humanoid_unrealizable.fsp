//unrealizable/HumanoidLTL_741_Humanoid_unrealizable automatically_translated 

set ControlledActions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd, rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd, headmotor.fwd, headmotor.bwd, headmotor.stop, nextmovemode.fwd, nextmovemode.bwd, nextmovemode.turn_left_1, nextmovemode.turn_left_2, spec_state.q0, spec_state.q1, spec_state.q2, spec_state.q3, search.m0, search.m1, next_head.n, next_head.so, tick, env_constraint[2864].respondsto.responded, not_env_constraint[2864].respondsto.responded, env_constraint[2875].respondsto.responded, not_env_constraint[2875].respondsto.responded, prev_2850_234, not_prev_2850_234, prev_2851_235, not_prev_2851_235, prev_2853_236, not_prev_2853_236}
set UncontrolledActions = {obstacle.clear, obstacle.blocked, noise.quiet, noise.noise, heading.n, heading.so, button.free, button.pressed, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Obstacle_Actions = {obstacle.clear, obstacle.blocked}
fluent OBSTACLE_CLEAR = <obstacle.clear, Obstacle_Actions\{obstacle.clear}>
fluent OBSTACLE_BLOCKED = <obstacle.blocked, Obstacle_Actions\{obstacle.blocked}>

set Noise_Actions = {noise.quiet, noise.noise}
fluent NOISE_QUIET = <noise.quiet, Noise_Actions\{noise.quiet}>
fluent NOISE_NOISE = <noise.noise, Noise_Actions\{noise.noise}>

set Heading_Actions = {heading.n, heading.so}
fluent HEADING_N = <heading.n, Heading_Actions\{heading.n}>
fluent HEADING_SO = <heading.so, Heading_Actions\{heading.so}>

set Button_Actions = {button.free, button.pressed}
fluent BUTTON_FREE = <button.free, Button_Actions\{button.free}>
fluent BUTTON_PRESSED = <button.pressed, Button_Actions\{button.pressed}>

set LeftMotor_Actions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd}
fluent LEFTMOTOR_FWD = <leftmotor.fwd, LeftMotor_Actions\{leftmotor.fwd}>
fluent LEFTMOTOR_BWD = <leftmotor.bwd, LeftMotor_Actions\{leftmotor.bwd}>
fluent LEFTMOTOR_STOP = <leftmotor.stop, LeftMotor_Actions\{leftmotor.stop}>
fluent LEFTMOTOR_TURN_FWD = <leftmotor.turn_fwd, LeftMotor_Actions\{leftmotor.turn_fwd}>
fluent LEFTMOTOR_TURN_BWD = <leftmotor.turn_bwd, LeftMotor_Actions\{leftmotor.turn_bwd}>
fluent LEFTMOTOR_CALIB_TURN = <leftmotor.calib_turn, LeftMotor_Actions\{leftmotor.calib_turn}>
fluent LEFTMOTOR_CALIB_FWD = <leftmotor.calib_fwd, LeftMotor_Actions\{leftmotor.calib_fwd}>

set RightMotor_Actions = {rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd}
fluent RIGHTMOTOR_FWD = <rightmotor.fwd, RightMotor_Actions\{rightmotor.fwd}>
fluent RIGHTMOTOR_BWD = <rightmotor.bwd, RightMotor_Actions\{rightmotor.bwd}>
fluent RIGHTMOTOR_STOP = <rightmotor.stop, RightMotor_Actions\{rightmotor.stop}>
fluent RIGHTMOTOR_TURN_FWD = <rightmotor.turn_fwd, RightMotor_Actions\{rightmotor.turn_fwd}>
fluent RIGHTMOTOR_TURN_BWD = <rightmotor.turn_bwd, RightMotor_Actions\{rightmotor.turn_bwd}>
fluent RIGHTMOTOR_CALIB_TURN = <rightmotor.calib_turn, RightMotor_Actions\{rightmotor.calib_turn}>
fluent RIGHTMOTOR_CALIB_FWD = <rightmotor.calib_fwd, RightMotor_Actions\{rightmotor.calib_fwd}>

set HeadMotor_Actions = {headmotor.fwd, headmotor.bwd, headmotor.stop}
fluent HEADMOTOR_FWD = <headmotor.fwd, HeadMotor_Actions\{headmotor.fwd}>
fluent HEADMOTOR_BWD = <headmotor.bwd, HeadMotor_Actions\{headmotor.bwd}>
fluent HEADMOTOR_STOP = <headmotor.stop, HeadMotor_Actions\{headmotor.stop}>

set NextMoveMode_Actions = {nextmovemode.fwd, nextmovemode.bwd, nextmovemode.turn_left_1, nextmovemode.turn_left_2}
fluent NEXTMOVEMODE_FWD = <nextmovemode.fwd, NextMoveMode_Actions\{nextmovemode.fwd}>
fluent NEXTMOVEMODE_BWD = <nextmovemode.bwd, NextMoveMode_Actions\{nextmovemode.bwd}>
fluent NEXTMOVEMODE_TURN_LEFT_1 = <nextmovemode.turn_left_1, NextMoveMode_Actions\{nextmovemode.turn_left_1}>
fluent NEXTMOVEMODE_TURN_LEFT_2 = <nextmovemode.turn_left_2, NextMoveMode_Actions\{nextmovemode.turn_left_2}>

set Spec_state_Actions = {spec_state.q0, spec_state.q1, spec_state.q2, spec_state.q3}
fluent SPEC_STATE_Q0 = <spec_state.q0, Spec_state_Actions\{spec_state.q0}>
fluent SPEC_STATE_Q1 = <spec_state.q1, Spec_state_Actions\{spec_state.q1}>
fluent SPEC_STATE_Q2 = <spec_state.q2, Spec_state_Actions\{spec_state.q2}>
fluent SPEC_STATE_Q3 = <spec_state.q3, Spec_state_Actions\{spec_state.q3}>

set Search_Actions = {search.m0, search.m1}
fluent SEARCH_M0 = <search.m0, Search_Actions\{search.m0}>
fluent SEARCH_M1 = <search.m1, Search_Actions\{search.m1}>

set Next_head_Actions = {next_head.n, next_head.so}
fluent NEXT_HEAD_N = <next_head.n, Next_head_Actions\{next_head.n}>
fluent NEXT_HEAD_SO = <next_head.so, Next_head_Actions\{next_head.so}>

set ENV_CONSTRAINT_2864_respondsTo_responded_Actions = {env_constraint[2864].respondsto.responded, not_env_constraint[2864].respondsto.responded}
fluent ENV_CONSTRAINT_2864_RESPONDSTO_RESPONDED = <env_constraint[2864].respondsto.responded, ENV_CONSTRAINT_2864_respondsTo_responded_Actions\{env_constraint[2864].respondsto.responded}>

set ENV_CONSTRAINT_2875_respondsTo_responded_Actions = {env_constraint[2875].respondsto.responded, not_env_constraint[2875].respondsto.responded}
fluent ENV_CONSTRAINT_2875_RESPONDSTO_RESPONDED = <env_constraint[2875].respondsto.responded, ENV_CONSTRAINT_2875_respondsTo_responded_Actions\{env_constraint[2875].respondsto.responded}>

set PREV_2850_234_Actions = {prev_2850_234, not_prev_2850_234}
fluent PREV_2850_234 = <prev_2850_234, PREV_2850_234_Actions\{prev_2850_234}>

set PREV_2851_235_Actions = {prev_2851_235, not_prev_2851_235}
fluent PREV_2851_235 = <prev_2851_235, PREV_2851_235_Actions\{prev_2851_235}>

set PREV_2853_236_Actions = {prev_2853_236, not_prev_2853_236}
fluent PREV_2853_236 = <prev_2853_236, PREV_2853_236_Actions\{prev_2853_236}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && (SEARCH_M0 && SPEC_STATE_Q0)))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && ENV_CONSTRAINT_2864_RESPONDSTO_RESPONDED))
minimal || Initial_1_min =  Initial_1.
//property divided into 1 subproperties.
ltl_property Initial_2 = (!tick W (tick && ENV_CONSTRAINT_2875_RESPONDSTO_RESPONDED))
minimal || Initial_2_min =  Initial_2.
//property divided into 1 subproperties.
ltl_property Initial_3 = (!tick W (tick && !PREV_2850_234))
minimal || Initial_3_min =  Initial_3.
//property divided into 1 subproperties.
ltl_property Initial_4 = (!tick W (tick && !PREV_2851_235))
minimal || Initial_4_min =  Initial_4.
//property divided into 1 subproperties.
ltl_property Initial_5 = (!tick W (tick && !PREV_2853_236))
minimal || Initial_5_min =  Initial_5.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min ||  Initial_2_min ||  Initial_3_min ||  Initial_4_min ||  Initial_5_min).



//property divided into 1 subproperties.
ltl_property G0 = [](tick -> NEXT_HEAD_N)
minimal ||G0_min = G0.

//property divided into 1 subproperties.
assert G_l0 = (tick && (NEXTMOVEMODE_FWD && SEARCH_M0))

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> (((!SPEC_STATE_Q0 || !NEXTMOVEMODE_FWD) || X(!tick W (tick && !NEXTMOVEMODE_BWD))) || X(!tick W (tick && SPEC_STATE_Q1))))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> (((!SPEC_STATE_Q1 || !NEXTMOVEMODE_BWD) || X(!tick W (tick && !NEXTMOVEMODE_FWD))) || X(!tick W (tick && SPEC_STATE_Q2))))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
ltl_property G3 = [](tick -> ((!SPEC_STATE_Q2 || !NEXTMOVEMODE_FWD) || X(!tick W (tick && !NEXTMOVEMODE_BWD))))
minimal ||G3_min = G3.

//property divided into 1 subproperties.
ltl_property G4 = [](tick -> ((NEXTMOVEMODE_TURN_LEFT_1 || NEXTMOVEMODE_TURN_LEFT_2) -> X(!tick W (tick && SPEC_STATE_Q0))))
minimal ||G4_min = G4.

//property divided into 1 subproperties.
ltl_property G5 = [](tick -> ((((PREV_2850_234 && NOISE_NOISE) && (!(HEADING_N <-> NEXT_HEAD_N) || !(HEADING_SO <-> NEXT_HEAD_SO))) && !BUTTON_PRESSED) -> SEARCH_M1))
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> ((PREV_2851_235 && ((HEADING_N <-> NEXT_HEAD_N) && (HEADING_SO <-> NEXT_HEAD_SO))) -> SEARCH_M0))
minimal ||G6_min = G6.

//property divided into 1 subproperties.
ltl_property G7 = [](tick -> ((PREV_2851_235 && (!(HEADING_N <-> NEXT_HEAD_N) || !(HEADING_SO <-> NEXT_HEAD_SO))) -> SEARCH_M1))
minimal ||G7_min = G7.

//property divided into 1 subproperties.
ltl_property G8 = [](tick -> ((X(!tick W (tick && !OBSTACLE_BLOCKED)) || PREV_2853_236) || X(!tick W (tick && !NEXTMOVEMODE_FWD))))
minimal ||G8_min = G8.

//property divided into 2 subproperties.
ltl_property G9 = [](tick -> ((!NEXTMOVEMODE_BWD || X(!tick W (tick && !NEXTMOVEMODE_FWD))) || X(!tick W (tick && (LEFTMOTOR_FWD && RIGHTMOTOR_BWD)))))
minimal ||G9_min = G9.
ltl_property G10 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_FWD || !RIGHTMOTOR_BWD))) || (NEXTMOVEMODE_BWD && X(!tick W (tick && NEXTMOVEMODE_FWD)))))
minimal ||G10_min = G10.

//property divided into 2 subproperties.
ltl_property G11 = [](tick -> ((!NEXTMOVEMODE_FWD || X(!tick W (tick && !NEXTMOVEMODE_BWD))) || X(!tick W (tick && (LEFTMOTOR_BWD && RIGHTMOTOR_FWD)))))
minimal ||G11_min = G11.
ltl_property G12 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_BWD || !RIGHTMOTOR_FWD))) || (NEXTMOVEMODE_FWD && X(!tick W (tick && NEXTMOVEMODE_BWD)))))
minimal ||G12_min = G12.

//property divided into 1 subproperties.
ltl_property G13 = [](tick -> (X(!tick W (tick && !NEXTMOVEMODE_BWD)) || (NEXTMOVEMODE_FWD || NEXTMOVEMODE_BWD)))
minimal ||G13_min = G13.

//property divided into 1 subproperties.
ltl_property G14 = [](tick -> (NEXTMOVEMODE_TURN_LEFT_1 -> X(!tick W (tick && (LEFTMOTOR_FWD && RIGHTMOTOR_TURN_FWD)))))
minimal ||G14_min = G14.

//property divided into 1 subproperties.
ltl_property G15 = [](tick -> (NEXTMOVEMODE_TURN_LEFT_2 -> X(!tick W (tick && (LEFTMOTOR_BWD && RIGHTMOTOR_TURN_BWD)))))
minimal ||G15_min = G15.

//property divided into 2 subproperties.
ltl_property G16 = [](tick -> (!NEXTMOVEMODE_TURN_LEFT_1 || X(!tick W (tick && NEXTMOVEMODE_TURN_LEFT_2))))
minimal ||G16_min = G16.
ltl_property G17 = [](tick -> (X(!tick W (tick && !NEXTMOVEMODE_TURN_LEFT_2)) || NEXTMOVEMODE_TURN_LEFT_1))
minimal ||G17_min = G17.

//property divided into 1 subproperties.
ltl_property G18 = [](tick -> (!(NEXTMOVEMODE_TURN_LEFT_1 || NEXTMOVEMODE_TURN_LEFT_2) -> X(!tick W (tick && !(((LEFTMOTOR_TURN_BWD || RIGHTMOTOR_TURN_BWD) || LEFTMOTOR_TURN_FWD) || RIGHTMOTOR_TURN_FWD)))))
minimal ||G18_min = G18.

//property divided into 2 subproperties.
ltl_property G19 = [](tick -> ((!NEXTMOVEMODE_FWD || X(!tick W (tick && !NEXTMOVEMODE_TURN_LEFT_1))) || X(!tick W (tick && (LEFTMOTOR_CALIB_TURN && RIGHTMOTOR_CALIB_TURN)))))
minimal ||G19_min = G19.
ltl_property G20 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_CALIB_TURN || !RIGHTMOTOR_CALIB_TURN))) || (NEXTMOVEMODE_FWD && X(!tick W (tick && NEXTMOVEMODE_TURN_LEFT_1)))))
minimal ||G20_min = G20.

//property divided into 2 subproperties.
ltl_property G21 = [](tick -> ((!NEXTMOVEMODE_FWD || !PREV_2853_236) || X(!tick W (tick && (LEFTMOTOR_CALIB_FWD && RIGHTMOTOR_CALIB_FWD)))))
minimal ||G21_min = G21.
ltl_property G22 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_CALIB_FWD || !RIGHTMOTOR_CALIB_FWD))) || (NEXTMOVEMODE_FWD && PREV_2853_236)))
minimal ||G22_min = G22.

//property divided into 1 subproperties.
ltl_property G23 = [](tick -> (NEXTMOVEMODE_BWD -> X(!tick W (tick && !NEXTMOVEMODE_TURN_LEFT_1))))
minimal ||G23_min = G23.


//property divided into 2 subproperties.
ltl_property G24 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_2864_RESPONDSTO_RESPONDED)) || (((HEADING_N <-> NEXT_HEAD_N) && (HEADING_SO <-> NEXT_HEAD_SO)) || (ENV_CONSTRAINT_2864_RESPONDSTO_RESPONDED && !SEARCH_M1))))
minimal ||G24_min = G24.
ltl_property G25 = [](tick -> (((!(HEADING_N <-> NEXT_HEAD_N) || !(HEADING_SO <-> NEXT_HEAD_SO)) && (!ENV_CONSTRAINT_2864_RESPONDSTO_RESPONDED || SEARCH_M1)) || X(!tick W (tick && ENV_CONSTRAINT_2864_RESPONDSTO_RESPONDED))))
minimal ||G25_min = G25.


//property divided into 2 subproperties.
ltl_property G26 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_2875_RESPONDSTO_RESPONDED)) || ((NEXTMOVEMODE_TURN_LEFT_2 && OBSTACLE_CLEAR) || (ENV_CONSTRAINT_2875_RESPONDSTO_RESPONDED && !NEXTMOVEMODE_TURN_LEFT_2))))
minimal ||G26_min = G26.
ltl_property G27 = [](tick -> (((!NEXTMOVEMODE_TURN_LEFT_2 || !OBSTACLE_CLEAR) && (!ENV_CONSTRAINT_2875_RESPONDSTO_RESPONDED || NEXTMOVEMODE_TURN_LEFT_2)) || X(!tick W (tick && ENV_CONSTRAINT_2875_RESPONDSTO_RESPONDED))))
minimal ||G27_min = G27.


//property divided into 2 subproperties.
ltl_property G28 = [](tick -> (X(!tick W (tick && !PREV_2850_234)) || SEARCH_M0))
minimal ||G28_min = G28.
ltl_property G29 = [](tick -> (!SEARCH_M0 || X(!tick W (tick && PREV_2850_234))))
minimal ||G29_min = G29.


//property divided into 2 subproperties.
ltl_property G30 = [](tick -> (X(!tick W (tick && !PREV_2851_235)) || SEARCH_M1))
minimal ||G30_min = G30.
ltl_property G31 = [](tick -> (!SEARCH_M1 || X(!tick W (tick && PREV_2851_235))))
minimal ||G31_min = G31.


//property divided into 2 subproperties.
ltl_property G32 = [](tick -> (X(!tick W (tick && !PREV_2853_236)) || NEXTMOVEMODE_TURN_LEFT_2))
minimal ||G32_min = G32.
ltl_property G33 = [](tick -> (!NEXTMOVEMODE_TURN_LEFT_2 || X(!tick W (tick && PREV_2853_236))))
minimal ||G33_min = G33.

//property divided into 1 subproperties.
constraint A0 = [](tock -> (((!NEXTMOVEMODE_FWD && !NEXTMOVEMODE_BWD) || ((HEADING_N <-> NEXT_HEAD_N) && (HEADING_SO <-> NEXT_HEAD_SO))) || (((X(!tock W (tock && (HEADING_N))) && !NEXT_HEAD_N) || (NEXT_HEAD_N && X(!tock W (tock && (!HEADING_N))))) || ((X(!tock W (tock && (HEADING_SO))) && !NEXT_HEAD_SO) || (NEXT_HEAD_SO && X(!tock W (tock && (!HEADING_SO))))))))
minimal ||A0_min = A0.

//property divided into 1 subproperties.
constraint A1 = [](tock -> ((NEXTMOVEMODE_FWD && OBSTACLE_BLOCKED) -> X(!tock W (tock && OBSTACLE_BLOCKED))))
minimal ||A1_min = A1.

//property divided into 1 subproperties.
constraint A2 = [](tock -> ((NEXTMOVEMODE_BWD && OBSTACLE_CLEAR) -> X(!tock W (tock && !OBSTACLE_BLOCKED))))
minimal ||A2_min = A2.

//property divided into 1 subproperties.
assert A_l0 = (tock && ENV_CONSTRAINT_2864_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l1 = (tock && ENV_CONSTRAINT_2875_RESPONDSTO_RESPONDED)



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0_min || A1_min || A2_min || G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min || G22_min || G23_min || G24_min || G25_min || G26_min || G27_min || G28_min || G29_min || G30_min || G31_min || G32_min || G33_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && A_clock) -> ([]<>G_l0))
assert ASM =   ([]<>A_l0 && []<>A_l1 && A_clock)
assert GNT = ([]<>G_l0)
progress Time  = {tick}
