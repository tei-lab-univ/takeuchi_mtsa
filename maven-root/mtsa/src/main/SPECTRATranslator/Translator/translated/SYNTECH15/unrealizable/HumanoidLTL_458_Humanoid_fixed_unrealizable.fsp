//unrealizable/HumanoidLTL_458_Humanoid_fixed_unrealizable automatically_translated 

set ControlledActions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd, rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd, headmotor.fwd, headmotor.bwd, headmotor.stop, outputmovemode.fwd, outputmovemode.bwd, outputmovemode.turn_left_1, outputmovemode.turn_left_2, tick}
set UncontrolledActions = {obstacle.clear, obstacle.blocked, inputmovemode.fwd, inputmovemode.bwd, inputmovemode.turn_left_1, inputmovemode.turn_left_2, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Obstacle_Actions = {obstacle.clear, obstacle.blocked}
fluent OBSTACLE_CLEAR = <obstacle.clear, Obstacle_Actions\{obstacle.clear}>
fluent OBSTACLE_BLOCKED = <obstacle.blocked, Obstacle_Actions\{obstacle.blocked}>

set InputMoveMode_Actions = {inputmovemode.fwd, inputmovemode.bwd, inputmovemode.turn_left_1, inputmovemode.turn_left_2}
fluent INPUTMOVEMODE_FWD = <inputmovemode.fwd, InputMoveMode_Actions\{inputmovemode.fwd}>
fluent INPUTMOVEMODE_BWD = <inputmovemode.bwd, InputMoveMode_Actions\{inputmovemode.bwd}>
fluent INPUTMOVEMODE_TURN_LEFT_1 = <inputmovemode.turn_left_1, InputMoveMode_Actions\{inputmovemode.turn_left_1}>
fluent INPUTMOVEMODE_TURN_LEFT_2 = <inputmovemode.turn_left_2, InputMoveMode_Actions\{inputmovemode.turn_left_2}>

set LeftMotor_Actions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd}
fluent LEFTMOTOR_FWD = <leftmotor.fwd, LeftMotor_Actions\{leftmotor.fwd}>
fluent LEFTMOTOR_BWD = <leftmotor.bwd, LeftMotor_Actions\{leftmotor.bwd}>
fluent LEFTMOTOR_STOP = <leftmotor.stop, LeftMotor_Actions\{leftmotor.stop}>
fluent LEFTMOTOR_TURN_FWD = <leftmotor.turn_fwd, LeftMotor_Actions\{leftmotor.turn_fwd}>
fluent LEFTMOTOR_TURN_BWD = <leftmotor.turn_bwd, LeftMotor_Actions\{leftmotor.turn_bwd}>
fluent LEFTMOTOR_CALIB_TURN = <leftmotor.calib_turn, LeftMotor_Actions\{leftmotor.calib_turn}>
fluent LEFTMOTOR_CALIB_FWD = <leftmotor.calib_fwd, LeftMotor_Actions\{leftmotor.calib_fwd}>

set RightMotor_Actions = {rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd}
fluent RIGHTMOTOR_FWD = <rightmotor.fwd, RightMotor_Actions\{rightmotor.fwd}>
fluent RIGHTMOTOR_BWD = <rightmotor.bwd, RightMotor_Actions\{rightmotor.bwd}>
fluent RIGHTMOTOR_STOP = <rightmotor.stop, RightMotor_Actions\{rightmotor.stop}>
fluent RIGHTMOTOR_TURN_FWD = <rightmotor.turn_fwd, RightMotor_Actions\{rightmotor.turn_fwd}>
fluent RIGHTMOTOR_TURN_BWD = <rightmotor.turn_bwd, RightMotor_Actions\{rightmotor.turn_bwd}>
fluent RIGHTMOTOR_CALIB_TURN = <rightmotor.calib_turn, RightMotor_Actions\{rightmotor.calib_turn}>
fluent RIGHTMOTOR_CALIB_FWD = <rightmotor.calib_fwd, RightMotor_Actions\{rightmotor.calib_fwd}>

set HeadMotor_Actions = {headmotor.fwd, headmotor.bwd, headmotor.stop}
fluent HEADMOTOR_FWD = <headmotor.fwd, HeadMotor_Actions\{headmotor.fwd}>
fluent HEADMOTOR_BWD = <headmotor.bwd, HeadMotor_Actions\{headmotor.bwd}>
fluent HEADMOTOR_STOP = <headmotor.stop, HeadMotor_Actions\{headmotor.stop}>

set OutputMoveMode_Actions = {outputmovemode.fwd, outputmovemode.bwd, outputmovemode.turn_left_1, outputmovemode.turn_left_2}
fluent OUTPUTMOVEMODE_FWD = <outputmovemode.fwd, OutputMoveMode_Actions\{outputmovemode.fwd}>
fluent OUTPUTMOVEMODE_BWD = <outputmovemode.bwd, OutputMoveMode_Actions\{outputmovemode.bwd}>
fluent OUTPUTMOVEMODE_TURN_LEFT_1 = <outputmovemode.turn_left_1, OutputMoveMode_Actions\{outputmovemode.turn_left_1}>
fluent OUTPUTMOVEMODE_TURN_LEFT_2 = <outputmovemode.turn_left_2, OutputMoveMode_Actions\{outputmovemode.turn_left_2}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property G0 = [](tick -> ((INPUTMOVEMODE_FWD && OBSTACLE_BLOCKED) -> ((OUTPUTMOVEMODE_TURN_LEFT_1 && LEFTMOTOR_CALIB_TURN) && RIGHTMOTOR_CALIB_TURN)))
minimal ||G0_min = G0.

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> ((INPUTMOVEMODE_BWD && OBSTACLE_CLEAR) -> ((OUTPUTMOVEMODE_FWD && LEFTMOTOR_FWD) && RIGHTMOTOR_BWD)))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> ((INPUTMOVEMODE_FWD && OBSTACLE_CLEAR) -> (LEFTMOTOR_FWD && RIGHTMOTOR_FWD)))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
ltl_property G3 = [](tick -> (OBSTACLE_BLOCKED -> !OUTPUTMOVEMODE_FWD))
minimal ||G3_min = G3.

//property divided into 1 subproperties.
ltl_property G4 = [](tick -> (INPUTMOVEMODE_TURN_LEFT_1 <-> OUTPUTMOVEMODE_TURN_LEFT_2))
minimal ||G4_min = G4.

//property divided into 1 subproperties.
ltl_property G5 = [](tick -> (INPUTMOVEMODE_TURN_LEFT_1 -> (LEFTMOTOR_FWD && RIGHTMOTOR_TURN_FWD)))
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> (INPUTMOVEMODE_TURN_LEFT_2 -> (LEFTMOTOR_BWD && RIGHTMOTOR_TURN_BWD)))
minimal ||G6_min = G6.

//property divided into 1 subproperties.
ltl_property G7 = [](tick -> (!(INPUTMOVEMODE_TURN_LEFT_1 || INPUTMOVEMODE_TURN_LEFT_2) -> !((LEFTMOTOR_TURN_BWD || RIGHTMOTOR_TURN_BWD) || (LEFTMOTOR_TURN_FWD && RIGHTMOTOR_TURN_FWD))))
minimal ||G7_min = G7.

//property divided into 1 subproperties.
ltl_property G8 = [](tick -> ((INPUTMOVEMODE_TURN_LEFT_1 || INPUTMOVEMODE_TURN_LEFT_2) -> HEADMOTOR_STOP))
minimal ||G8_min = G8.

//property divided into 1 subproperties.
ltl_property G9 = [](tick -> ((INPUTMOVEMODE_TURN_LEFT_2 && !OUTPUTMOVEMODE_TURN_LEFT_1) -> (LEFTMOTOR_CALIB_FWD && RIGHTMOTOR_CALIB_FWD)))
minimal ||G9_min = G9.

//property divided into 1 subproperties.
ltl_property G10 = [](tick -> ((INPUTMOVEMODE_TURN_LEFT_2 && OBSTACLE_CLEAR) -> OUTPUTMOVEMODE_FWD))
minimal ||G10_min = G10.

fluent True = <tick, tock>
assert G_l0 = (True || !True)


||Domain_independent = (Full_Clock).
||Env = (Domain_independent ||
		G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = ((A_clock) -> ([]<>G_l0))
assert ASM =   (A_clock)
assert GNT = ([]<>G_l0)
progress Time  = {tick}
