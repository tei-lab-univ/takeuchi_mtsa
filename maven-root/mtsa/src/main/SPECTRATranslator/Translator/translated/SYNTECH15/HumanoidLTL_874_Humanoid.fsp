//HumanoidLTL_874_Humanoid automatically_translated 

set ControlledActions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn_left, leftmotor.calib_turn_right, leftmotor.calib_fwd_left, leftmotor.calib_fwd_right, rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn_left, rightmotor.calib_turn_right, rightmotor.calib_fwd_left, rightmotor.calib_fwd_right, headmotor.fwd, headmotor.bwd, headmotor.stop, spec_nextmovemode.fwd, spec_nextmovemode.bwd, spec_nextmovemode.turn_right, spec_nextmovemode.turn_left, spec_specstate.q0, spec_specstate.q1, spec_specstate.q2, spec_specstate.q3, spec_turnstate.t0, spec_turnstate.t1, spec_turnstate.t2, spec_turnstate.t3, spec_nexthead.n, spec_nexthead.ea, spec_nexthead.so, spec_nexthead.w, tick, sys_constraint[1089].respondsto.responded, not_sys_constraint[1089].respondsto.responded, env_constraint[1115].respondsto.responded, not_env_constraint[1115].respondsto.responded, env_constraint[1117].respondsto.responded, not_env_constraint[1117].respondsto.responded, env_constraint[1118].respondsto.responded, not_env_constraint[1118].respondsto.responded, prev_1101_91, not_prev_1101_91, prev_1110_92, not_prev_1110_92, prev_1110_93, not_prev_1110_93, prev_1111_94, not_prev_1111_94, prev_1111_95, not_prev_1111_95, prev_1114_96, not_prev_1114_96}
set UncontrolledActions = {obstacle.clear, obstacle.blocked, noise.quiet, noise.noise, heading.n, heading.ea, heading.so, heading.w, button.free, button.pressed, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Obstacle_Actions = {obstacle.clear, obstacle.blocked}
fluent OBSTACLE_CLEAR = <obstacle.clear, Obstacle_Actions\{obstacle.clear}>
fluent OBSTACLE_BLOCKED = <obstacle.blocked, Obstacle_Actions\{obstacle.blocked}>

set Noise_Actions = {noise.quiet, noise.noise}
fluent NOISE_QUIET = <noise.quiet, Noise_Actions\{noise.quiet}>
fluent NOISE_NOISE = <noise.noise, Noise_Actions\{noise.noise}>

set Heading_Actions = {heading.n, heading.ea, heading.so, heading.w}
fluent HEADING_N = <heading.n, Heading_Actions\{heading.n}>
fluent HEADING_EA = <heading.ea, Heading_Actions\{heading.ea}>
fluent HEADING_SO = <heading.so, Heading_Actions\{heading.so}>
fluent HEADING_W = <heading.w, Heading_Actions\{heading.w}>

set Button_Actions = {button.free, button.pressed}
fluent BUTTON_FREE = <button.free, Button_Actions\{button.free}>
fluent BUTTON_PRESSED = <button.pressed, Button_Actions\{button.pressed}>

set LeftMotor_Actions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn_left, leftmotor.calib_turn_right, leftmotor.calib_fwd_left, leftmotor.calib_fwd_right}
fluent LEFTMOTOR_FWD = <leftmotor.fwd, LeftMotor_Actions\{leftmotor.fwd}>
fluent LEFTMOTOR_BWD = <leftmotor.bwd, LeftMotor_Actions\{leftmotor.bwd}>
fluent LEFTMOTOR_STOP = <leftmotor.stop, LeftMotor_Actions\{leftmotor.stop}>
fluent LEFTMOTOR_TURN_FWD = <leftmotor.turn_fwd, LeftMotor_Actions\{leftmotor.turn_fwd}>
fluent LEFTMOTOR_TURN_BWD = <leftmotor.turn_bwd, LeftMotor_Actions\{leftmotor.turn_bwd}>
fluent LEFTMOTOR_CALIB_TURN_LEFT = <leftmotor.calib_turn_left, LeftMotor_Actions\{leftmotor.calib_turn_left}>
fluent LEFTMOTOR_CALIB_TURN_RIGHT = <leftmotor.calib_turn_right, LeftMotor_Actions\{leftmotor.calib_turn_right}>
fluent LEFTMOTOR_CALIB_FWD_LEFT = <leftmotor.calib_fwd_left, LeftMotor_Actions\{leftmotor.calib_fwd_left}>
fluent LEFTMOTOR_CALIB_FWD_RIGHT = <leftmotor.calib_fwd_right, LeftMotor_Actions\{leftmotor.calib_fwd_right}>

set RightMotor_Actions = {rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn_left, rightmotor.calib_turn_right, rightmotor.calib_fwd_left, rightmotor.calib_fwd_right}
fluent RIGHTMOTOR_FWD = <rightmotor.fwd, RightMotor_Actions\{rightmotor.fwd}>
fluent RIGHTMOTOR_BWD = <rightmotor.bwd, RightMotor_Actions\{rightmotor.bwd}>
fluent RIGHTMOTOR_STOP = <rightmotor.stop, RightMotor_Actions\{rightmotor.stop}>
fluent RIGHTMOTOR_TURN_FWD = <rightmotor.turn_fwd, RightMotor_Actions\{rightmotor.turn_fwd}>
fluent RIGHTMOTOR_TURN_BWD = <rightmotor.turn_bwd, RightMotor_Actions\{rightmotor.turn_bwd}>
fluent RIGHTMOTOR_CALIB_TURN_LEFT = <rightmotor.calib_turn_left, RightMotor_Actions\{rightmotor.calib_turn_left}>
fluent RIGHTMOTOR_CALIB_TURN_RIGHT = <rightmotor.calib_turn_right, RightMotor_Actions\{rightmotor.calib_turn_right}>
fluent RIGHTMOTOR_CALIB_FWD_LEFT = <rightmotor.calib_fwd_left, RightMotor_Actions\{rightmotor.calib_fwd_left}>
fluent RIGHTMOTOR_CALIB_FWD_RIGHT = <rightmotor.calib_fwd_right, RightMotor_Actions\{rightmotor.calib_fwd_right}>

set HeadMotor_Actions = {headmotor.fwd, headmotor.bwd, headmotor.stop}
fluent HEADMOTOR_FWD = <headmotor.fwd, HeadMotor_Actions\{headmotor.fwd}>
fluent HEADMOTOR_BWD = <headmotor.bwd, HeadMotor_Actions\{headmotor.bwd}>
fluent HEADMOTOR_STOP = <headmotor.stop, HeadMotor_Actions\{headmotor.stop}>

set Spec_nextMoveMode_Actions = {spec_nextmovemode.fwd, spec_nextmovemode.bwd, spec_nextmovemode.turn_right, spec_nextmovemode.turn_left}
fluent SPEC_NEXTMOVEMODE_FWD = <spec_nextmovemode.fwd, Spec_nextMoveMode_Actions\{spec_nextmovemode.fwd}>
fluent SPEC_NEXTMOVEMODE_BWD = <spec_nextmovemode.bwd, Spec_nextMoveMode_Actions\{spec_nextmovemode.bwd}>
fluent SPEC_NEXTMOVEMODE_TURN_RIGHT = <spec_nextmovemode.turn_right, Spec_nextMoveMode_Actions\{spec_nextmovemode.turn_right}>
fluent SPEC_NEXTMOVEMODE_TURN_LEFT = <spec_nextmovemode.turn_left, Spec_nextMoveMode_Actions\{spec_nextmovemode.turn_left}>

set Spec_specState_Actions = {spec_specstate.q0, spec_specstate.q1, spec_specstate.q2, spec_specstate.q3}
fluent SPEC_SPECSTATE_Q0 = <spec_specstate.q0, Spec_specState_Actions\{spec_specstate.q0}>
fluent SPEC_SPECSTATE_Q1 = <spec_specstate.q1, Spec_specState_Actions\{spec_specstate.q1}>
fluent SPEC_SPECSTATE_Q2 = <spec_specstate.q2, Spec_specState_Actions\{spec_specstate.q2}>
fluent SPEC_SPECSTATE_Q3 = <spec_specstate.q3, Spec_specState_Actions\{spec_specstate.q3}>

set Spec_turnState_Actions = {spec_turnstate.t0, spec_turnstate.t1, spec_turnstate.t2, spec_turnstate.t3}
fluent SPEC_TURNSTATE_T0 = <spec_turnstate.t0, Spec_turnState_Actions\{spec_turnstate.t0}>
fluent SPEC_TURNSTATE_T1 = <spec_turnstate.t1, Spec_turnState_Actions\{spec_turnstate.t1}>
fluent SPEC_TURNSTATE_T2 = <spec_turnstate.t2, Spec_turnState_Actions\{spec_turnstate.t2}>
fluent SPEC_TURNSTATE_T3 = <spec_turnstate.t3, Spec_turnState_Actions\{spec_turnstate.t3}>

set Spec_nextHead_Actions = {spec_nexthead.n, spec_nexthead.ea, spec_nexthead.so, spec_nexthead.w}
fluent SPEC_NEXTHEAD_N = <spec_nexthead.n, Spec_nextHead_Actions\{spec_nexthead.n}>
fluent SPEC_NEXTHEAD_EA = <spec_nexthead.ea, Spec_nextHead_Actions\{spec_nexthead.ea}>
fluent SPEC_NEXTHEAD_SO = <spec_nexthead.so, Spec_nextHead_Actions\{spec_nexthead.so}>
fluent SPEC_NEXTHEAD_W = <spec_nexthead.w, Spec_nextHead_Actions\{spec_nexthead.w}>

set SYS_CONSTRAINT_1089_respondsTo_responded_Actions = {sys_constraint[1089].respondsto.responded, not_sys_constraint[1089].respondsto.responded}
fluent SYS_CONSTRAINT_1089_RESPONDSTO_RESPONDED = <sys_constraint[1089].respondsto.responded, SYS_CONSTRAINT_1089_respondsTo_responded_Actions\{sys_constraint[1089].respondsto.responded}>

set ENV_CONSTRAINT_1115_respondsTo_responded_Actions = {env_constraint[1115].respondsto.responded, not_env_constraint[1115].respondsto.responded}
fluent ENV_CONSTRAINT_1115_RESPONDSTO_RESPONDED = <env_constraint[1115].respondsto.responded, ENV_CONSTRAINT_1115_respondsTo_responded_Actions\{env_constraint[1115].respondsto.responded}>

set ENV_CONSTRAINT_1117_respondsTo_responded_Actions = {env_constraint[1117].respondsto.responded, not_env_constraint[1117].respondsto.responded}
fluent ENV_CONSTRAINT_1117_RESPONDSTO_RESPONDED = <env_constraint[1117].respondsto.responded, ENV_CONSTRAINT_1117_respondsTo_responded_Actions\{env_constraint[1117].respondsto.responded}>

set ENV_CONSTRAINT_1118_respondsTo_responded_Actions = {env_constraint[1118].respondsto.responded, not_env_constraint[1118].respondsto.responded}
fluent ENV_CONSTRAINT_1118_RESPONDSTO_RESPONDED = <env_constraint[1118].respondsto.responded, ENV_CONSTRAINT_1118_respondsTo_responded_Actions\{env_constraint[1118].respondsto.responded}>

set PREV_1101_91_Actions = {prev_1101_91, not_prev_1101_91}
fluent PREV_1101_91 = <prev_1101_91, PREV_1101_91_Actions\{prev_1101_91}>

set PREV_1110_92_Actions = {prev_1110_92, not_prev_1110_92}
fluent PREV_1110_92 = <prev_1110_92, PREV_1110_92_Actions\{prev_1110_92}>

set PREV_1110_93_Actions = {prev_1110_93, not_prev_1110_93}
fluent PREV_1110_93 = <prev_1110_93, PREV_1110_93_Actions\{prev_1110_93}>

set PREV_1111_94_Actions = {prev_1111_94, not_prev_1111_94}
fluent PREV_1111_94 = <prev_1111_94, PREV_1111_94_Actions\{prev_1111_94}>

set PREV_1111_95_Actions = {prev_1111_95, not_prev_1111_95}
fluent PREV_1111_95 = <prev_1111_95, PREV_1111_95_Actions\{prev_1111_95}>

set PREV_1114_96_Actions = {prev_1114_96, not_prev_1114_96}
fluent PREV_1114_96 = <prev_1114_96, PREV_1114_96_Actions\{prev_1114_96}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && SPEC_SPECSTATE_Q0))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && SPEC_TURNSTATE_T0))
minimal || Initial_1_min =  Initial_1.
//property divided into 1 subproperties.
ltl_property Initial_2 = (!tick W (tick && SPEC_NEXTHEAD_SO))
minimal || Initial_2_min =  Initial_2.
//property divided into 1 subproperties.
ltl_property Initial_3 = (!tick W (tick && SPEC_NEXTMOVEMODE_FWD))
minimal || Initial_3_min =  Initial_3.
//property divided into 1 subproperties.
ltl_property Initial_4 = (!tick W (tick && SYS_CONSTRAINT_1089_RESPONDSTO_RESPONDED))
minimal || Initial_4_min =  Initial_4.
//property divided into 1 subproperties.
ltl_property Initial_5 = (!tick W (tick && ENV_CONSTRAINT_1115_RESPONDSTO_RESPONDED))
minimal || Initial_5_min =  Initial_5.
//property divided into 1 subproperties.
ltl_property Initial_6 = (!tick W (tick && ENV_CONSTRAINT_1117_RESPONDSTO_RESPONDED))
minimal || Initial_6_min =  Initial_6.
//property divided into 1 subproperties.
ltl_property Initial_7 = (!tick W (tick && ENV_CONSTRAINT_1118_RESPONDSTO_RESPONDED))
minimal || Initial_7_min =  Initial_7.
//property divided into 1 subproperties.
ltl_property Initial_8 = (!tick W (tick && !PREV_1101_91))
minimal || Initial_8_min =  Initial_8.
//property divided into 1 subproperties.
ltl_property Initial_9 = (!tick W (tick && !PREV_1110_92))
minimal || Initial_9_min =  Initial_9.
//property divided into 1 subproperties.
ltl_property Initial_10 = (!tick W (tick && !PREV_1110_93))
minimal || Initial_10_min =  Initial_10.
//property divided into 1 subproperties.
ltl_property Initial_11 = (!tick W (tick && !PREV_1111_94))
minimal || Initial_11_min =  Initial_11.
//property divided into 1 subproperties.
ltl_property Initial_12 = (!tick W (tick && !PREV_1111_95))
minimal || Initial_12_min =  Initial_12.
//property divided into 1 subproperties.
ltl_property Initial_13 = (!tick W (tick && !PREV_1114_96))
minimal || Initial_13_min =  Initial_13.
//property divided into 1 subproperties.
constraint Initial_14 = (!tock W (tock && OBSTACLE_CLEAR))
minimal || Initial_14_min =  Initial_14.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min ||  Initial_2_min ||  Initial_3_min ||  Initial_4_min ||  Initial_5_min ||  Initial_6_min ||  Initial_7_min ||  Initial_8_min ||  Initial_9_min ||  Initial_10_min ||  Initial_11_min ||  Initial_12_min ||  Initial_13_min ||  Initial_14_min).






//property divided into 1 subproperties.
assert G_l0 = (tick && SPEC_NEXTMOVEMODE_FWD)

//property divided into 1 subproperties.
ltl_property G0 = [](tick -> (OBSTACLE_BLOCKED -> !SPEC_NEXTMOVEMODE_FWD))
minimal ||G0_min = G0.

//property divided into 2 subproperties.
ltl_property G1 = [](tick -> ((!SPEC_NEXTMOVEMODE_BWD || X(!tick W (tick && !SPEC_NEXTMOVEMODE_FWD))) || X(!tick W (tick && (LEFTMOTOR_FWD && RIGHTMOTOR_BWD)))))
minimal ||G1_min = G1.
ltl_property G2 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_FWD || !RIGHTMOTOR_BWD))) || (SPEC_NEXTMOVEMODE_BWD && X(!tick W (tick && SPEC_NEXTMOVEMODE_FWD)))))
minimal ||G2_min = G2.

//property divided into 2 subproperties.
ltl_property G3 = [](tick -> ((!SPEC_NEXTMOVEMODE_FWD || X(!tick W (tick && !SPEC_NEXTMOVEMODE_BWD))) || X(!tick W (tick && (LEFTMOTOR_BWD && RIGHTMOTOR_FWD)))))
minimal ||G3_min = G3.
ltl_property G4 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_BWD || !RIGHTMOTOR_FWD))) || (SPEC_NEXTMOVEMODE_FWD && X(!tick W (tick && SPEC_NEXTMOVEMODE_BWD)))))
minimal ||G4_min = G4.

//property divided into 1 subproperties.
ltl_property G5 = [](tick -> (X(!tick W (tick && !SPEC_NEXTMOVEMODE_BWD)) || (SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_BWD)))
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> (SPEC_NEXTMOVEMODE_BWD -> X(!tick W (tick && (SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_BWD)))))
minimal ||G6_min = G6.

//property divided into 1 subproperties.
ltl_property G7 = [](tick -> (X(!tick W (tick && !SPEC_NEXTMOVEMODE_TURN_RIGHT)) || (SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_TURN_RIGHT)))
minimal ||G7_min = G7.

//property divided into 1 subproperties.
ltl_property G8 = [](tick -> (X(!tick W (tick && !SPEC_NEXTMOVEMODE_TURN_LEFT)) || (SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_TURN_LEFT)))
minimal ||G8_min = G8.

//property divided into 1 subproperties.
ltl_property G9 = [](tick -> (((!SPEC_SPECSTATE_Q0 || !SPEC_NEXTMOVEMODE_FWD) || X(!tick W (tick && !SPEC_NEXTMOVEMODE_BWD))) || X(!tick W (tick && SPEC_SPECSTATE_Q1))))
minimal ||G9_min = G9.

//property divided into 1 subproperties.
ltl_property G10 = [](tick -> (((!SPEC_SPECSTATE_Q1 || !SPEC_NEXTMOVEMODE_BWD) || X(!tick W (tick && !SPEC_NEXTMOVEMODE_FWD))) || X(!tick W (tick && SPEC_SPECSTATE_Q2))))
minimal ||G10_min = G10.

//property divided into 1 subproperties.
ltl_property G11 = [](tick -> ((!SPEC_SPECSTATE_Q2 || !SPEC_NEXTMOVEMODE_FWD) || X(!tick W (tick && !SPEC_NEXTMOVEMODE_BWD))))
minimal ||G11_min = G11.

//property divided into 1 subproperties.
ltl_property G12 = [](tick -> ((!SPEC_SPECSTATE_Q1 || X(!tick W (tick && !SPEC_NEXTMOVEMODE_BWD))) || X(!tick W (tick && SPEC_SPECSTATE_Q1))))
minimal ||G12_min = G12.

//property divided into 1 subproperties.
ltl_property G13 = [](tick -> ((!SPEC_SPECSTATE_Q2 || X(!tick W (tick && !SPEC_NEXTMOVEMODE_FWD))) || X(!tick W (tick && SPEC_SPECSTATE_Q2))))
minimal ||G13_min = G13.

//property divided into 1 subproperties.
ltl_property G14 = [](tick -> ((SPEC_NEXTMOVEMODE_TURN_RIGHT || SPEC_NEXTMOVEMODE_TURN_LEFT) -> X(!tick W (tick && SPEC_SPECSTATE_Q0))))
minimal ||G14_min = G14.

//property divided into 1 subproperties.
ltl_property G15 = [](tick -> (BUTTON_PRESSED -> X(!tick W (tick && ((SPEC_NEXTHEAD_EA <-> HEADING_EA) && (SPEC_NEXTHEAD_N <-> HEADING_N) && (SPEC_NEXTHEAD_SO <-> HEADING_SO) && (SPEC_NEXTHEAD_W <-> HEADING_W))))))
minimal ||G15_min = G15.

//property divided into 1 subproperties.
ltl_property G16 = [](tick -> (!BUTTON_FREE || (((X(!tick W (tick && (!SPEC_NEXTHEAD_EA))) || SPEC_NEXTHEAD_EA) && (!SPEC_NEXTHEAD_EA || X(!tick W (tick && (SPEC_NEXTHEAD_EA))))) && ((X(!tick W (tick && (!SPEC_NEXTHEAD_N))) || SPEC_NEXTHEAD_N) && (!SPEC_NEXTHEAD_N || X(!tick W (tick && (SPEC_NEXTHEAD_N))))) && ((X(!tick W (tick && (!SPEC_NEXTHEAD_SO))) || SPEC_NEXTHEAD_SO) && (!SPEC_NEXTHEAD_SO || X(!tick W (tick && (SPEC_NEXTHEAD_SO))))) && ((X(!tick W (tick && (!SPEC_NEXTHEAD_W))) || SPEC_NEXTHEAD_W) && (!SPEC_NEXTHEAD_W || X(!tick W (tick && (SPEC_NEXTHEAD_W))))))))
minimal ||G16_min = G16.

//property divided into 1 subproperties.
ltl_property G17 = [](tick -> ((((((SPEC_NEXTHEAD_N && HEADING_EA) || (SPEC_NEXTHEAD_EA && HEADING_SO)) || (SPEC_NEXTHEAD_SO && HEADING_W)) || (SPEC_NEXTHEAD_W && HEADING_N)) && SPEC_TURNSTATE_T0) -> !SPEC_NEXTMOVEMODE_TURN_RIGHT))
minimal ||G17_min = G17.

//property divided into 1 subproperties.
ltl_property G18 = [](tick -> ((((((SPEC_NEXTHEAD_EA && HEADING_N) || (SPEC_NEXTHEAD_SO && HEADING_EA)) || (SPEC_NEXTHEAD_W && HEADING_SO)) || (SPEC_NEXTHEAD_N && HEADING_W)) && SPEC_TURNSTATE_T0) -> !SPEC_NEXTMOVEMODE_TURN_LEFT))
minimal ||G18_min = G18.

//property divided into 1 subproperties.
ltl_property G19 = [](tick -> (X(!tick W (tick && !SPEC_TURNSTATE_T0)) || (SPEC_TURNSTATE_T0 || SPEC_TURNSTATE_T3)))
minimal ||G19_min = G19.

//property divided into 1 subproperties.
ltl_property G20 = [](tick -> ((SPEC_TURNSTATE_T0 && !(SPEC_NEXTMOVEMODE_TURN_RIGHT || SPEC_NEXTMOVEMODE_TURN_LEFT)) -> X(!tick W (tick && SPEC_TURNSTATE_T0))))
minimal ||G20_min = G20.

//property divided into 1 subproperties.
ltl_property G21 = [](tick -> ((((SPEC_NEXTMOVEMODE_TURN_RIGHT || SPEC_NEXTMOVEMODE_TURN_LEFT) && PREV_1101_91) && SPEC_TURNSTATE_T0) -> X(!tick W (tick && SPEC_TURNSTATE_T1))))
minimal ||G21_min = G21.

//property divided into 1 subproperties.
ltl_property G22 = [](tick -> (SPEC_TURNSTATE_T1 -> (X(!tick W (tick && SPEC_TURNSTATE_T2)) && (SPEC_NEXTMOVEMODE_TURN_RIGHT || SPEC_NEXTMOVEMODE_TURN_LEFT))))
minimal ||G22_min = G22.

//property divided into 1 subproperties.
ltl_property G23 = [](tick -> ((SPEC_TURNSTATE_T2 && (SPEC_NEXTMOVEMODE_TURN_RIGHT || SPEC_NEXTMOVEMODE_TURN_LEFT)) -> X(!tick W (tick && SPEC_TURNSTATE_T1))))
minimal ||G23_min = G23.

//property divided into 1 subproperties.
ltl_property G24 = [](tick -> ((SPEC_TURNSTATE_T2 && SPEC_NEXTMOVEMODE_FWD) -> X(!tick W (tick && SPEC_TURNSTATE_T3))))
minimal ||G24_min = G24.

//property divided into 1 subproperties.
ltl_property G25 = [](tick -> (SPEC_TURNSTATE_T3 -> X(!tick W (tick && SPEC_TURNSTATE_T0))))
minimal ||G25_min = G25.

//property divided into 2 subproperties.
ltl_property G26 = [](tick -> (((!SPEC_TURNSTATE_T0 || X(!tick W (tick && !SPEC_TURNSTATE_T1))) || !SPEC_NEXTMOVEMODE_TURN_RIGHT) || (LEFTMOTOR_CALIB_TURN_RIGHT && RIGHTMOTOR_CALIB_TURN_RIGHT)))
minimal ||G26_min = G26.
ltl_property G27 = [](tick -> ((!LEFTMOTOR_CALIB_TURN_RIGHT || !RIGHTMOTOR_CALIB_TURN_RIGHT) || ((SPEC_TURNSTATE_T0 && X(!tick W (tick && SPEC_TURNSTATE_T1))) && SPEC_NEXTMOVEMODE_TURN_RIGHT)))
minimal ||G27_min = G27.

//property divided into 2 subproperties.
ltl_property G28 = [](tick -> (((!SPEC_TURNSTATE_T0 || X(!tick W (tick && !SPEC_TURNSTATE_T1))) || !SPEC_NEXTMOVEMODE_TURN_LEFT) || (LEFTMOTOR_CALIB_TURN_LEFT && RIGHTMOTOR_CALIB_TURN_LEFT)))
minimal ||G28_min = G28.
ltl_property G29 = [](tick -> ((!LEFTMOTOR_CALIB_TURN_LEFT || !RIGHTMOTOR_CALIB_TURN_LEFT) || ((SPEC_TURNSTATE_T0 && X(!tick W (tick && SPEC_TURNSTATE_T1))) && SPEC_NEXTMOVEMODE_TURN_LEFT)))
minimal ||G29_min = G29.

//property divided into 2 subproperties.
ltl_property G30 = [](tick -> (X(!tick W (tick && !SPEC_TURNSTATE_T2)) || (LEFTMOTOR_FWD && RIGHTMOTOR_TURN_FWD)))
minimal ||G30_min = G30.
ltl_property G31 = [](tick -> ((!LEFTMOTOR_FWD || !RIGHTMOTOR_TURN_FWD) || X(!tick W (tick && SPEC_TURNSTATE_T2))))
minimal ||G31_min = G31.

//property divided into 1 subproperties.
ltl_property G32 = [](tick -> (SPEC_TURNSTATE_T2 <-> (LEFTMOTOR_BWD && RIGHTMOTOR_TURN_BWD)))
minimal ||G32_min = G32.

//property divided into 2 subproperties.
ltl_property G33 = [](tick -> (((!SPEC_TURNSTATE_T3 || X(!tick W (tick && !SPEC_TURNSTATE_T0))) || !PREV_1110_93) || (LEFTMOTOR_CALIB_FWD_RIGHT && RIGHTMOTOR_CALIB_FWD_RIGHT)))
minimal ||G33_min = G33.
ltl_property G34 = [](tick -> ((!LEFTMOTOR_CALIB_FWD_RIGHT || !RIGHTMOTOR_CALIB_FWD_RIGHT) || ((SPEC_TURNSTATE_T3 && X(!tick W (tick && SPEC_TURNSTATE_T0))) && PREV_1110_93)))
minimal ||G34_min = G34.

//property divided into 2 subproperties.
ltl_property G35 = [](tick -> (((!SPEC_TURNSTATE_T3 || X(!tick W (tick && !SPEC_TURNSTATE_T0))) || !PREV_1111_95) || (LEFTMOTOR_CALIB_FWD_LEFT && RIGHTMOTOR_CALIB_FWD_LEFT)))
minimal ||G35_min = G35.
ltl_property G36 = [](tick -> ((!LEFTMOTOR_CALIB_FWD_LEFT || !RIGHTMOTOR_CALIB_FWD_LEFT) || ((SPEC_TURNSTATE_T3 && X(!tick W (tick && SPEC_TURNSTATE_T0))) && PREV_1111_95)))
minimal ||G36_min = G36.

//property divided into 1 subproperties.
assert G_l1 = (tick && SYS_CONSTRAINT_1089_RESPONDSTO_RESPONDED)


//property divided into 2 subproperties.
ltl_property G37 = [](tick -> (X(!tick W (tick && !SYS_CONSTRAINT_1089_RESPONDSTO_RESPONDED)) || (((HEADING_EA <-> SPEC_NEXTHEAD_EA) && (HEADING_N <-> SPEC_NEXTHEAD_N) && (HEADING_SO <-> SPEC_NEXTHEAD_SO) && (HEADING_W <-> SPEC_NEXTHEAD_W)) || (SYS_CONSTRAINT_1089_RESPONDSTO_RESPONDED && !NOISE_NOISE))))
minimal ||G37_min = G37.
ltl_property G38 = [](tick -> (((!(HEADING_EA <-> SPEC_NEXTHEAD_EA) || !(HEADING_N <-> SPEC_NEXTHEAD_N) || !(HEADING_SO <-> SPEC_NEXTHEAD_SO) || !(HEADING_W <-> SPEC_NEXTHEAD_W)) && (!SYS_CONSTRAINT_1089_RESPONDSTO_RESPONDED || NOISE_NOISE)) || X(!tick W (tick && SYS_CONSTRAINT_1089_RESPONDSTO_RESPONDED))))
minimal ||G38_min = G38.


//property divided into 2 subproperties.
ltl_property G39 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_1115_RESPONDSTO_RESPONDED)) || ((OBSTACLE_CLEAR && X(!tick W (tick && OBSTACLE_CLEAR))) || (ENV_CONSTRAINT_1115_RESPONDSTO_RESPONDED && !SPEC_TURNSTATE_T1))))
minimal ||G39_min = G39.
ltl_property G40 = [](tick -> (((!OBSTACLE_CLEAR || X(!tick W (tick && !OBSTACLE_CLEAR))) && (!ENV_CONSTRAINT_1115_RESPONDSTO_RESPONDED || SPEC_TURNSTATE_T1)) || X(!tick W (tick && ENV_CONSTRAINT_1115_RESPONDSTO_RESPONDED))))
minimal ||G40_min = G40.


//property divided into 2 subproperties.
ltl_property G41 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_1117_RESPONDSTO_RESPONDED)) || ((((HEADING_EA <-> SPEC_NEXTHEAD_EA) && (HEADING_N <-> SPEC_NEXTHEAD_N) && (HEADING_SO <-> SPEC_NEXTHEAD_SO) && (HEADING_W <-> SPEC_NEXTHEAD_W)) || !SPEC_NEXTMOVEMODE_TURN_RIGHT) || (ENV_CONSTRAINT_1117_RESPONDSTO_RESPONDED && !SPEC_NEXTMOVEMODE_TURN_RIGHT))))
minimal ||G41_min = G41.
ltl_property G42 = [](tick -> ((((!(HEADING_EA <-> SPEC_NEXTHEAD_EA) || !(HEADING_N <-> SPEC_NEXTHEAD_N) || !(HEADING_SO <-> SPEC_NEXTHEAD_SO) || !(HEADING_W <-> SPEC_NEXTHEAD_W)) && SPEC_NEXTMOVEMODE_TURN_RIGHT) && (!ENV_CONSTRAINT_1117_RESPONDSTO_RESPONDED || SPEC_NEXTMOVEMODE_TURN_RIGHT)) || X(!tick W (tick && ENV_CONSTRAINT_1117_RESPONDSTO_RESPONDED))))
minimal ||G42_min = G42.


//property divided into 2 subproperties.
ltl_property G43 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_1118_RESPONDSTO_RESPONDED)) || ((((HEADING_EA <-> SPEC_NEXTHEAD_EA) && (HEADING_N <-> SPEC_NEXTHEAD_N) && (HEADING_SO <-> SPEC_NEXTHEAD_SO) && (HEADING_W <-> SPEC_NEXTHEAD_W)) || !SPEC_NEXTMOVEMODE_TURN_LEFT) || (ENV_CONSTRAINT_1118_RESPONDSTO_RESPONDED && !SPEC_NEXTMOVEMODE_TURN_LEFT))))
minimal ||G43_min = G43.
ltl_property G44 = [](tick -> ((((!(HEADING_EA <-> SPEC_NEXTHEAD_EA) || !(HEADING_N <-> SPEC_NEXTHEAD_N) || !(HEADING_SO <-> SPEC_NEXTHEAD_SO) || !(HEADING_W <-> SPEC_NEXTHEAD_W)) && SPEC_NEXTMOVEMODE_TURN_LEFT) && (!ENV_CONSTRAINT_1118_RESPONDSTO_RESPONDED || SPEC_NEXTMOVEMODE_TURN_LEFT)) || X(!tick W (tick && ENV_CONSTRAINT_1118_RESPONDSTO_RESPONDED))))
minimal ||G44_min = G44.


//property divided into 2 subproperties.
ltl_property G45 = [](tick -> (X(!tick W (tick && !PREV_1101_91)) || SPEC_NEXTMOVEMODE_FWD))
minimal ||G45_min = G45.
ltl_property G46 = [](tick -> (!SPEC_NEXTMOVEMODE_FWD || X(!tick W (tick && PREV_1101_91))))
minimal ||G46_min = G46.


//property divided into 2 subproperties.
ltl_property G47 = [](tick -> (X(!tick W (tick && !PREV_1110_92)) || SPEC_NEXTMOVEMODE_TURN_RIGHT))
minimal ||G47_min = G47.
ltl_property G48 = [](tick -> (!SPEC_NEXTMOVEMODE_TURN_RIGHT || X(!tick W (tick && PREV_1110_92))))
minimal ||G48_min = G48.


//property divided into 2 subproperties.
ltl_property G49 = [](tick -> (X(!tick W (tick && !PREV_1110_93)) || PREV_1110_92))
minimal ||G49_min = G49.
ltl_property G50 = [](tick -> (!PREV_1110_92 || X(!tick W (tick && PREV_1110_93))))
minimal ||G50_min = G50.


//property divided into 2 subproperties.
ltl_property G51 = [](tick -> (X(!tick W (tick && !PREV_1111_94)) || SPEC_NEXTMOVEMODE_TURN_LEFT))
minimal ||G51_min = G51.
ltl_property G52 = [](tick -> (!SPEC_NEXTMOVEMODE_TURN_LEFT || X(!tick W (tick && PREV_1111_94))))
minimal ||G52_min = G52.


//property divided into 2 subproperties.
ltl_property G53 = [](tick -> (X(!tick W (tick && !PREV_1111_95)) || PREV_1111_94))
minimal ||G53_min = G53.
ltl_property G54 = [](tick -> (!PREV_1111_94 || X(!tick W (tick && PREV_1111_95))))
minimal ||G54_min = G54.


//property divided into 2 subproperties.
ltl_property G55 = [](tick -> (X(!tick W (tick && !PREV_1114_96)) || SPEC_NEXTMOVEMODE_BWD))
minimal ||G55_min = G55.
ltl_property G56 = [](tick -> (!SPEC_NEXTMOVEMODE_BWD || X(!tick W (tick && PREV_1114_96))))
minimal ||G56_min = G56.


//property divided into 1 subproperties.
constraint A0 = [](tock -> ((PREV_1101_91 && OBSTACLE_BLOCKED) -> X(!tock W (tock && OBSTACLE_BLOCKED))))
minimal ||A0_min = A0.

//property divided into 1 subproperties.
constraint A1 = [](tock -> ((PREV_1114_96 && OBSTACLE_CLEAR) -> X(!tock W (tock && !OBSTACLE_BLOCKED))))
minimal ||A1_min = A1.

//property divided into 1 subproperties.
constraint A2 = [](tock -> ((SPEC_TURNSTATE_T2 && OBSTACLE_CLEAR) -> X(!tock W (tock && OBSTACLE_CLEAR))))
minimal ||A2_min = A2.

//property divided into 1 subproperties.
assert A_l0 = (tock && ENV_CONSTRAINT_1115_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l1 = (tock && ENV_CONSTRAINT_1117_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l2 = (tock && ENV_CONSTRAINT_1118_RESPONDSTO_RESPONDED)



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0_min || A1_min || A2_min || G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min || G22_min || G23_min || G24_min || G25_min || G26_min || G27_min || G28_min || G29_min || G30_min || G31_min || G32_min || G33_min || G34_min || G35_min || G36_min || G37_min || G38_min || G39_min || G40_min || G41_min || G42_min || G43_min || G44_min || G45_min || G46_min || G47_min || G48_min || G49_min || G50_min || G51_min || G52_min || G53_min || G54_min || G55_min || G56_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_l2, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0, G_l1}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && []<>A_l2 && A_clock) -> ([]<>G_l0 && []<>G_l1))
assert ASM =   ([]<>A_l0 && []<>A_l1 && []<>A_l2 && A_clock)
assert GNT = ([]<>G_l0 && []<>G_l1)
progress Time  = {tick}
