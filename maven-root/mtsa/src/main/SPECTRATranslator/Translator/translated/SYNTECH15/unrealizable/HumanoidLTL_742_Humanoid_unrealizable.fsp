//unrealizable/HumanoidLTL_742_Humanoid_unrealizable automatically_translated 

set ControlledActions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd, rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd, headmotor.fwd, headmotor.bwd, headmotor.stop, nextmovemode.fwd, nextmovemode.bwd, nextmovemode.turn_left, specstate.q0, specstate.q1, specstate.q2, specstate.q3, turnstate.t0, turnstate.t1, turnstate.t2, turnstate.t3, tick, prev_2819_232, not_prev_2819_232, prev_2831_233, not_prev_2831_233}
set UncontrolledActions = {obstacle.clear, obstacle.blocked, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Obstacle_Actions = {obstacle.clear, obstacle.blocked}
fluent OBSTACLE_CLEAR = <obstacle.clear, Obstacle_Actions\{obstacle.clear}>
fluent OBSTACLE_BLOCKED = <obstacle.blocked, Obstacle_Actions\{obstacle.blocked}>

set LeftMotor_Actions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd}
fluent LEFTMOTOR_FWD = <leftmotor.fwd, LeftMotor_Actions\{leftmotor.fwd}>
fluent LEFTMOTOR_BWD = <leftmotor.bwd, LeftMotor_Actions\{leftmotor.bwd}>
fluent LEFTMOTOR_STOP = <leftmotor.stop, LeftMotor_Actions\{leftmotor.stop}>
fluent LEFTMOTOR_TURN_FWD = <leftmotor.turn_fwd, LeftMotor_Actions\{leftmotor.turn_fwd}>
fluent LEFTMOTOR_TURN_BWD = <leftmotor.turn_bwd, LeftMotor_Actions\{leftmotor.turn_bwd}>
fluent LEFTMOTOR_CALIB_TURN = <leftmotor.calib_turn, LeftMotor_Actions\{leftmotor.calib_turn}>
fluent LEFTMOTOR_CALIB_FWD = <leftmotor.calib_fwd, LeftMotor_Actions\{leftmotor.calib_fwd}>

set RightMotor_Actions = {rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd}
fluent RIGHTMOTOR_FWD = <rightmotor.fwd, RightMotor_Actions\{rightmotor.fwd}>
fluent RIGHTMOTOR_BWD = <rightmotor.bwd, RightMotor_Actions\{rightmotor.bwd}>
fluent RIGHTMOTOR_STOP = <rightmotor.stop, RightMotor_Actions\{rightmotor.stop}>
fluent RIGHTMOTOR_TURN_FWD = <rightmotor.turn_fwd, RightMotor_Actions\{rightmotor.turn_fwd}>
fluent RIGHTMOTOR_TURN_BWD = <rightmotor.turn_bwd, RightMotor_Actions\{rightmotor.turn_bwd}>
fluent RIGHTMOTOR_CALIB_TURN = <rightmotor.calib_turn, RightMotor_Actions\{rightmotor.calib_turn}>
fluent RIGHTMOTOR_CALIB_FWD = <rightmotor.calib_fwd, RightMotor_Actions\{rightmotor.calib_fwd}>

set HeadMotor_Actions = {headmotor.fwd, headmotor.bwd, headmotor.stop}
fluent HEADMOTOR_FWD = <headmotor.fwd, HeadMotor_Actions\{headmotor.fwd}>
fluent HEADMOTOR_BWD = <headmotor.bwd, HeadMotor_Actions\{headmotor.bwd}>
fluent HEADMOTOR_STOP = <headmotor.stop, HeadMotor_Actions\{headmotor.stop}>

set NextMoveMode_Actions = {nextmovemode.fwd, nextmovemode.bwd, nextmovemode.turn_left}
fluent NEXTMOVEMODE_FWD = <nextmovemode.fwd, NextMoveMode_Actions\{nextmovemode.fwd}>
fluent NEXTMOVEMODE_BWD = <nextmovemode.bwd, NextMoveMode_Actions\{nextmovemode.bwd}>
fluent NEXTMOVEMODE_TURN_LEFT = <nextmovemode.turn_left, NextMoveMode_Actions\{nextmovemode.turn_left}>

set SpecState_Actions = {specstate.q0, specstate.q1, specstate.q2, specstate.q3}
fluent SPECSTATE_Q0 = <specstate.q0, SpecState_Actions\{specstate.q0}>
fluent SPECSTATE_Q1 = <specstate.q1, SpecState_Actions\{specstate.q1}>
fluent SPECSTATE_Q2 = <specstate.q2, SpecState_Actions\{specstate.q2}>
fluent SPECSTATE_Q3 = <specstate.q3, SpecState_Actions\{specstate.q3}>

set TurnState_Actions = {turnstate.t0, turnstate.t1, turnstate.t2, turnstate.t3}
fluent TURNSTATE_T0 = <turnstate.t0, TurnState_Actions\{turnstate.t0}>
fluent TURNSTATE_T1 = <turnstate.t1, TurnState_Actions\{turnstate.t1}>
fluent TURNSTATE_T2 = <turnstate.t2, TurnState_Actions\{turnstate.t2}>
fluent TURNSTATE_T3 = <turnstate.t3, TurnState_Actions\{turnstate.t3}>

set PREV_2819_232_Actions = {prev_2819_232, not_prev_2819_232}
fluent PREV_2819_232 = <prev_2819_232, PREV_2819_232_Actions\{prev_2819_232}>

set PREV_2831_233_Actions = {prev_2831_233, not_prev_2831_233}
fluent PREV_2831_233 = <prev_2831_233, PREV_2831_233_Actions\{prev_2831_233}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && SPECSTATE_Q0))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && TURNSTATE_T0))
minimal || Initial_1_min =  Initial_1.
//property divided into 1 subproperties.
ltl_property Initial_2 = (!tick W (tick && !PREV_2819_232))
minimal || Initial_2_min =  Initial_2.
//property divided into 1 subproperties.
ltl_property Initial_3 = (!tick W (tick && !PREV_2831_233))
minimal || Initial_3_min =  Initial_3.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min ||  Initial_2_min ||  Initial_3_min).




//property divided into 1 subproperties.
assert G_l0 = (tick && NEXTMOVEMODE_FWD)

//property divided into 1 subproperties.
ltl_property G0 = [](tick -> (((!SPECSTATE_Q0 || !NEXTMOVEMODE_FWD) || X(!tick W (tick && !NEXTMOVEMODE_BWD))) || X(!tick W (tick && SPECSTATE_Q1))))
minimal ||G0_min = G0.

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> (((!SPECSTATE_Q1 || !NEXTMOVEMODE_BWD) || X(!tick W (tick && !NEXTMOVEMODE_FWD))) || X(!tick W (tick && SPECSTATE_Q2))))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> ((!SPECSTATE_Q2 || !NEXTMOVEMODE_FWD) || X(!tick W (tick && !NEXTMOVEMODE_BWD))))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
ltl_property G3 = [](tick -> ((!SPECSTATE_Q1 || X(!tick W (tick && !NEXTMOVEMODE_BWD))) || X(!tick W (tick && SPECSTATE_Q1))))
minimal ||G3_min = G3.

//property divided into 1 subproperties.
ltl_property G4 = [](tick -> ((!SPECSTATE_Q2 || X(!tick W (tick && !NEXTMOVEMODE_FWD))) || X(!tick W (tick && SPECSTATE_Q2))))
minimal ||G4_min = G4.

//property divided into 1 subproperties.
ltl_property G5 = [](tick -> (NEXTMOVEMODE_TURN_LEFT -> X(!tick W (tick && SPECSTATE_Q0))))
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> (OBSTACLE_BLOCKED -> !NEXTMOVEMODE_FWD))
minimal ||G6_min = G6.

//property divided into 2 subproperties.
ltl_property G7 = [](tick -> ((!NEXTMOVEMODE_BWD || X(!tick W (tick && !NEXTMOVEMODE_FWD))) || X(!tick W (tick && (LEFTMOTOR_FWD && RIGHTMOTOR_BWD)))))
minimal ||G7_min = G7.
ltl_property G8 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_FWD || !RIGHTMOTOR_BWD))) || (NEXTMOVEMODE_BWD && X(!tick W (tick && NEXTMOVEMODE_FWD)))))
minimal ||G8_min = G8.

//property divided into 2 subproperties.
ltl_property G9 = [](tick -> ((!NEXTMOVEMODE_FWD || X(!tick W (tick && !NEXTMOVEMODE_BWD))) || X(!tick W (tick && (LEFTMOTOR_BWD && RIGHTMOTOR_FWD)))))
minimal ||G9_min = G9.
ltl_property G10 = [](tick -> (X(!tick W (tick && (!LEFTMOTOR_BWD || !RIGHTMOTOR_FWD))) || (NEXTMOVEMODE_FWD && X(!tick W (tick && NEXTMOVEMODE_BWD)))))
minimal ||G10_min = G10.

//property divided into 1 subproperties.
ltl_property G11 = [](tick -> (X(!tick W (tick && !NEXTMOVEMODE_BWD)) || (NEXTMOVEMODE_FWD || NEXTMOVEMODE_BWD)))
minimal ||G11_min = G11.

//property divided into 1 subproperties.
ltl_property G12 = [](tick -> (NEXTMOVEMODE_BWD -> X(!tick W (tick && (NEXTMOVEMODE_FWD || NEXTMOVEMODE_BWD)))))
minimal ||G12_min = G12.

//property divided into 1 subproperties.
ltl_property G13 = [](tick -> (X(!tick W (tick && !TURNSTATE_T0)) || (TURNSTATE_T0 || TURNSTATE_T3)))
minimal ||G13_min = G13.

//property divided into 1 subproperties.
ltl_property G14 = [](tick -> ((TURNSTATE_T0 && !NEXTMOVEMODE_TURN_LEFT) -> X(!tick W (tick && TURNSTATE_T0))))
minimal ||G14_min = G14.

//property divided into 1 subproperties.
ltl_property G15 = [](tick -> (((NEXTMOVEMODE_TURN_LEFT && PREV_2819_232) && TURNSTATE_T0) -> X(!tick W (tick && TURNSTATE_T1))))
minimal ||G15_min = G15.

//property divided into 1 subproperties.
ltl_property G16 = [](tick -> (TURNSTATE_T1 -> (X(!tick W (tick && TURNSTATE_T2)) && NEXTMOVEMODE_TURN_LEFT)))
minimal ||G16_min = G16.

//property divided into 1 subproperties.
ltl_property G17 = [](tick -> ((TURNSTATE_T2 && NEXTMOVEMODE_TURN_LEFT) -> X(!tick W (tick && TURNSTATE_T1))))
minimal ||G17_min = G17.

//property divided into 1 subproperties.
ltl_property G18 = [](tick -> ((TURNSTATE_T2 && NEXTMOVEMODE_FWD) -> X(!tick W (tick && TURNSTATE_T3))))
minimal ||G18_min = G18.

//property divided into 1 subproperties.
ltl_property G19 = [](tick -> ((TURNSTATE_T3 && NEXTMOVEMODE_FWD) -> X(!tick W (tick && TURNSTATE_T0))))
minimal ||G19_min = G19.

//property divided into 1 subproperties.
ltl_property G20 = [](tick -> ((TURNSTATE_T3 && !NEXTMOVEMODE_FWD) -> X(!tick W (tick && TURNSTATE_T2))))
minimal ||G20_min = G20.

//property divided into 1 subproperties.
ltl_property G21 = [](tick -> ((TURNSTATE_T2 && OBSTACLE_CLEAR) -> NEXTMOVEMODE_FWD))
minimal ||G21_min = G21.

//property divided into 2 subproperties.
ltl_property G22 = [](tick -> ((!TURNSTATE_T0 || X(!tick W (tick && !TURNSTATE_T1))) || (LEFTMOTOR_CALIB_TURN && RIGHTMOTOR_CALIB_TURN)))
minimal ||G22_min = G22.
ltl_property G23 = [](tick -> ((!LEFTMOTOR_CALIB_TURN || !RIGHTMOTOR_CALIB_TURN) || (TURNSTATE_T0 && X(!tick W (tick && TURNSTATE_T1)))))
minimal ||G23_min = G23.

//property divided into 2 subproperties.
ltl_property G24 = [](tick -> (X(!tick W (tick && !TURNSTATE_T2)) || (LEFTMOTOR_FWD && RIGHTMOTOR_TURN_FWD)))
minimal ||G24_min = G24.
ltl_property G25 = [](tick -> ((!LEFTMOTOR_FWD || !RIGHTMOTOR_TURN_FWD) || X(!tick W (tick && TURNSTATE_T2))))
minimal ||G25_min = G25.

//property divided into 1 subproperties.
ltl_property G26 = [](tick -> (TURNSTATE_T2 <-> (LEFTMOTOR_BWD && RIGHTMOTOR_TURN_BWD)))
minimal ||G26_min = G26.

//property divided into 1 subproperties.
ltl_property G27 = [](tick -> ((TURNSTATE_T3 && TURNSTATE_T0) <-> (LEFTMOTOR_CALIB_FWD && RIGHTMOTOR_CALIB_FWD)))
minimal ||G27_min = G27.


//property divided into 2 subproperties.
ltl_property G28 = [](tick -> (X(!tick W (tick && !PREV_2819_232)) || NEXTMOVEMODE_FWD))
minimal ||G28_min = G28.
ltl_property G29 = [](tick -> (!NEXTMOVEMODE_FWD || X(!tick W (tick && PREV_2819_232))))
minimal ||G29_min = G29.


//property divided into 2 subproperties.
ltl_property G30 = [](tick -> (X(!tick W (tick && !PREV_2831_233)) || NEXTMOVEMODE_BWD))
minimal ||G30_min = G30.
ltl_property G31 = [](tick -> (!NEXTMOVEMODE_BWD || X(!tick W (tick && PREV_2831_233))))
minimal ||G31_min = G31.

//property divided into 1 subproperties.
constraint A0 = [](tock -> ((PREV_2819_232 && OBSTACLE_BLOCKED) -> X(!tock W (tock && OBSTACLE_BLOCKED))))
minimal ||A0_min = A0.

//property divided into 1 subproperties.
constraint A1 = [](tock -> ((PREV_2831_233 && OBSTACLE_CLEAR) -> X(!tock W (tock && !OBSTACLE_BLOCKED))))
minimal ||A1_min = A1.



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0_min || A1_min || G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min || G22_min || G23_min || G24_min || G25_min || G26_min || G27_min || G28_min || G29_min || G30_min || G31_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = ((A_clock) -> ([]<>G_l0))
assert ASM =   (A_clock)
assert GNT = ([]<>G_l0)
progress Time  = {tick}
