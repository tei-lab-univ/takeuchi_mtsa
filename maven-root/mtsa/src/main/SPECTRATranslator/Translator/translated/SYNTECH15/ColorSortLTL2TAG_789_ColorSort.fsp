//ColorSortLTL2TAG_789_ColorSort automatically_translated 

set ControlledActions = {vermot.move, vermot.sleep, hormot.move, hormot.sleep, botmot.seek, botmot.stop, botmot.return, direction.right, direction.left, motspeed.level1, motspeed.level2, motspeed.level3, spec_currentcolor.green, spec_currentcolor.black, spec_currentcolor.red, spec_currentcolor.blue, spec_currentcolor.yellow, spec_currentcolor.white, spec_dropping, not_spec_dropping, spec_speedbuttonvalidpressed, not_spec_speedbuttonvalidpressed, spec_pausebuttonvalidpressed, not_spec_pausebuttonvalidpressed, spec_pausing.pause, spec_pausing.go, spec_waiting_ack_ver_mot, not_spec_waiting_ack_ver_mot, spec_waiting_ack_hor_mot, not_spec_waiting_ack_hor_mot, tick, sys_constraint[1273].respondsto.responded, not_sys_constraint[1273].respondsto.responded, env_constraint[1282].respondsto.responded, not_env_constraint[1282].respondsto.responded, env_constraint[1284].respondsto.responded, not_env_constraint[1284].respondsto.responded, env_constraint[1286].respondsto.responded, not_env_constraint[1286].respondsto.responded, prev_1254_106, not_prev_1254_106, prev_1259_107, not_prev_1259_107}
set UncontrolledActions = {color.green, color.black, color.red, color.blue, color.yellow, color.white, detect.green, detect.black, detect.red, detect.blue, detect.yellow, detect.white, ack_ver.move, ack_ver.sleep, ack_hor.move, ack_hor.sleep, ack_bot.move, ack_bot.sleep, starting_pos.yes, starting_pos.no, edge.yes, edge.no, speedbutton.press, speedbutton.release, haltbutton.press, haltbutton.release, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Color_Actions = {color.green, color.black, color.red, color.blue, color.yellow, color.white}
fluent COLOR_GREEN = <color.green, Color_Actions\{color.green}>
fluent COLOR_BLACK = <color.black, Color_Actions\{color.black}>
fluent COLOR_RED = <color.red, Color_Actions\{color.red}>
fluent COLOR_BLUE = <color.blue, Color_Actions\{color.blue}>
fluent COLOR_YELLOW = <color.yellow, Color_Actions\{color.yellow}>
fluent COLOR_WHITE = <color.white, Color_Actions\{color.white}>

set Detect_Actions = {detect.green, detect.black, detect.red, detect.blue, detect.yellow, detect.white}
fluent DETECT_GREEN = <detect.green, Detect_Actions\{detect.green}>
fluent DETECT_BLACK = <detect.black, Detect_Actions\{detect.black}>
fluent DETECT_RED = <detect.red, Detect_Actions\{detect.red}>
fluent DETECT_BLUE = <detect.blue, Detect_Actions\{detect.blue}>
fluent DETECT_YELLOW = <detect.yellow, Detect_Actions\{detect.yellow}>
fluent DETECT_WHITE = <detect.white, Detect_Actions\{detect.white}>

set Ack_ver_Actions = {ack_ver.move, ack_ver.sleep}
fluent ACK_VER_MOVE = <ack_ver.move, Ack_ver_Actions\{ack_ver.move}>
fluent ACK_VER_SLEEP = <ack_ver.sleep, Ack_ver_Actions\{ack_ver.sleep}>

set Ack_hor_Actions = {ack_hor.move, ack_hor.sleep}
fluent ACK_HOR_MOVE = <ack_hor.move, Ack_hor_Actions\{ack_hor.move}>
fluent ACK_HOR_SLEEP = <ack_hor.sleep, Ack_hor_Actions\{ack_hor.sleep}>

set Ack_bot_Actions = {ack_bot.move, ack_bot.sleep}
fluent ACK_BOT_MOVE = <ack_bot.move, Ack_bot_Actions\{ack_bot.move}>
fluent ACK_BOT_SLEEP = <ack_bot.sleep, Ack_bot_Actions\{ack_bot.sleep}>

set Starting_pos_Actions = {starting_pos.yes, starting_pos.no}
fluent STARTING_POS_YES = <starting_pos.yes, Starting_pos_Actions\{starting_pos.yes}>
fluent STARTING_POS_NO = <starting_pos.no, Starting_pos_Actions\{starting_pos.no}>

set Edge_Actions = {edge.yes, edge.no}
fluent EDGE_YES = <edge.yes, Edge_Actions\{edge.yes}>
fluent EDGE_NO = <edge.no, Edge_Actions\{edge.no}>

set SpeedButton_Actions = {speedbutton.press, speedbutton.release}
fluent SPEEDBUTTON_PRESS = <speedbutton.press, SpeedButton_Actions\{speedbutton.press}>
fluent SPEEDBUTTON_RELEASE = <speedbutton.release, SpeedButton_Actions\{speedbutton.release}>

set HaltButton_Actions = {haltbutton.press, haltbutton.release}
fluent HALTBUTTON_PRESS = <haltbutton.press, HaltButton_Actions\{haltbutton.press}>
fluent HALTBUTTON_RELEASE = <haltbutton.release, HaltButton_Actions\{haltbutton.release}>

set VerMot_Actions = {vermot.move, vermot.sleep}
fluent VERMOT_MOVE = <vermot.move, VerMot_Actions\{vermot.move}>
fluent VERMOT_SLEEP = <vermot.sleep, VerMot_Actions\{vermot.sleep}>

set HorMot_Actions = {hormot.move, hormot.sleep}
fluent HORMOT_MOVE = <hormot.move, HorMot_Actions\{hormot.move}>
fluent HORMOT_SLEEP = <hormot.sleep, HorMot_Actions\{hormot.sleep}>

set BotMot_Actions = {botmot.seek, botmot.stop, botmot.return}
fluent BOTMOT_SEEK = <botmot.seek, BotMot_Actions\{botmot.seek}>
fluent BOTMOT_STOP = <botmot.stop, BotMot_Actions\{botmot.stop}>
fluent BOTMOT_RETURN = <botmot.return, BotMot_Actions\{botmot.return}>

set Direction_Actions = {direction.right, direction.left}
fluent DIRECTION_RIGHT = <direction.right, Direction_Actions\{direction.right}>
fluent DIRECTION_LEFT = <direction.left, Direction_Actions\{direction.left}>

set MotSpeed_Actions = {motspeed.level1, motspeed.level2, motspeed.level3}
fluent MOTSPEED_LEVEL1 = <motspeed.level1, MotSpeed_Actions\{motspeed.level1}>
fluent MOTSPEED_LEVEL2 = <motspeed.level2, MotSpeed_Actions\{motspeed.level2}>
fluent MOTSPEED_LEVEL3 = <motspeed.level3, MotSpeed_Actions\{motspeed.level3}>

set Spec_currentColor_Actions = {spec_currentcolor.green, spec_currentcolor.black, spec_currentcolor.red, spec_currentcolor.blue, spec_currentcolor.yellow, spec_currentcolor.white}
fluent SPEC_CURRENTCOLOR_GREEN = <spec_currentcolor.green, Spec_currentColor_Actions\{spec_currentcolor.green}>
fluent SPEC_CURRENTCOLOR_BLACK = <spec_currentcolor.black, Spec_currentColor_Actions\{spec_currentcolor.black}>
fluent SPEC_CURRENTCOLOR_RED = <spec_currentcolor.red, Spec_currentColor_Actions\{spec_currentcolor.red}>
fluent SPEC_CURRENTCOLOR_BLUE = <spec_currentcolor.blue, Spec_currentColor_Actions\{spec_currentcolor.blue}>
fluent SPEC_CURRENTCOLOR_YELLOW = <spec_currentcolor.yellow, Spec_currentColor_Actions\{spec_currentcolor.yellow}>
fluent SPEC_CURRENTCOLOR_WHITE = <spec_currentcolor.white, Spec_currentColor_Actions\{spec_currentcolor.white}>

set Spec_dropping_Actions = {spec_dropping, not_spec_dropping}
fluent SPEC_DROPPING = <spec_dropping, Spec_dropping_Actions\{spec_dropping}>

set Spec_speedButtonValidPressed_Actions = {spec_speedbuttonvalidpressed, not_spec_speedbuttonvalidpressed}
fluent SPEC_SPEEDBUTTONVALIDPRESSED = <spec_speedbuttonvalidpressed, Spec_speedButtonValidPressed_Actions\{spec_speedbuttonvalidpressed}>

set Spec_pauseButtonValidPressed_Actions = {spec_pausebuttonvalidpressed, not_spec_pausebuttonvalidpressed}
fluent SPEC_PAUSEBUTTONVALIDPRESSED = <spec_pausebuttonvalidpressed, Spec_pauseButtonValidPressed_Actions\{spec_pausebuttonvalidpressed}>

set Spec_pausing_Actions = {spec_pausing.pause, spec_pausing.go}
fluent SPEC_PAUSING_PAUSE = <spec_pausing.pause, Spec_pausing_Actions\{spec_pausing.pause}>
fluent SPEC_PAUSING_GO = <spec_pausing.go, Spec_pausing_Actions\{spec_pausing.go}>

set Spec_waiting_ack_ver_mot_Actions = {spec_waiting_ack_ver_mot, not_spec_waiting_ack_ver_mot}
fluent SPEC_WAITING_ACK_VER_MOT = <spec_waiting_ack_ver_mot, Spec_waiting_ack_ver_mot_Actions\{spec_waiting_ack_ver_mot}>

set Spec_waiting_ack_hor_mot_Actions = {spec_waiting_ack_hor_mot, not_spec_waiting_ack_hor_mot}
fluent SPEC_WAITING_ACK_HOR_MOT = <spec_waiting_ack_hor_mot, Spec_waiting_ack_hor_mot_Actions\{spec_waiting_ack_hor_mot}>

set SYS_CONSTRAINT_1273_respondsTo_responded_Actions = {sys_constraint[1273].respondsto.responded, not_sys_constraint[1273].respondsto.responded}
fluent SYS_CONSTRAINT_1273_RESPONDSTO_RESPONDED = <sys_constraint[1273].respondsto.responded, SYS_CONSTRAINT_1273_respondsTo_responded_Actions\{sys_constraint[1273].respondsto.responded}>

set ENV_CONSTRAINT_1282_respondsTo_responded_Actions = {env_constraint[1282].respondsto.responded, not_env_constraint[1282].respondsto.responded}
fluent ENV_CONSTRAINT_1282_RESPONDSTO_RESPONDED = <env_constraint[1282].respondsto.responded, ENV_CONSTRAINT_1282_respondsTo_responded_Actions\{env_constraint[1282].respondsto.responded}>

set ENV_CONSTRAINT_1284_respondsTo_responded_Actions = {env_constraint[1284].respondsto.responded, not_env_constraint[1284].respondsto.responded}
fluent ENV_CONSTRAINT_1284_RESPONDSTO_RESPONDED = <env_constraint[1284].respondsto.responded, ENV_CONSTRAINT_1284_respondsTo_responded_Actions\{env_constraint[1284].respondsto.responded}>

set ENV_CONSTRAINT_1286_respondsTo_responded_Actions = {env_constraint[1286].respondsto.responded, not_env_constraint[1286].respondsto.responded}
fluent ENV_CONSTRAINT_1286_RESPONDSTO_RESPONDED = <env_constraint[1286].respondsto.responded, ENV_CONSTRAINT_1286_respondsTo_responded_Actions\{env_constraint[1286].respondsto.responded}>

set PREV_1254_106_Actions = {prev_1254_106, not_prev_1254_106}
fluent PREV_1254_106 = <prev_1254_106, PREV_1254_106_Actions\{prev_1254_106}>

set PREV_1259_107_Actions = {prev_1259_107, not_prev_1259_107}
fluent PREV_1259_107 = <prev_1259_107, PREV_1259_107_Actions\{prev_1259_107}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && (MOTSPEED_LEVEL1 && !SPEC_DROPPING)))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && (((!SPEC_DROPPING && MOTSPEED_LEVEL1) && SPEC_PAUSING_GO) && DIRECTION_RIGHT)))
minimal || Initial_1_min =  Initial_1.
//property divided into 1 subproperties.
ltl_property Initial_2 = (!tick W (tick && !SPEC_WAITING_ACK_VER_MOT))
minimal || Initial_2_min =  Initial_2.
//property divided into 1 subproperties.
ltl_property Initial_3 = (!tick W (tick && !SPEC_WAITING_ACK_HOR_MOT))
minimal || Initial_3_min =  Initial_3.
//property divided into 1 subproperties.
ltl_property Initial_4 = (!tick W (tick && SYS_CONSTRAINT_1273_RESPONDSTO_RESPONDED))
minimal || Initial_4_min =  Initial_4.
//property divided into 1 subproperties.
ltl_property Initial_5 = (!tick W (tick && ENV_CONSTRAINT_1282_RESPONDSTO_RESPONDED))
minimal || Initial_5_min =  Initial_5.
//property divided into 1 subproperties.
ltl_property Initial_6 = (!tick W (tick && ENV_CONSTRAINT_1284_RESPONDSTO_RESPONDED))
minimal || Initial_6_min =  Initial_6.
//property divided into 1 subproperties.
ltl_property Initial_7 = (!tick W (tick && ENV_CONSTRAINT_1286_RESPONDSTO_RESPONDED))
minimal || Initial_7_min =  Initial_7.
//property divided into 1 subproperties.
ltl_property Initial_8 = (!tick W (tick && !PREV_1254_106))
minimal || Initial_8_min =  Initial_8.
//property divided into 1 subproperties.
ltl_property Initial_9 = (!tick W (tick && !PREV_1259_107))
minimal || Initial_9_min =  Initial_9.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min ||  Initial_2_min ||  Initial_3_min ||  Initial_4_min ||  Initial_5_min ||  Initial_6_min ||  Initial_7_min ||  Initial_8_min ||  Initial_9_min).


//property divided into 1 subproperties.
ltl_property G0 = [](tick -> (VERMOT_MOVE -> (BOTMOT_STOP && HORMOT_SLEEP)))
minimal ||G0_min = G0.

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> (HORMOT_MOVE -> (BOTMOT_STOP && VERMOT_SLEEP)))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> (!BOTMOT_STOP -> (VERMOT_SLEEP && HORMOT_SLEEP)))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
ltl_property G3 = [](tick -> ((ACK_VER_MOVE || ACK_HOR_MOVE) -> ((VERMOT_SLEEP && HORMOT_SLEEP) && BOTMOT_STOP)))
minimal ||G3_min = G3.

//property divided into 1 subproperties.
ltl_property G4 = [](tick -> (!VERMOT_SLEEP || (((!SPEC_CURRENTCOLOR_BLACK || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLACK)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLACK))) || SPEC_CURRENTCOLOR_BLACK)) && ((!SPEC_CURRENTCOLOR_BLUE || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLUE)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLUE))) || SPEC_CURRENTCOLOR_BLUE)) && ((!SPEC_CURRENTCOLOR_GREEN || X(!tick W (tick && (SPEC_CURRENTCOLOR_GREEN)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_GREEN))) || SPEC_CURRENTCOLOR_GREEN)) && ((!SPEC_CURRENTCOLOR_RED || X(!tick W (tick && (SPEC_CURRENTCOLOR_RED)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_RED))) || SPEC_CURRENTCOLOR_RED)) && ((!SPEC_CURRENTCOLOR_WHITE || X(!tick W (tick && (SPEC_CURRENTCOLOR_WHITE)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_WHITE))) || SPEC_CURRENTCOLOR_WHITE)) && ((!SPEC_CURRENTCOLOR_YELLOW || X(!tick W (tick && (SPEC_CURRENTCOLOR_YELLOW)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_YELLOW))) || SPEC_CURRENTCOLOR_YELLOW)))))
minimal ||G4_min = G4.

//property divided into 1 subproperties.
ltl_property G5 = [](tick -> (!VERMOT_MOVE || (((!COLOR_BLACK || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLACK)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLACK))) || COLOR_BLACK)) && ((!COLOR_BLUE || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLUE)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLUE))) || COLOR_BLUE)) && ((!COLOR_GREEN || X(!tick W (tick && (SPEC_CURRENTCOLOR_GREEN)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_GREEN))) || COLOR_GREEN)) && ((!COLOR_RED || X(!tick W (tick && (SPEC_CURRENTCOLOR_RED)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_RED))) || COLOR_RED)) && ((!COLOR_WHITE || X(!tick W (tick && (SPEC_CURRENTCOLOR_WHITE)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_WHITE))) || COLOR_WHITE)) && ((!COLOR_YELLOW || X(!tick W (tick && (SPEC_CURRENTCOLOR_YELLOW)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_YELLOW))) || COLOR_YELLOW)))))
minimal ||G5_min = G5.

//property divided into 2 subproperties.
ltl_property G6 = [](tick -> ((((SPEC_DROPPING && X(!tick W (tick && (!SPEC_DROPPING)))) || (X(!tick W (tick && (SPEC_DROPPING))) && !SPEC_DROPPING))) || (VERMOT_SLEEP && HORMOT_SLEEP)))
minimal ||G6_min = G6.
ltl_property G7 = [](tick -> ((!VERMOT_SLEEP || !HORMOT_SLEEP) || (((!SPEC_DROPPING || X(!tick W (tick && (SPEC_DROPPING)))) && (X(!tick W (tick && (!SPEC_DROPPING))) || SPEC_DROPPING)))))
minimal ||G7_min = G7.



//property divided into 1 subproperties.
ltl_property G8 = [](tick -> ((((SPEC_PAUSING_GO && !SPEC_DROPPING) && STARTING_POS_NO) && (ACK_VER_SLEEP && ACK_HOR_SLEEP)) <-> BOTMOT_RETURN))
minimal ||G8_min = G8.

//property divided into 1 subproperties.
ltl_property G9 = [](tick -> (((!SPEC_DROPPING && STARTING_POS_YES) && COLOR_BLACK) -> ((VERMOT_SLEEP && HORMOT_SLEEP) && BOTMOT_STOP)))
minimal ||G9_min = G9.

//property divided into 1 subproperties.
ltl_property G10 = [](tick -> ((COLOR_BLACK || SPEC_DROPPING) -> VERMOT_SLEEP))
minimal ||G10_min = G10.

//property divided into 1 subproperties.
ltl_property G11 = [](tick -> (((((SPEC_PAUSING_GO && !SPEC_DROPPING) && STARTING_POS_YES) && ((ACK_VER_SLEEP && ACK_HOR_SLEEP) && ACK_BOT_SLEEP)) && !COLOR_BLACK) <-> VERMOT_MOVE))
minimal ||G11_min = G11.

//property divided into 2 subproperties.
ltl_property G12 = [](tick -> (!EDGE_YES || (((DIRECTION_LEFT && X(!tick W (tick && (!DIRECTION_LEFT)))) || (X(!tick W (tick && (DIRECTION_LEFT))) && !DIRECTION_LEFT)) || ((DIRECTION_RIGHT && X(!tick W (tick && (!DIRECTION_RIGHT)))) || (X(!tick W (tick && (DIRECTION_RIGHT))) && !DIRECTION_RIGHT)))))
minimal ||G12_min = G12.
ltl_property G13 = [](tick -> ((((!DIRECTION_LEFT || X(!tick W (tick && (DIRECTION_LEFT)))) && (X(!tick W (tick && (!DIRECTION_LEFT))) || DIRECTION_LEFT)) && ((!DIRECTION_RIGHT || X(!tick W (tick && (DIRECTION_RIGHT)))) && (X(!tick W (tick && (!DIRECTION_RIGHT))) || DIRECTION_RIGHT))) || EDGE_YES))
minimal ||G13_min = G13.

//property divided into 1 subproperties.
ltl_property G14 = [](tick -> ((((SPEC_PAUSING_GO && SPEC_DROPPING) && (!(DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) || !(DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) || !(DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) || !(DETECT_RED <-> SPEC_CURRENTCOLOR_RED) || !(DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) || !(DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW))) && (ACK_VER_SLEEP && ACK_HOR_SLEEP)) <-> BOTMOT_SEEK))
minimal ||G14_min = G14.

//property divided into 1 subproperties.
ltl_property G15 = [](tick -> ((((SPEC_PAUSING_GO && SPEC_DROPPING) && ((DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) && (DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) && (DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) && (DETECT_RED <-> SPEC_CURRENTCOLOR_RED) && (DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) && (DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW))) && (ACK_VER_SLEEP && ACK_HOR_SLEEP)) <-> HORMOT_MOVE))
minimal ||G15_min = G15.

//property divided into 1 subproperties.
ltl_property G16 = [](tick -> ((SPEEDBUTTON_PRESS && PREV_1254_106) <-> SPEC_SPEEDBUTTONVALIDPRESSED))
minimal ||G16_min = G16.

//property divided into 1 subproperties.
ltl_property G17 = [](tick -> ((SPEC_SPEEDBUTTONVALIDPRESSED && MOTSPEED_LEVEL1) -> X(!tick W (tick && MOTSPEED_LEVEL2))))
minimal ||G17_min = G17.

//property divided into 1 subproperties.
ltl_property G18 = [](tick -> ((SPEC_SPEEDBUTTONVALIDPRESSED && MOTSPEED_LEVEL2) -> X(!tick W (tick && MOTSPEED_LEVEL3))))
minimal ||G18_min = G18.

//property divided into 1 subproperties.
ltl_property G19 = [](tick -> ((SPEC_SPEEDBUTTONVALIDPRESSED && MOTSPEED_LEVEL3) -> X(!tick W (tick && MOTSPEED_LEVEL1))))
minimal ||G19_min = G19.

//property divided into 1 subproperties.
ltl_property G20 = [](tick -> (SPEC_SPEEDBUTTONVALIDPRESSED || (((!MOTSPEED_LEVEL1 || X(!tick W (tick && (MOTSPEED_LEVEL1)))) && (X(!tick W (tick && (!MOTSPEED_LEVEL1))) || MOTSPEED_LEVEL1)) && ((!MOTSPEED_LEVEL2 || X(!tick W (tick && (MOTSPEED_LEVEL2)))) && (X(!tick W (tick && (!MOTSPEED_LEVEL2))) || MOTSPEED_LEVEL2)) && ((!MOTSPEED_LEVEL3 || X(!tick W (tick && (MOTSPEED_LEVEL3)))) && (X(!tick W (tick && (!MOTSPEED_LEVEL3))) || MOTSPEED_LEVEL3)))))
minimal ||G20_min = G20.

//property divided into 1 subproperties.
ltl_property G21 = [](tick -> ((HALTBUTTON_PRESS && PREV_1259_107) <-> SPEC_PAUSEBUTTONVALIDPRESSED))
minimal ||G21_min = G21.

//property divided into 1 subproperties.
ltl_property G22 = [](tick -> (((SPEC_PAUSEBUTTONVALIDPRESSED && SPEC_PAUSING_GO) || (!SPEC_PAUSEBUTTONVALIDPRESSED && SPEC_PAUSING_PAUSE)) -> X(!tick W (tick && SPEC_PAUSING_PAUSE))))
minimal ||G22_min = G22.

//property divided into 1 subproperties.
ltl_property G23 = [](tick -> (((!SPEC_PAUSEBUTTONVALIDPRESSED && SPEC_PAUSING_GO) || (SPEC_PAUSEBUTTONVALIDPRESSED && SPEC_PAUSING_PAUSE)) -> X(!tick W (tick && SPEC_PAUSING_GO))))
minimal ||G23_min = G23.

//property divided into 1 subproperties.
ltl_property G24 = [](tick -> (SPEC_PAUSING_PAUSE -> ((VERMOT_SLEEP && HORMOT_SLEEP) && BOTMOT_STOP)))
minimal ||G24_min = G24.


//property divided into 1 subproperties.
ltl_property G25 = [](tick -> ((!SPEC_WAITING_ACK_VER_MOT && !VERMOT_MOVE) -> X(!tick W (tick && !SPEC_WAITING_ACK_VER_MOT))))
minimal ||G25_min = G25.

//property divided into 1 subproperties.
ltl_property G26 = [](tick -> ((!SPEC_WAITING_ACK_VER_MOT && VERMOT_MOVE) -> X(!tick W (tick && SPEC_WAITING_ACK_VER_MOT))))
minimal ||G26_min = G26.

//property divided into 1 subproperties.
ltl_property G27 = [](tick -> ((SPEC_WAITING_ACK_VER_MOT && ACK_VER_SLEEP) -> X(!tick W (tick && !SPEC_WAITING_ACK_VER_MOT))))
minimal ||G27_min = G27.

//property divided into 1 subproperties.
ltl_property G28 = [](tick -> ((SPEC_WAITING_ACK_VER_MOT && !ACK_VER_SLEEP) -> X(!tick W (tick && SPEC_WAITING_ACK_VER_MOT))))
minimal ||G28_min = G28.


//property divided into 1 subproperties.
ltl_property G29 = [](tick -> ((!SPEC_WAITING_ACK_HOR_MOT && !HORMOT_MOVE) -> X(!tick W (tick && !SPEC_WAITING_ACK_HOR_MOT))))
minimal ||G29_min = G29.

//property divided into 1 subproperties.
ltl_property G30 = [](tick -> ((!SPEC_WAITING_ACK_HOR_MOT && HORMOT_MOVE) -> X(!tick W (tick && SPEC_WAITING_ACK_HOR_MOT))))
minimal ||G30_min = G30.

//property divided into 1 subproperties.
ltl_property G31 = [](tick -> ((SPEC_WAITING_ACK_HOR_MOT && ACK_HOR_SLEEP) -> X(!tick W (tick && !SPEC_WAITING_ACK_HOR_MOT))))
minimal ||G31_min = G31.

//property divided into 1 subproperties.
ltl_property G32 = [](tick -> ((SPEC_WAITING_ACK_HOR_MOT && !ACK_HOR_SLEEP) -> X(!tick W (tick && SPEC_WAITING_ACK_HOR_MOT))))
minimal ||G32_min = G32.

//property divided into 1 subproperties.
assert G_l0 = (tick && HORMOT_MOVE)

//property divided into 1 subproperties.
assert G_l1 = (tick && SYS_CONSTRAINT_1273_RESPONDSTO_RESPONDED)


//property divided into 2 subproperties.
ltl_property G33 = [](tick -> (X(!tick W (tick && !SYS_CONSTRAINT_1273_RESPONDSTO_RESPONDED)) || ((HORMOT_MOVE && ((DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) && (DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) && (DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) && (DETECT_RED <-> SPEC_CURRENTCOLOR_RED) && (DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) && (DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW))) || (SYS_CONSTRAINT_1273_RESPONDSTO_RESPONDED && COLOR_BLACK))))
minimal ||G33_min = G33.
ltl_property G34 = [](tick -> (((!HORMOT_MOVE || (!(DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) || !(DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) || !(DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) || !(DETECT_RED <-> SPEC_CURRENTCOLOR_RED) || !(DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) || !(DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW))) && (!SYS_CONSTRAINT_1273_RESPONDSTO_RESPONDED || !COLOR_BLACK)) || X(!tick W (tick && SYS_CONSTRAINT_1273_RESPONDSTO_RESPONDED))))
minimal ||G34_min = G34.


//property divided into 2 subproperties.
ltl_property G35 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_1282_RESPONDSTO_RESPONDED)) || (SPEC_PAUSING_GO || (ENV_CONSTRAINT_1282_RESPONDSTO_RESPONDED && !SPEC_PAUSING_PAUSE))))
minimal ||G35_min = G35.
ltl_property G36 = [](tick -> ((!SPEC_PAUSING_GO && (!ENV_CONSTRAINT_1282_RESPONDSTO_RESPONDED || SPEC_PAUSING_PAUSE)) || X(!tick W (tick && ENV_CONSTRAINT_1282_RESPONDSTO_RESPONDED))))
minimal ||G36_min = G36.


//property divided into 2 subproperties.
ltl_property G37 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_1284_RESPONDSTO_RESPONDED)) || (ACK_VER_SLEEP || (ENV_CONSTRAINT_1284_RESPONDSTO_RESPONDED && !SPEC_WAITING_ACK_VER_MOT))))
minimal ||G37_min = G37.
ltl_property G38 = [](tick -> ((!ACK_VER_SLEEP && (!ENV_CONSTRAINT_1284_RESPONDSTO_RESPONDED || SPEC_WAITING_ACK_VER_MOT)) || X(!tick W (tick && ENV_CONSTRAINT_1284_RESPONDSTO_RESPONDED))))
minimal ||G38_min = G38.


//property divided into 2 subproperties.
ltl_property G39 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_1286_RESPONDSTO_RESPONDED)) || (ACK_HOR_SLEEP || (ENV_CONSTRAINT_1286_RESPONDSTO_RESPONDED && !SPEC_WAITING_ACK_HOR_MOT))))
minimal ||G39_min = G39.
ltl_property G40 = [](tick -> ((!ACK_HOR_SLEEP && (!ENV_CONSTRAINT_1286_RESPONDSTO_RESPONDED || SPEC_WAITING_ACK_HOR_MOT)) || X(!tick W (tick && ENV_CONSTRAINT_1286_RESPONDSTO_RESPONDED))))
minimal ||G40_min = G40.


//property divided into 2 subproperties.
ltl_property G41 = [](tick -> (X(!tick W (tick && !PREV_1254_106)) || SPEEDBUTTON_RELEASE))
minimal ||G41_min = G41.
ltl_property G42 = [](tick -> (!SPEEDBUTTON_RELEASE || X(!tick W (tick && PREV_1254_106))))
minimal ||G42_min = G42.


//property divided into 2 subproperties.
ltl_property G43 = [](tick -> (X(!tick W (tick && !PREV_1259_107)) || HALTBUTTON_RELEASE))
minimal ||G43_min = G43.
ltl_property G44 = [](tick -> (!HALTBUTTON_RELEASE || X(!tick W (tick && PREV_1259_107))))
minimal ||G44_min = G44.

//property divided into 1 subproperties.
constraint A0 = [](tock -> (!SPEC_WAITING_ACK_VER_MOT -> ACK_VER_SLEEP))
minimal ||A0_min = A0.

//property divided into 1 subproperties.
constraint A1 = [](tock -> (!SPEC_WAITING_ACK_HOR_MOT -> ACK_HOR_SLEEP))
minimal ||A1_min = A1.

//property divided into 1 subproperties.
assert A_l0 = (tock && !COLOR_BLACK)

//property divided into 1 subproperties.
assert A_l1 = (tock && ACK_HOR_MOVE)

//property divided into 1 subproperties.
assert A_l2 = (tock && ENV_CONSTRAINT_1282_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l3 = (tock && ENV_CONSTRAINT_1284_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l4 = (tock && ENV_CONSTRAINT_1286_RESPONDSTO_RESPONDED)



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0_min || A1_min || G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min || G22_min || G23_min || G24_min || G25_min || G26_min || G27_min || G28_min || G29_min || G30_min || G31_min || G32_min || G33_min || G34_min || G35_min || G36_min || G37_min || G38_min || G39_min || G40_min || G41_min || G42_min || G43_min || G44_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_l2, A_l3, A_l4, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0, G_l1}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && []<>A_l2 && []<>A_l3 && []<>A_l4 && A_clock) -> ([]<>G_l0 && []<>G_l1))
assert ASM =   ([]<>A_l0 && []<>A_l1 && []<>A_l2 && []<>A_l3 && []<>A_l4 && A_clock)
assert GNT = ([]<>G_l0 && []<>G_l1)
progress Time  = {tick}
