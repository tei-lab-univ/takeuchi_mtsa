//unrealizable/PcarLTL_769_PCar_fixed_unrealizable automatically_translated 

set ControlledActions = {throttle.fwd, throttle.bwd, throttle.stop, throttle.blocking_bwd, throttle.blocking_fwd, steer.right, steer.left, steer.center, steer.easy_right, steer.easy_left, parkcommand.start, parkcommand.stop, parkcommand.check, spec_policy.seeking, spec_policy.measuring, spec_policy.parking_0, spec_policy.parking_1, spec_policy.parking_2, spec_policy.parked, tick, env_constraint[3173].respondsto.responded, not_env_constraint[3173].respondsto.responded, prev_3165_250, not_prev_3165_250}
set UncontrolledActions = {obstacle.clear, obstacle.blocked, sidesense.close, sidesense.centered, sidesense.far, sidesense.close_parking, sidesense.parallel_parking, sidesense.perpendicular, parkresult.na, parkresult.parallel, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Obstacle_Actions = {obstacle.clear, obstacle.blocked}
fluent OBSTACLE_CLEAR = <obstacle.clear, Obstacle_Actions\{obstacle.clear}>
fluent OBSTACLE_BLOCKED = <obstacle.blocked, Obstacle_Actions\{obstacle.blocked}>

set SideSense_Actions = {sidesense.close, sidesense.centered, sidesense.far, sidesense.close_parking, sidesense.parallel_parking, sidesense.perpendicular}
fluent SIDESENSE_CLOSE = <sidesense.close, SideSense_Actions\{sidesense.close}>
fluent SIDESENSE_CENTERED = <sidesense.centered, SideSense_Actions\{sidesense.centered}>
fluent SIDESENSE_FAR = <sidesense.far, SideSense_Actions\{sidesense.far}>
fluent SIDESENSE_CLOSE_PARKING = <sidesense.close_parking, SideSense_Actions\{sidesense.close_parking}>
fluent SIDESENSE_PARALLEL_PARKING = <sidesense.parallel_parking, SideSense_Actions\{sidesense.parallel_parking}>
fluent SIDESENSE_PERPENDICULAR = <sidesense.perpendicular, SideSense_Actions\{sidesense.perpendicular}>

set ParkResult_Actions = {parkresult.na, parkresult.parallel}
fluent PARKRESULT_NA = <parkresult.na, ParkResult_Actions\{parkresult.na}>
fluent PARKRESULT_PARALLEL = <parkresult.parallel, ParkResult_Actions\{parkresult.parallel}>

set Throttle_Actions = {throttle.fwd, throttle.bwd, throttle.stop, throttle.blocking_bwd, throttle.blocking_fwd}
fluent THROTTLE_FWD = <throttle.fwd, Throttle_Actions\{throttle.fwd}>
fluent THROTTLE_BWD = <throttle.bwd, Throttle_Actions\{throttle.bwd}>
fluent THROTTLE_STOP = <throttle.stop, Throttle_Actions\{throttle.stop}>
fluent THROTTLE_BLOCKING_BWD = <throttle.blocking_bwd, Throttle_Actions\{throttle.blocking_bwd}>
fluent THROTTLE_BLOCKING_FWD = <throttle.blocking_fwd, Throttle_Actions\{throttle.blocking_fwd}>

set Steer_Actions = {steer.right, steer.left, steer.center, steer.easy_right, steer.easy_left}
fluent STEER_RIGHT = <steer.right, Steer_Actions\{steer.right}>
fluent STEER_LEFT = <steer.left, Steer_Actions\{steer.left}>
fluent STEER_CENTER = <steer.center, Steer_Actions\{steer.center}>
fluent STEER_EASY_RIGHT = <steer.easy_right, Steer_Actions\{steer.easy_right}>
fluent STEER_EASY_LEFT = <steer.easy_left, Steer_Actions\{steer.easy_left}>

set ParkCommand_Actions = {parkcommand.start, parkcommand.stop, parkcommand.check}
fluent PARKCOMMAND_START = <parkcommand.start, ParkCommand_Actions\{parkcommand.start}>
fluent PARKCOMMAND_STOP = <parkcommand.stop, ParkCommand_Actions\{parkcommand.stop}>
fluent PARKCOMMAND_CHECK = <parkcommand.check, ParkCommand_Actions\{parkcommand.check}>

set Spec_policy_Actions = {spec_policy.seeking, spec_policy.measuring, spec_policy.parking_0, spec_policy.parking_1, spec_policy.parking_2, spec_policy.parked}
fluent SPEC_POLICY_SEEKING = <spec_policy.seeking, Spec_policy_Actions\{spec_policy.seeking}>
fluent SPEC_POLICY_MEASURING = <spec_policy.measuring, Spec_policy_Actions\{spec_policy.measuring}>
fluent SPEC_POLICY_PARKING_0 = <spec_policy.parking_0, Spec_policy_Actions\{spec_policy.parking_0}>
fluent SPEC_POLICY_PARKING_1 = <spec_policy.parking_1, Spec_policy_Actions\{spec_policy.parking_1}>
fluent SPEC_POLICY_PARKING_2 = <spec_policy.parking_2, Spec_policy_Actions\{spec_policy.parking_2}>
fluent SPEC_POLICY_PARKED = <spec_policy.parked, Spec_policy_Actions\{spec_policy.parked}>

set ENV_CONSTRAINT_3173_respondsTo_responded_Actions = {env_constraint[3173].respondsto.responded, not_env_constraint[3173].respondsto.responded}
fluent ENV_CONSTRAINT_3173_RESPONDSTO_RESPONDED = <env_constraint[3173].respondsto.responded, ENV_CONSTRAINT_3173_respondsTo_responded_Actions\{env_constraint[3173].respondsto.responded}>

set PREV_3165_250_Actions = {prev_3165_250, not_prev_3165_250}
fluent PREV_3165_250 = <prev_3165_250, PREV_3165_250_Actions\{prev_3165_250}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && SPEC_POLICY_SEEKING))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && ENV_CONSTRAINT_3173_RESPONDSTO_RESPONDED))
minimal || Initial_1_min =  Initial_1.
//property divided into 1 subproperties.
ltl_property Initial_2 = (!tick W (tick && !PREV_3165_250))
minimal || Initial_2_min =  Initial_2.
//property divided into 1 subproperties.
constraint Initial_3 = (!tock W (tock && (SIDESENSE_CENTERED && PARKRESULT_NA)))
minimal || Initial_3_min =  Initial_3.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min ||  Initial_2_min ||  Initial_3_min).



//property divided into 1 subproperties.
assert G_l0 = (tick && SPEC_POLICY_PARKED)

//property divided into 1 subproperties.
ltl_property G0 = [](tick -> (SPEC_POLICY_SEEKING -> ((X(!tick W (tick && SPEC_POLICY_SEEKING)) || X(!tick W (tick && SPEC_POLICY_MEASURING))) || X(!tick W (tick && SPEC_POLICY_PARKING_0)))))
minimal ||G0_min = G0.

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> (SPEC_POLICY_SEEKING -> (((THROTTLE_FWD || THROTTLE_STOP) || THROTTLE_BWD) && PARKCOMMAND_STOP)))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> (SPEC_POLICY_MEASURING -> ((X(!tick W (tick && SPEC_POLICY_SEEKING)) || X(!tick W (tick && SPEC_POLICY_MEASURING))) || X(!tick W (tick && SPEC_POLICY_PARKING_0)))))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
ltl_property G3 = [](tick -> (SPEC_POLICY_PARKING_0 -> X(!tick W (tick && SPEC_POLICY_PARKING_1))))
minimal ||G3_min = G3.

//property divided into 1 subproperties.
ltl_property G4 = [](tick -> (SPEC_POLICY_PARKING_1 -> X(!tick W (tick && SPEC_POLICY_PARKING_2))))
minimal ||G4_min = G4.

//property divided into 1 subproperties.
ltl_property G5 = [](tick -> (SPEC_POLICY_PARKING_2 -> X(!tick W (tick && SPEC_POLICY_PARKED))))
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> (((OBSTACLE_CLEAR && SPEC_POLICY_SEEKING) && PARKRESULT_NA) -> THROTTLE_FWD))
minimal ||G6_min = G6.

//property divided into 1 subproperties.
ltl_property G7 = [](tick -> ((OBSTACLE_BLOCKED && (SPEC_POLICY_MEASURING || SPEC_POLICY_SEEKING)) -> (X(!tick W (tick && SPEC_POLICY_SEEKING)) && !((THROTTLE_FWD || THROTTLE_BLOCKING_FWD) || THROTTLE_BLOCKING_BWD))))
minimal ||G7_min = G7.

//property divided into 1 subproperties.
ltl_property G8 = [](tick -> (OBSTACLE_BLOCKED -> PARKCOMMAND_STOP))
minimal ||G8_min = G8.

//property divided into 1 subproperties.
ltl_property G9 = [](tick -> ((SPEC_POLICY_SEEKING && PARKRESULT_NA) -> !THROTTLE_STOP))
minimal ||G9_min = G9.

//property divided into 1 subproperties.
ltl_property G10 = [](tick -> ((SPEC_POLICY_SEEKING && SIDESENSE_CLOSE) -> STEER_EASY_LEFT))
minimal ||G10_min = G10.

//property divided into 1 subproperties.
ltl_property G11 = [](tick -> ((SPEC_POLICY_SEEKING && SIDESENSE_FAR) -> STEER_EASY_RIGHT))
minimal ||G11_min = G11.

//property divided into 1 subproperties.
ltl_property G12 = [](tick -> ((SPEC_POLICY_SEEKING && SIDESENSE_CENTERED) -> STEER_CENTER))
minimal ||G12_min = G12.

//property divided into 1 subproperties.
ltl_property G13 = [](tick -> ((SPEC_POLICY_MEASURING && SIDESENSE_CLOSE_PARKING) -> STEER_EASY_LEFT))
minimal ||G13_min = G13.

//property divided into 1 subproperties.
ltl_property G14 = [](tick -> ((SPEC_POLICY_MEASURING && SIDESENSE_PERPENDICULAR) -> STEER_EASY_RIGHT))
minimal ||G14_min = G14.

//property divided into 1 subproperties.
ltl_property G15 = [](tick -> ((SPEC_POLICY_MEASURING && SIDESENSE_PARALLEL_PARKING) -> STEER_CENTER))
minimal ||G15_min = G15.

//property divided into 1 subproperties.
ltl_property G16 = [](tick -> (((!SPEC_POLICY_SEEKING || ((!SIDESENSE_CLOSE && !SIDESENSE_CENTERED) && !SIDESENSE_FAR)) || !PARKRESULT_NA) || ((((X(!tick W (tick && (!SPEC_POLICY_MEASURING))) || SPEC_POLICY_MEASURING) && (!SPEC_POLICY_MEASURING || X(!tick W (tick && (SPEC_POLICY_MEASURING))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKED))) || SPEC_POLICY_PARKED) && (!SPEC_POLICY_PARKED || X(!tick W (tick && (SPEC_POLICY_PARKED))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_0))) || SPEC_POLICY_PARKING_0) && (!SPEC_POLICY_PARKING_0 || X(!tick W (tick && (SPEC_POLICY_PARKING_0))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_1))) || SPEC_POLICY_PARKING_1) && (!SPEC_POLICY_PARKING_1 || X(!tick W (tick && (SPEC_POLICY_PARKING_1))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_2))) || SPEC_POLICY_PARKING_2) && (!SPEC_POLICY_PARKING_2 || X(!tick W (tick && (SPEC_POLICY_PARKING_2))))) && ((X(!tick W (tick && (!SPEC_POLICY_SEEKING))) || SPEC_POLICY_SEEKING) && (!SPEC_POLICY_SEEKING || X(!tick W (tick && (SPEC_POLICY_SEEKING)))))) && PARKCOMMAND_STOP)))
minimal ||G16_min = G16.

//property divided into 1 subproperties.
ltl_property G17 = [](tick -> (((SPEC_POLICY_SEEKING && !((SIDESENSE_CLOSE || SIDESENSE_CENTERED) || SIDESENSE_FAR)) && OBSTACLE_CLEAR) -> (((X(!tick W (tick && SPEC_POLICY_MEASURING)) && THROTTLE_FWD) && PARKCOMMAND_START) && STEER_CENTER)))
minimal ||G17_min = G17.

//property divided into 1 subproperties.
ltl_property G18 = [](tick -> (((SPEC_POLICY_MEASURING && ((SIDESENSE_CLOSE || SIDESENSE_CENTERED) || SIDESENSE_FAR)) && PARKRESULT_NA) -> (X(!tick W (tick && SPEC_POLICY_SEEKING)) && PARKCOMMAND_STOP)))
minimal ||G18_min = G18.

//property divided into 1 subproperties.
ltl_property G19 = [](tick -> ((((!SPEC_POLICY_MEASURING || ((SIDESENSE_CLOSE || SIDESENSE_CENTERED) || SIDESENSE_FAR)) || !OBSTACLE_CLEAR) || !PARKRESULT_NA) || (((((X(!tick W (tick && (!SPEC_POLICY_MEASURING))) || SPEC_POLICY_MEASURING) && (!SPEC_POLICY_MEASURING || X(!tick W (tick && (SPEC_POLICY_MEASURING))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKED))) || SPEC_POLICY_PARKED) && (!SPEC_POLICY_PARKED || X(!tick W (tick && (SPEC_POLICY_PARKED))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_0))) || SPEC_POLICY_PARKING_0) && (!SPEC_POLICY_PARKING_0 || X(!tick W (tick && (SPEC_POLICY_PARKING_0))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_1))) || SPEC_POLICY_PARKING_1) && (!SPEC_POLICY_PARKING_1 || X(!tick W (tick && (SPEC_POLICY_PARKING_1))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_2))) || SPEC_POLICY_PARKING_2) && (!SPEC_POLICY_PARKING_2 || X(!tick W (tick && (SPEC_POLICY_PARKING_2))))) && ((X(!tick W (tick && (!SPEC_POLICY_SEEKING))) || SPEC_POLICY_SEEKING) && (!SPEC_POLICY_SEEKING || X(!tick W (tick && (SPEC_POLICY_SEEKING)))))) && THROTTLE_FWD) && PARKCOMMAND_CHECK)))
minimal ||G19_min = G19.

//property divided into 1 subproperties.
ltl_property G20 = [](tick -> ((((SPEC_POLICY_MEASURING || (SPEC_POLICY_SEEKING && PREV_3165_250)) && OBSTACLE_CLEAR) && PARKRESULT_PARALLEL) -> ((X(!tick W (tick && SPEC_POLICY_PARKING_0)) && THROTTLE_BLOCKING_FWD) && PARKCOMMAND_STOP)))
minimal ||G20_min = G20.

//property divided into 1 subproperties.
ltl_property G21 = [](tick -> (SPEC_POLICY_PARKING_0 -> (((X(!tick W (tick && SPEC_POLICY_PARKING_1)) && THROTTLE_STOP) && STEER_CENTER) && PARKCOMMAND_STOP)))
minimal ||G21_min = G21.

//property divided into 1 subproperties.
ltl_property G22 = [](tick -> (SPEC_POLICY_PARKING_1 -> (((X(!tick W (tick && SPEC_POLICY_PARKING_2)) && THROTTLE_BLOCKING_BWD) && STEER_RIGHT) && PARKCOMMAND_STOP)))
minimal ||G22_min = G22.

//property divided into 1 subproperties.
ltl_property G23 = [](tick -> (SPEC_POLICY_PARKING_2 -> (((X(!tick W (tick && SPEC_POLICY_PARKED)) && THROTTLE_BLOCKING_BWD) && STEER_LEFT) && PARKCOMMAND_STOP)))
minimal ||G23_min = G23.

//property divided into 1 subproperties.
ltl_property G24 = [](tick -> (!SPEC_POLICY_PARKED || ((((((X(!tick W (tick && (!SPEC_POLICY_MEASURING))) || SPEC_POLICY_MEASURING) && (!SPEC_POLICY_MEASURING || X(!tick W (tick && (SPEC_POLICY_MEASURING))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKED))) || SPEC_POLICY_PARKED) && (!SPEC_POLICY_PARKED || X(!tick W (tick && (SPEC_POLICY_PARKED))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_0))) || SPEC_POLICY_PARKING_0) && (!SPEC_POLICY_PARKING_0 || X(!tick W (tick && (SPEC_POLICY_PARKING_0))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_1))) || SPEC_POLICY_PARKING_1) && (!SPEC_POLICY_PARKING_1 || X(!tick W (tick && (SPEC_POLICY_PARKING_1))))) && ((X(!tick W (tick && (!SPEC_POLICY_PARKING_2))) || SPEC_POLICY_PARKING_2) && (!SPEC_POLICY_PARKING_2 || X(!tick W (tick && (SPEC_POLICY_PARKING_2))))) && ((X(!tick W (tick && (!SPEC_POLICY_SEEKING))) || SPEC_POLICY_SEEKING) && (!SPEC_POLICY_SEEKING || X(!tick W (tick && (SPEC_POLICY_SEEKING)))))) && THROTTLE_STOP) && STEER_CENTER) && PARKCOMMAND_STOP)))
minimal ||G24_min = G24.


//property divided into 2 subproperties.
ltl_property G25 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_3173_RESPONDSTO_RESPONDED)) || (OBSTACLE_CLEAR || (ENV_CONSTRAINT_3173_RESPONDSTO_RESPONDED && !THROTTLE_BWD))))
minimal ||G25_min = G25.
ltl_property G26 = [](tick -> ((!OBSTACLE_CLEAR && (!ENV_CONSTRAINT_3173_RESPONDSTO_RESPONDED || THROTTLE_BWD)) || X(!tick W (tick && ENV_CONSTRAINT_3173_RESPONDSTO_RESPONDED))))
minimal ||G26_min = G26.


//property divided into 2 subproperties.
ltl_property G27 = [](tick -> (X(!tick W (tick && !PREV_3165_250)) || SPEC_POLICY_MEASURING))
minimal ||G27_min = G27.
ltl_property G28 = [](tick -> (!SPEC_POLICY_MEASURING || X(!tick W (tick && PREV_3165_250))))
minimal ||G28_min = G28.

//property divided into 1 subproperties.
constraint A0 = [](tock -> (SPEC_POLICY_SEEKING -> X(!tock W (tock && PARKRESULT_NA))))
minimal ||A0_min = A0.

//property divided into 1 subproperties.
assert A_l0 = (tock && ((SPEC_POLICY_MEASURING && PARKRESULT_PARALLEL) && OBSTACLE_CLEAR))


//property divided into 1 subproperties.
constraint A1 = [](tock -> (!THROTTLE_STOP || ((((!OBSTACLE_BLOCKED || X(!tock W (tock && (OBSTACLE_BLOCKED)))) && (X(!tock W (tock && (!OBSTACLE_BLOCKED))) || OBSTACLE_BLOCKED)) && ((!OBSTACLE_CLEAR || X(!tock W (tock && (OBSTACLE_CLEAR)))) && (X(!tock W (tock && (!OBSTACLE_CLEAR))) || OBSTACLE_CLEAR))) && (((!SIDESENSE_CENTERED || X(!tock W (tock && (SIDESENSE_CENTERED)))) && (X(!tock W (tock && (!SIDESENSE_CENTERED))) || SIDESENSE_CENTERED)) && ((!SIDESENSE_CLOSE || X(!tock W (tock && (SIDESENSE_CLOSE)))) && (X(!tock W (tock && (!SIDESENSE_CLOSE))) || SIDESENSE_CLOSE)) && ((!SIDESENSE_CLOSE_PARKING || X(!tock W (tock && (SIDESENSE_CLOSE_PARKING)))) && (X(!tock W (tock && (!SIDESENSE_CLOSE_PARKING))) || SIDESENSE_CLOSE_PARKING)) && ((!SIDESENSE_FAR || X(!tock W (tock && (SIDESENSE_FAR)))) && (X(!tock W (tock && (!SIDESENSE_FAR))) || SIDESENSE_FAR)) && ((!SIDESENSE_PARALLEL_PARKING || X(!tock W (tock && (SIDESENSE_PARALLEL_PARKING)))) && (X(!tock W (tock && (!SIDESENSE_PARALLEL_PARKING))) || SIDESENSE_PARALLEL_PARKING)) && ((!SIDESENSE_PERPENDICULAR || X(!tock W (tock && (SIDESENSE_PERPENDICULAR)))) && (X(!tock W (tock && (!SIDESENSE_PERPENDICULAR))) || SIDESENSE_PERPENDICULAR))))))
minimal ||A1_min = A1.

//property divided into 1 subproperties.
assert A_l1 = (tock && ENV_CONSTRAINT_3173_RESPONDSTO_RESPONDED)



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0_min || A1_min || G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min || G22_min || G23_min || G24_min || G25_min || G26_min || G27_min || G28_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && A_clock) -> ([]<>G_l0))
assert ASM =   ([]<>A_l0 && []<>A_l1 && A_clock)
assert GNT = ([]<>G_l0)
progress Time  = {tick}
