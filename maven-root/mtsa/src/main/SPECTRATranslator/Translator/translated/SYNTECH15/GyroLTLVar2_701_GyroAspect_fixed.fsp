//GyroLTLVar2_701_GyroAspect_fixed automatically_translated 

set ControlledActions = {balancer.stp, balancer.fwd, balancer.bwd, balancer.turn_left, balancer.turn_right, balancerspeed.slow, balancerspeed.regular, balancerspeed.fast, spec_mode.auto, spec_mode.manual, spec_manualcmd.stp, spec_manualcmd.fwd, spec_manualcmd.bwd, spec_manualcmd.turn_left, spec_manualcmd.turn_right, spec_blockedstate.s0, spec_blockedstate.s1, spec_blockedstate.s2, tick, env_constraint[2540].respondsto.responded, not_env_constraint[2540].respondsto.responded, env_constraint[2548].respondsto.responded, not_env_constraint[2548].respondsto.responded, env_constraint[2549].respondsto.responded, not_env_constraint[2549].respondsto.responded, env_constraint[2550].respondsto.responded, not_env_constraint[2550].respondsto.responded, prev_2529_206, not_prev_2529_206, prev_2529_207, not_prev_2529_207, prev_2529_208, not_prev_2529_208, prev_2529_209, not_prev_2529_209, prev_2529_210, not_prev_2529_210}
set UncontrolledActions = {frontdistsense.clear, frontdistsense.blocked, backdistsense.clear, backdistsense.blocked, isready, not_isready, bluetoothcmd.stp, bluetoothcmd.fwd, bluetoothcmd.bwd, bluetoothcmd.turn_left, bluetoothcmd.turn_right, bluetoothcmd.switch_mode, bluetoothcmd.speed_down, bluetoothcmd.speed_up, bluetoothcmd.nop, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set FrontDistSense_Actions = {frontdistsense.clear, frontdistsense.blocked}
fluent FRONTDISTSENSE_CLEAR = <frontdistsense.clear, FrontDistSense_Actions\{frontdistsense.clear}>
fluent FRONTDISTSENSE_BLOCKED = <frontdistsense.blocked, FrontDistSense_Actions\{frontdistsense.blocked}>

set BackDistSense_Actions = {backdistsense.clear, backdistsense.blocked}
fluent BACKDISTSENSE_CLEAR = <backdistsense.clear, BackDistSense_Actions\{backdistsense.clear}>
fluent BACKDISTSENSE_BLOCKED = <backdistsense.blocked, BackDistSense_Actions\{backdistsense.blocked}>

set IsReady_Actions = {isready, not_isready}
fluent ISREADY = <isready, IsReady_Actions\{isready}>

set BluetoothCmd_Actions = {bluetoothcmd.stp, bluetoothcmd.fwd, bluetoothcmd.bwd, bluetoothcmd.turn_left, bluetoothcmd.turn_right, bluetoothcmd.switch_mode, bluetoothcmd.speed_down, bluetoothcmd.speed_up, bluetoothcmd.nop}
fluent BLUETOOTHCMD_STP = <bluetoothcmd.stp, BluetoothCmd_Actions\{bluetoothcmd.stp}>
fluent BLUETOOTHCMD_FWD = <bluetoothcmd.fwd, BluetoothCmd_Actions\{bluetoothcmd.fwd}>
fluent BLUETOOTHCMD_BWD = <bluetoothcmd.bwd, BluetoothCmd_Actions\{bluetoothcmd.bwd}>
fluent BLUETOOTHCMD_TURN_LEFT = <bluetoothcmd.turn_left, BluetoothCmd_Actions\{bluetoothcmd.turn_left}>
fluent BLUETOOTHCMD_TURN_RIGHT = <bluetoothcmd.turn_right, BluetoothCmd_Actions\{bluetoothcmd.turn_right}>
fluent BLUETOOTHCMD_SWITCH_MODE = <bluetoothcmd.switch_mode, BluetoothCmd_Actions\{bluetoothcmd.switch_mode}>
fluent BLUETOOTHCMD_SPEED_DOWN = <bluetoothcmd.speed_down, BluetoothCmd_Actions\{bluetoothcmd.speed_down}>
fluent BLUETOOTHCMD_SPEED_UP = <bluetoothcmd.speed_up, BluetoothCmd_Actions\{bluetoothcmd.speed_up}>
fluent BLUETOOTHCMD_NOP = <bluetoothcmd.nop, BluetoothCmd_Actions\{bluetoothcmd.nop}>

set Balancer_Actions = {balancer.stp, balancer.fwd, balancer.bwd, balancer.turn_left, balancer.turn_right}
fluent BALANCER_STP = <balancer.stp, Balancer_Actions\{balancer.stp}>
fluent BALANCER_FWD = <balancer.fwd, Balancer_Actions\{balancer.fwd}>
fluent BALANCER_BWD = <balancer.bwd, Balancer_Actions\{balancer.bwd}>
fluent BALANCER_TURN_LEFT = <balancer.turn_left, Balancer_Actions\{balancer.turn_left}>
fluent BALANCER_TURN_RIGHT = <balancer.turn_right, Balancer_Actions\{balancer.turn_right}>

set BalancerSpeed_Actions = {balancerspeed.slow, balancerspeed.regular, balancerspeed.fast}
fluent BALANCERSPEED_SLOW = <balancerspeed.slow, BalancerSpeed_Actions\{balancerspeed.slow}>
fluent BALANCERSPEED_REGULAR = <balancerspeed.regular, BalancerSpeed_Actions\{balancerspeed.regular}>
fluent BALANCERSPEED_FAST = <balancerspeed.fast, BalancerSpeed_Actions\{balancerspeed.fast}>

set Spec_mode_Actions = {spec_mode.auto, spec_mode.manual}
fluent SPEC_MODE_AUTO = <spec_mode.auto, Spec_mode_Actions\{spec_mode.auto}>
fluent SPEC_MODE_MANUAL = <spec_mode.manual, Spec_mode_Actions\{spec_mode.manual}>

set Spec_manualCmd_Actions = {spec_manualcmd.stp, spec_manualcmd.fwd, spec_manualcmd.bwd, spec_manualcmd.turn_left, spec_manualcmd.turn_right}
fluent SPEC_MANUALCMD_STP = <spec_manualcmd.stp, Spec_manualCmd_Actions\{spec_manualcmd.stp}>
fluent SPEC_MANUALCMD_FWD = <spec_manualcmd.fwd, Spec_manualCmd_Actions\{spec_manualcmd.fwd}>
fluent SPEC_MANUALCMD_BWD = <spec_manualcmd.bwd, Spec_manualCmd_Actions\{spec_manualcmd.bwd}>
fluent SPEC_MANUALCMD_TURN_LEFT = <spec_manualcmd.turn_left, Spec_manualCmd_Actions\{spec_manualcmd.turn_left}>
fluent SPEC_MANUALCMD_TURN_RIGHT = <spec_manualcmd.turn_right, Spec_manualCmd_Actions\{spec_manualcmd.turn_right}>

set Spec_blockedState_Actions = {spec_blockedstate.s0, spec_blockedstate.s1, spec_blockedstate.s2}
fluent SPEC_BLOCKEDSTATE_S0 = <spec_blockedstate.s0, Spec_blockedState_Actions\{spec_blockedstate.s0}>
fluent SPEC_BLOCKEDSTATE_S1 = <spec_blockedstate.s1, Spec_blockedState_Actions\{spec_blockedstate.s1}>
fluent SPEC_BLOCKEDSTATE_S2 = <spec_blockedstate.s2, Spec_blockedState_Actions\{spec_blockedstate.s2}>

set ENV_CONSTRAINT_2540_respondsTo_responded_Actions = {env_constraint[2540].respondsto.responded, not_env_constraint[2540].respondsto.responded}
fluent ENV_CONSTRAINT_2540_RESPONDSTO_RESPONDED = <env_constraint[2540].respondsto.responded, ENV_CONSTRAINT_2540_respondsTo_responded_Actions\{env_constraint[2540].respondsto.responded}>

set ENV_CONSTRAINT_2548_respondsTo_responded_Actions = {env_constraint[2548].respondsto.responded, not_env_constraint[2548].respondsto.responded}
fluent ENV_CONSTRAINT_2548_RESPONDSTO_RESPONDED = <env_constraint[2548].respondsto.responded, ENV_CONSTRAINT_2548_respondsTo_responded_Actions\{env_constraint[2548].respondsto.responded}>

set ENV_CONSTRAINT_2549_respondsTo_responded_Actions = {env_constraint[2549].respondsto.responded, not_env_constraint[2549].respondsto.responded}
fluent ENV_CONSTRAINT_2549_RESPONDSTO_RESPONDED = <env_constraint[2549].respondsto.responded, ENV_CONSTRAINT_2549_respondsTo_responded_Actions\{env_constraint[2549].respondsto.responded}>

set ENV_CONSTRAINT_2550_respondsTo_responded_Actions = {env_constraint[2550].respondsto.responded, not_env_constraint[2550].respondsto.responded}
fluent ENV_CONSTRAINT_2550_RESPONDSTO_RESPONDED = <env_constraint[2550].respondsto.responded, ENV_CONSTRAINT_2550_respondsTo_responded_Actions\{env_constraint[2550].respondsto.responded}>

set PREV_2529_206_Actions = {prev_2529_206, not_prev_2529_206}
fluent PREV_2529_206 = <prev_2529_206, PREV_2529_206_Actions\{prev_2529_206}>

set PREV_2529_207_Actions = {prev_2529_207, not_prev_2529_207}
fluent PREV_2529_207 = <prev_2529_207, PREV_2529_207_Actions\{prev_2529_207}>

set PREV_2529_208_Actions = {prev_2529_208, not_prev_2529_208}
fluent PREV_2529_208 = <prev_2529_208, PREV_2529_208_Actions\{prev_2529_208}>

set PREV_2529_209_Actions = {prev_2529_209, not_prev_2529_209}
fluent PREV_2529_209 = <prev_2529_209, PREV_2529_209_Actions\{prev_2529_209}>

set PREV_2529_210_Actions = {prev_2529_210, not_prev_2529_210}
fluent PREV_2529_210 = <prev_2529_210, PREV_2529_210_Actions\{prev_2529_210}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && BALANCER_STP))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && SPEC_BLOCKEDSTATE_S0))
minimal || Initial_1_min =  Initial_1.
//property divided into 1 subproperties.
ltl_property Initial_2 = (!tick W (tick && SPEC_MODE_AUTO))
minimal || Initial_2_min =  Initial_2.
//property divided into 1 subproperties.
ltl_property Initial_3 = (!tick W (tick && BALANCERSPEED_REGULAR))
minimal || Initial_3_min =  Initial_3.
//property divided into 1 subproperties.
ltl_property Initial_4 = (!tick W (tick && ENV_CONSTRAINT_2540_RESPONDSTO_RESPONDED))
minimal || Initial_4_min =  Initial_4.
//property divided into 1 subproperties.
ltl_property Initial_5 = (!tick W (tick && ENV_CONSTRAINT_2548_RESPONDSTO_RESPONDED))
minimal || Initial_5_min =  Initial_5.
//property divided into 1 subproperties.
ltl_property Initial_6 = (!tick W (tick && ENV_CONSTRAINT_2549_RESPONDSTO_RESPONDED))
minimal || Initial_6_min =  Initial_6.
//property divided into 1 subproperties.
ltl_property Initial_7 = (!tick W (tick && ENV_CONSTRAINT_2550_RESPONDSTO_RESPONDED))
minimal || Initial_7_min =  Initial_7.
//property divided into 1 subproperties.
ltl_property Initial_8 = (!tick W (tick && !PREV_2529_206))
minimal || Initial_8_min =  Initial_8.
//property divided into 1 subproperties.
ltl_property Initial_9 = (!tick W (tick && !PREV_2529_207))
minimal || Initial_9_min =  Initial_9.
//property divided into 1 subproperties.
ltl_property Initial_10 = (!tick W (tick && !PREV_2529_208))
minimal || Initial_10_min =  Initial_10.
//property divided into 1 subproperties.
ltl_property Initial_11 = (!tick W (tick && !PREV_2529_209))
minimal || Initial_11_min =  Initial_11.
//property divided into 1 subproperties.
ltl_property Initial_12 = (!tick W (tick && !PREV_2529_210))
minimal || Initial_12_min =  Initial_12.
//property divided into 1 subproperties.
constraint Initial_13 = (!tock W (tock && !ISREADY))
minimal || Initial_13_min =  Initial_13.
//property divided into 1 subproperties.
constraint Initial_14 = (!tock W (tock && BLUETOOTHCMD_NOP))
minimal || Initial_14_min =  Initial_14.
//property divided into 1 subproperties.
constraint Initial_15 = (!tock W (tock && (FRONTDISTSENSE_CLEAR && BACKDISTSENSE_CLEAR)))
minimal || Initial_15_min =  Initial_15.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min ||  Initial_2_min ||  Initial_3_min ||  Initial_4_min ||  Initial_5_min ||  Initial_6_min ||  Initial_7_min ||  Initial_8_min ||  Initial_9_min ||  Initial_10_min ||  Initial_11_min ||  Initial_12_min ||  Initial_13_min ||  Initial_14_min ||  Initial_15_min).



//property divided into 1 subproperties.
ltl_property G0 = [](tick -> (!ISREADY -> BALANCER_STP))
minimal ||G0_min = G0.

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> (BALANCER_FWD -> FRONTDISTSENSE_CLEAR))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> (BALANCER_BWD -> BACKDISTSENSE_CLEAR))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
assert G_l0 = (tick && (SPEC_MODE_AUTO -> BALANCER_FWD))


//property divided into 1 subproperties.
ltl_property G3 = [](tick -> ((SPEC_MODE_AUTO && ISREADY) -> ((((((((SPEC_BLOCKEDSTATE_S0 && ((!FRONTDISTSENSE_BLOCKED && !FRONTDISTSENSE_CLEAR) || FRONTDISTSENSE_CLEAR)) && X(!tick W (tick && SPEC_BLOCKEDSTATE_S0))) || ((SPEC_BLOCKEDSTATE_S0 && ((FRONTDISTSENSE_BLOCKED && !(BALANCER_TURN_RIGHT || BALANCER_TURN_LEFT)) && !FRONTDISTSENSE_CLEAR)) && X(!tick W (tick && SPEC_BLOCKEDSTATE_S1)))) || ((SPEC_BLOCKEDSTATE_S0 && ((FRONTDISTSENSE_BLOCKED && (BALANCER_TURN_RIGHT || BALANCER_TURN_LEFT)) && !FRONTDISTSENSE_CLEAR)) && X(!tick W (tick && SPEC_BLOCKEDSTATE_S2)))) || (SPEC_BLOCKEDSTATE_S1 && X(!tick W (tick && SPEC_BLOCKEDSTATE_S1)))) || ((SPEC_BLOCKEDSTATE_S2 && FRONTDISTSENSE_CLEAR) && X(!tick W (tick && SPEC_BLOCKEDSTATE_S0)))) || ((SPEC_BLOCKEDSTATE_S2 && (!(BALANCER_TURN_RIGHT || BALANCER_TURN_LEFT) && !FRONTDISTSENSE_CLEAR)) && X(!tick W (tick && SPEC_BLOCKEDSTATE_S1)))) || ((SPEC_BLOCKEDSTATE_S2 && ((BALANCER_TURN_RIGHT || BALANCER_TURN_LEFT) && !FRONTDISTSENSE_CLEAR)) && X(!tick W (tick && SPEC_BLOCKEDSTATE_S2))))))
minimal ||G3_min = G3.

//property divided into 1 subproperties.
assert G_l1 = (tick && (SPEC_MODE_AUTO -> (SPEC_BLOCKEDSTATE_S0 || SPEC_BLOCKEDSTATE_S2)))


//property divided into 1 subproperties.
ltl_property G4 = [](tick -> (((((SPEC_MODE_AUTO && BLUETOOTHCMD_SWITCH_MODE) && X(!tick W (tick && SPEC_MODE_MANUAL))) && SPEC_MANUALCMD_STP) || ((SPEC_MODE_MANUAL && BLUETOOTHCMD_SWITCH_MODE) && X(!tick W (tick && SPEC_MODE_AUTO)))) || (!BLUETOOTHCMD_SWITCH_MODE && (((X(!tick W (tick && (!SPEC_MODE_AUTO))) || SPEC_MODE_AUTO) && (!SPEC_MODE_AUTO || X(!tick W (tick && (SPEC_MODE_AUTO))))) && ((X(!tick W (tick && (!SPEC_MODE_MANUAL))) || SPEC_MODE_MANUAL) && (!SPEC_MODE_MANUAL || X(!tick W (tick && (SPEC_MODE_MANUAL)))))))))
minimal ||G4_min = G4.


//property divided into 1 subproperties.
ltl_property G5 = [](tick -> ((((((((BALANCERSPEED_SLOW && BLUETOOTHCMD_SPEED_DOWN) && X(!tick W (tick && BALANCERSPEED_SLOW))) || ((BALANCERSPEED_SLOW && BLUETOOTHCMD_SPEED_UP) && X(!tick W (tick && BALANCERSPEED_REGULAR)))) || ((BALANCERSPEED_REGULAR && BLUETOOTHCMD_SPEED_DOWN) && X(!tick W (tick && BALANCERSPEED_SLOW)))) || ((BALANCERSPEED_REGULAR && BLUETOOTHCMD_SPEED_UP) && X(!tick W (tick && BALANCERSPEED_FAST)))) || ((BALANCERSPEED_FAST && BLUETOOTHCMD_SPEED_DOWN) && X(!tick W (tick && BALANCERSPEED_REGULAR)))) || ((BALANCERSPEED_FAST && BLUETOOTHCMD_SPEED_UP) && X(!tick W (tick && BALANCERSPEED_FAST)))) || ((!BLUETOOTHCMD_SPEED_DOWN && !BLUETOOTHCMD_SPEED_UP) && (((X(!tick W (tick && (!BALANCERSPEED_FAST))) || BALANCERSPEED_FAST) && (!BALANCERSPEED_FAST || X(!tick W (tick && (BALANCERSPEED_FAST))))) && ((X(!tick W (tick && (!BALANCERSPEED_REGULAR))) || BALANCERSPEED_REGULAR) && (!BALANCERSPEED_REGULAR || X(!tick W (tick && (BALANCERSPEED_REGULAR))))) && ((X(!tick W (tick && (!BALANCERSPEED_SLOW))) || BALANCERSPEED_SLOW) && (!BALANCERSPEED_SLOW || X(!tick W (tick && (BALANCERSPEED_SLOW)))))))))
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> (SPEC_MODE_MANUAL -> (((((BLUETOOTHCMD_STP -> SPEC_MANUALCMD_STP) && (BLUETOOTHCMD_FWD -> SPEC_MANUALCMD_FWD)) && (BLUETOOTHCMD_BWD -> SPEC_MANUALCMD_BWD)) && (BLUETOOTHCMD_TURN_LEFT -> SPEC_MANUALCMD_TURN_LEFT)) && (BLUETOOTHCMD_TURN_RIGHT -> SPEC_MANUALCMD_TURN_RIGHT))))
minimal ||G6_min = G6.

//property divided into 1 subproperties.
ltl_property G7 = [](tick -> (SPEC_MODE_MANUAL -> (!((((BLUETOOTHCMD_STP || BLUETOOTHCMD_FWD) || BLUETOOTHCMD_BWD) || BLUETOOTHCMD_TURN_LEFT) || BLUETOOTHCMD_TURN_RIGHT) -> (((((PREV_2529_206 -> SPEC_MANUALCMD_STP) && (PREV_2529_207 -> SPEC_MANUALCMD_FWD)) && (PREV_2529_208 -> SPEC_MANUALCMD_BWD)) && (PREV_2529_209 -> SPEC_MANUALCMD_TURN_LEFT)) && (PREV_2529_210 -> SPEC_MANUALCMD_TURN_RIGHT)))))
minimal ||G7_min = G7.

//property divided into 1 subproperties.
ltl_property G8 = [](tick -> (SPEC_MODE_MANUAL -> (SPEC_MANUALCMD_FWD -> ((FRONTDISTSENSE_CLEAR && ISREADY) -> BALANCER_FWD))))
minimal ||G8_min = G8.

//property divided into 1 subproperties.
ltl_property G9 = [](tick -> (SPEC_MODE_MANUAL -> (SPEC_MANUALCMD_BWD -> ((BACKDISTSENSE_CLEAR && ISREADY) -> BALANCER_BWD))))
minimal ||G9_min = G9.

//property divided into 1 subproperties.
ltl_property G10 = [](tick -> (SPEC_MODE_MANUAL -> (SPEC_MANUALCMD_TURN_RIGHT -> (ISREADY -> BALANCER_TURN_RIGHT))))
minimal ||G10_min = G10.

//property divided into 1 subproperties.
ltl_property G11 = [](tick -> (SPEC_MODE_MANUAL -> (SPEC_MANUALCMD_TURN_LEFT -> (ISREADY -> BALANCER_TURN_LEFT))))
minimal ||G11_min = G11.

//property divided into 1 subproperties.
ltl_property G12 = [](tick -> (SPEC_MODE_MANUAL -> (((SPEC_MANUALCMD_STP || (SPEC_MANUALCMD_FWD && FRONTDISTSENSE_BLOCKED)) || (SPEC_MANUALCMD_BWD && BACKDISTSENSE_BLOCKED)) -> (ISREADY -> BALANCER_STP))))
minimal ||G12_min = G12.


//property divided into 2 subproperties.
ltl_property G13 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_2540_RESPONDSTO_RESPONDED)) || (((BALANCER_FWD || BALANCER_STP) || FRONTDISTSENSE_CLEAR) || (ENV_CONSTRAINT_2540_RESPONDSTO_RESPONDED && (BALANCER_FWD || BALANCER_STP)))))
minimal ||G13_min = G13.
ltl_property G14 = [](tick -> ((((!BALANCER_FWD && !BALANCER_STP) && !FRONTDISTSENSE_CLEAR) && (!ENV_CONSTRAINT_2540_RESPONDSTO_RESPONDED || (!BALANCER_FWD && !BALANCER_STP))) || X(!tick W (tick && ENV_CONSTRAINT_2540_RESPONDSTO_RESPONDED))))
minimal ||G14_min = G14.


//property divided into 2 subproperties.
ltl_property G15 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_2548_RESPONDSTO_RESPONDED)) || (((BALANCER_BWD || BALANCER_STP) || BACKDISTSENSE_CLEAR) || (ENV_CONSTRAINT_2548_RESPONDSTO_RESPONDED && (BALANCER_BWD || BALANCER_STP)))))
minimal ||G15_min = G15.
ltl_property G16 = [](tick -> ((((!BALANCER_BWD && !BALANCER_STP) && !BACKDISTSENSE_CLEAR) && (!ENV_CONSTRAINT_2548_RESPONDSTO_RESPONDED || (!BALANCER_BWD && !BALANCER_STP))) || X(!tick W (tick && ENV_CONSTRAINT_2548_RESPONDSTO_RESPONDED))))
minimal ||G16_min = G16.


//property divided into 2 subproperties.
ltl_property G17 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_2549_RESPONDSTO_RESPONDED)) || ((!BALANCER_FWD || FRONTDISTSENSE_BLOCKED) || (ENV_CONSTRAINT_2549_RESPONDSTO_RESPONDED && !BALANCER_FWD))))
minimal ||G17_min = G17.
ltl_property G18 = [](tick -> (((BALANCER_FWD && !FRONTDISTSENSE_BLOCKED) && (!ENV_CONSTRAINT_2549_RESPONDSTO_RESPONDED || BALANCER_FWD)) || X(!tick W (tick && ENV_CONSTRAINT_2549_RESPONDSTO_RESPONDED))))
minimal ||G18_min = G18.


//property divided into 2 subproperties.
ltl_property G19 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_2550_RESPONDSTO_RESPONDED)) || ((!BALANCER_BWD || BACKDISTSENSE_BLOCKED) || (ENV_CONSTRAINT_2550_RESPONDSTO_RESPONDED && !BALANCER_BWD))))
minimal ||G19_min = G19.
ltl_property G20 = [](tick -> (((BALANCER_BWD && !BACKDISTSENSE_BLOCKED) && (!ENV_CONSTRAINT_2550_RESPONDSTO_RESPONDED || BALANCER_BWD)) || X(!tick W (tick && ENV_CONSTRAINT_2550_RESPONDSTO_RESPONDED))))
minimal ||G20_min = G20.


//property divided into 2 subproperties.
ltl_property G21 = [](tick -> (X(!tick W (tick && !PREV_2529_206)) || SPEC_MANUALCMD_STP))
minimal ||G21_min = G21.
ltl_property G22 = [](tick -> (!SPEC_MANUALCMD_STP || X(!tick W (tick && PREV_2529_206))))
minimal ||G22_min = G22.


//property divided into 2 subproperties.
ltl_property G23 = [](tick -> (X(!tick W (tick && !PREV_2529_207)) || SPEC_MANUALCMD_FWD))
minimal ||G23_min = G23.
ltl_property G24 = [](tick -> (!SPEC_MANUALCMD_FWD || X(!tick W (tick && PREV_2529_207))))
minimal ||G24_min = G24.


//property divided into 2 subproperties.
ltl_property G25 = [](tick -> (X(!tick W (tick && !PREV_2529_208)) || SPEC_MANUALCMD_BWD))
minimal ||G25_min = G25.
ltl_property G26 = [](tick -> (!SPEC_MANUALCMD_BWD || X(!tick W (tick && PREV_2529_208))))
minimal ||G26_min = G26.


//property divided into 2 subproperties.
ltl_property G27 = [](tick -> (X(!tick W (tick && !PREV_2529_209)) || SPEC_MANUALCMD_TURN_LEFT))
minimal ||G27_min = G27.
ltl_property G28 = [](tick -> (!SPEC_MANUALCMD_TURN_LEFT || X(!tick W (tick && PREV_2529_209))))
minimal ||G28_min = G28.


//property divided into 2 subproperties.
ltl_property G29 = [](tick -> (X(!tick W (tick && !PREV_2529_210)) || SPEC_MANUALCMD_TURN_RIGHT))
minimal ||G29_min = G29.
ltl_property G30 = [](tick -> (!SPEC_MANUALCMD_TURN_RIGHT || X(!tick W (tick && PREV_2529_210))))
minimal ||G30_min = G30.




//property divided into 1 subproperties.
assert A_l0 = (tock && ISREADY)

//property divided into 1 subproperties.
constraint A0 = [](tock -> (ISREADY -> X(!tock W (tock && ISREADY))))
minimal ||A0_min = A0.

//property divided into 1 subproperties.
assert A_l1 = (tock && ENV_CONSTRAINT_2540_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l2 = (tock && ENV_CONSTRAINT_2548_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l3 = (tock && ENV_CONSTRAINT_2549_RESPONDSTO_RESPONDED)

//property divided into 1 subproperties.
assert A_l4 = (tock && ENV_CONSTRAINT_2550_RESPONDSTO_RESPONDED)



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0_min || G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min || G22_min || G23_min || G24_min || G25_min || G26_min || G27_min || G28_min || G29_min || G30_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_l2, A_l3, A_l4, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0, G_l1}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && []<>A_l2 && []<>A_l3 && []<>A_l4 && A_clock) -> ([]<>G_l0 && []<>G_l1))
assert ASM =   ([]<>A_l0 && []<>A_l1 && []<>A_l2 && []<>A_l3 && []<>A_l4 && A_clock)
assert GNT = ([]<>G_l0 && []<>G_l1)
progress Time  = {tick}
