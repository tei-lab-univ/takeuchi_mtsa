//unrealizable/HumanoidLTL_531_Humanoid_unrealizable automatically_translated 

set ControlledActions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd, rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd, headmotor.fwd, headmotor.bwd, headmotor.stop, movemode.fwd, movemode.bwd, movemode.turn_left_1, movemode.turn_left_2, state.q0, state.q1, state.q2, state.q3, tick, env_constraint[2976].respondsto.responded, not_env_constraint[2976].respondsto.responded, prev_2971_243, not_prev_2971_243}
set UncontrolledActions = {obstacle.clear, obstacle.blocked, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Obstacle_Actions = {obstacle.clear, obstacle.blocked}
fluent OBSTACLE_CLEAR = <obstacle.clear, Obstacle_Actions\{obstacle.clear}>
fluent OBSTACLE_BLOCKED = <obstacle.blocked, Obstacle_Actions\{obstacle.blocked}>

set LeftMotor_Actions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd}
fluent LEFTMOTOR_FWD = <leftmotor.fwd, LeftMotor_Actions\{leftmotor.fwd}>
fluent LEFTMOTOR_BWD = <leftmotor.bwd, LeftMotor_Actions\{leftmotor.bwd}>
fluent LEFTMOTOR_STOP = <leftmotor.stop, LeftMotor_Actions\{leftmotor.stop}>
fluent LEFTMOTOR_TURN_FWD = <leftmotor.turn_fwd, LeftMotor_Actions\{leftmotor.turn_fwd}>
fluent LEFTMOTOR_TURN_BWD = <leftmotor.turn_bwd, LeftMotor_Actions\{leftmotor.turn_bwd}>
fluent LEFTMOTOR_CALIB_TURN = <leftmotor.calib_turn, LeftMotor_Actions\{leftmotor.calib_turn}>
fluent LEFTMOTOR_CALIB_FWD = <leftmotor.calib_fwd, LeftMotor_Actions\{leftmotor.calib_fwd}>

set RightMotor_Actions = {rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd}
fluent RIGHTMOTOR_FWD = <rightmotor.fwd, RightMotor_Actions\{rightmotor.fwd}>
fluent RIGHTMOTOR_BWD = <rightmotor.bwd, RightMotor_Actions\{rightmotor.bwd}>
fluent RIGHTMOTOR_STOP = <rightmotor.stop, RightMotor_Actions\{rightmotor.stop}>
fluent RIGHTMOTOR_TURN_FWD = <rightmotor.turn_fwd, RightMotor_Actions\{rightmotor.turn_fwd}>
fluent RIGHTMOTOR_TURN_BWD = <rightmotor.turn_bwd, RightMotor_Actions\{rightmotor.turn_bwd}>
fluent RIGHTMOTOR_CALIB_TURN = <rightmotor.calib_turn, RightMotor_Actions\{rightmotor.calib_turn}>
fluent RIGHTMOTOR_CALIB_FWD = <rightmotor.calib_fwd, RightMotor_Actions\{rightmotor.calib_fwd}>

set HeadMotor_Actions = {headmotor.fwd, headmotor.bwd, headmotor.stop}
fluent HEADMOTOR_FWD = <headmotor.fwd, HeadMotor_Actions\{headmotor.fwd}>
fluent HEADMOTOR_BWD = <headmotor.bwd, HeadMotor_Actions\{headmotor.bwd}>
fluent HEADMOTOR_STOP = <headmotor.stop, HeadMotor_Actions\{headmotor.stop}>

set MoveMode_Actions = {movemode.fwd, movemode.bwd, movemode.turn_left_1, movemode.turn_left_2}
fluent MOVEMODE_FWD = <movemode.fwd, MoveMode_Actions\{movemode.fwd}>
fluent MOVEMODE_BWD = <movemode.bwd, MoveMode_Actions\{movemode.bwd}>
fluent MOVEMODE_TURN_LEFT_1 = <movemode.turn_left_1, MoveMode_Actions\{movemode.turn_left_1}>
fluent MOVEMODE_TURN_LEFT_2 = <movemode.turn_left_2, MoveMode_Actions\{movemode.turn_left_2}>

set State_Actions = {state.q0, state.q1, state.q2, state.q3}
fluent STATE_Q0 = <state.q0, State_Actions\{state.q0}>
fluent STATE_Q1 = <state.q1, State_Actions\{state.q1}>
fluent STATE_Q2 = <state.q2, State_Actions\{state.q2}>
fluent STATE_Q3 = <state.q3, State_Actions\{state.q3}>

set ENV_CONSTRAINT_2976_respondsTo_responded_Actions = {env_constraint[2976].respondsto.responded, not_env_constraint[2976].respondsto.responded}
fluent ENV_CONSTRAINT_2976_RESPONDSTO_RESPONDED = <env_constraint[2976].respondsto.responded, ENV_CONSTRAINT_2976_respondsTo_responded_Actions\{env_constraint[2976].respondsto.responded}>

set PREV_2971_243_Actions = {prev_2971_243, not_prev_2971_243}
fluent PREV_2971_243 = <prev_2971_243, PREV_2971_243_Actions\{prev_2971_243}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && ENV_CONSTRAINT_2976_RESPONDSTO_RESPONDED))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && !PREV_2971_243))
minimal || Initial_1_min =  Initial_1.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min).


//property divided into 1 subproperties.
ltl_property G0 = [](tick -> (((!STATE_Q0 || !MOVEMODE_FWD) || X(!tick W (tick && !MOVEMODE_BWD))) || X(!tick W (tick && STATE_Q1))))
minimal ||G0_min = G0.

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> (((!STATE_Q1 || !MOVEMODE_BWD) || X(!tick W (tick && !MOVEMODE_FWD))) || X(!tick W (tick && STATE_Q2))))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> (((!STATE_Q2 || !MOVEMODE_FWD) || X(!tick W (tick && !MOVEMODE_BWD))) || X(!tick W (tick && STATE_Q3))))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
ltl_property G3 = [](tick -> ((!STATE_Q1 || X(!tick W (tick && !MOVEMODE_BWD))) || X(!tick W (tick && STATE_Q1))))
minimal ||G3_min = G3.

//property divided into 1 subproperties.
ltl_property G4 = [](tick -> ((!STATE_Q2 || X(!tick W (tick && !MOVEMODE_FWD))) || X(!tick W (tick && STATE_Q2))))
minimal ||G4_min = G4.

//property divided into 1 subproperties.
ltl_property G5 = [](tick -> !STATE_Q3)
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> ((!MOVEMODE_FWD || !OBSTACLE_BLOCKED) || X(!tick W (tick && !MOVEMODE_FWD))))
minimal ||G6_min = G6.

//property divided into 2 subproperties.
ltl_property G7 = [](tick -> (((!MOVEMODE_FWD || X(!tick W (tick && !MOVEMODE_BWD))) && (!MOVEMODE_BWD || X(!tick W (tick && !MOVEMODE_FWD)))) || ((LEFTMOTOR_FWD && RIGHTMOTOR_BWD) || (LEFTMOTOR_BWD && RIGHTMOTOR_FWD))))
minimal ||G7_min = G7.
ltl_property G8 = [](tick -> (((!LEFTMOTOR_FWD || !RIGHTMOTOR_BWD) && (!LEFTMOTOR_BWD || !RIGHTMOTOR_FWD)) || ((MOVEMODE_FWD && X(!tick W (tick && MOVEMODE_BWD))) || (MOVEMODE_BWD && X(!tick W (tick && MOVEMODE_FWD))))))
minimal ||G8_min = G8.

//property divided into 1 subproperties.
assert G_l0 = (tick && MOVEMODE_FWD)

//property divided into 1 subproperties.
ltl_property G9 = [](tick -> (!MOVEMODE_TURN_LEFT_2 || X(!tick W (tick && !MOVEMODE_BWD))))
minimal ||G9_min = G9.

//property divided into 2 subproperties.
ltl_property G10 = [](tick -> ((!MOVEMODE_FWD || X(!tick W (tick && !MOVEMODE_TURN_LEFT_1))) || (LEFTMOTOR_CALIB_TURN && RIGHTMOTOR_CALIB_TURN)))
minimal ||G10_min = G10.
ltl_property G11 = [](tick -> ((!LEFTMOTOR_CALIB_TURN || !RIGHTMOTOR_CALIB_TURN) || (MOVEMODE_FWD && X(!tick W (tick && MOVEMODE_TURN_LEFT_1)))))
minimal ||G11_min = G11.

//property divided into 1 subproperties.
ltl_property G12 = [](tick -> ((MOVEMODE_FWD && PREV_2971_243) <-> (LEFTMOTOR_CALIB_FWD && RIGHTMOTOR_CALIB_FWD)))
minimal ||G12_min = G12.

//property divided into 2 subproperties.
ltl_property G13 = [](tick -> (!MOVEMODE_TURN_LEFT_1 || X(!tick W (tick && MOVEMODE_TURN_LEFT_2))))
minimal ||G13_min = G13.
ltl_property G14 = [](tick -> (X(!tick W (tick && !MOVEMODE_TURN_LEFT_2)) || MOVEMODE_TURN_LEFT_1))
minimal ||G14_min = G14.

//property divided into 1 subproperties.
ltl_property G15 = [](tick -> (MOVEMODE_TURN_LEFT_1 -> (LEFTMOTOR_FWD && RIGHTMOTOR_TURN_FWD)))
minimal ||G15_min = G15.

//property divided into 1 subproperties.
ltl_property G16 = [](tick -> (MOVEMODE_TURN_LEFT_2 -> (LEFTMOTOR_BWD && RIGHTMOTOR_TURN_BWD)))
minimal ||G16_min = G16.

//property divided into 1 subproperties.
ltl_property G17 = [](tick -> (!(MOVEMODE_TURN_LEFT_1 || MOVEMODE_TURN_LEFT_2) -> !(((LEFTMOTOR_TURN_BWD || RIGHTMOTOR_TURN_BWD) || LEFTMOTOR_TURN_FWD) || RIGHTMOTOR_TURN_FWD)))
minimal ||G17_min = G17.


//property divided into 2 subproperties.
ltl_property G18 = [](tick -> (X(!tick W (tick && !ENV_CONSTRAINT_2976_RESPONDSTO_RESPONDED)) || (OBSTACLE_CLEAR || (ENV_CONSTRAINT_2976_RESPONDSTO_RESPONDED && ((!MOVEMODE_BWD && !MOVEMODE_TURN_LEFT_1) && !MOVEMODE_TURN_LEFT_2)))))
minimal ||G18_min = G18.
ltl_property G19 = [](tick -> ((!OBSTACLE_CLEAR && (!ENV_CONSTRAINT_2976_RESPONDSTO_RESPONDED || ((MOVEMODE_BWD || MOVEMODE_TURN_LEFT_1) || MOVEMODE_TURN_LEFT_2))) || X(!tick W (tick && ENV_CONSTRAINT_2976_RESPONDSTO_RESPONDED))))
minimal ||G19_min = G19.


//property divided into 2 subproperties.
ltl_property G20 = [](tick -> (X(!tick W (tick && !PREV_2971_243)) || MOVEMODE_TURN_LEFT_2))
minimal ||G20_min = G20.
ltl_property G21 = [](tick -> (!MOVEMODE_TURN_LEFT_2 || X(!tick W (tick && PREV_2971_243))))
minimal ||G21_min = G21.

//property divided into 1 subproperties.
assert A_l0 = (tock && OBSTACLE_CLEAR)

//property divided into 1 subproperties.
assert A_l1 = (tock && ENV_CONSTRAINT_2976_RESPONDSTO_RESPONDED)



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && A_clock) -> ([]<>G_l0))
assert ASM =   ([]<>A_l0 && []<>A_l1 && A_clock)
assert GNT = ([]<>G_l0)
progress Time  = {tick}
