//ColorSortLTL3_646_ColorSort_fixed automatically_translated 

set ControlledActions = {vermot.move, vermot.sleep, hormot.move, hormot.sleep, botmot.seek, botmot.stop, botmot.return, motspeed.level1, motspeed.level2, motspeed.level3, spec_state__seek.s0, spec_state__seek.s1, spec_state__seek.s2, spec_currentcolor.red, spec_currentcolor.green, spec_currentcolor.blue, spec_currentcolor.black, spec_currentcolor.yellow, spec_currentcolor.white, spec_dropping, not_spec_dropping, spec_speedbuttonvalidpressed, not_spec_speedbuttonvalidpressed, tick, prev_1949_152, not_prev_1949_152, prev_1955_153, not_prev_1955_153, prev_1958_154, not_prev_1958_154, prev_1960_155, not_prev_1960_155, prev_1961_156, not_prev_1961_156, prev_1962_157, not_prev_1962_157, prev_1963_158, not_prev_1963_158, prev_1968_159, not_prev_1968_159, prev_1968_160, not_prev_1968_160, prev_1969_161, not_prev_1969_161}
set UncontrolledActions = {color.red, color.green, color.blue, color.black, color.yellow, color.white, detect.red, detect.green, detect.blue, detect.black, detect.yellow, detect.white, ack_ver.move, ack_ver.sleep, ack_hor.move, ack_hor.sleep, ack_bot.move, ack_bot.sleep, speedbutton.press, speedbutton.release, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Color_Actions = {color.red, color.green, color.blue, color.black, color.yellow, color.white}
fluent COLOR_RED = <color.red, Color_Actions\{color.red}>
fluent COLOR_GREEN = <color.green, Color_Actions\{color.green}>
fluent COLOR_BLUE = <color.blue, Color_Actions\{color.blue}>
fluent COLOR_BLACK = <color.black, Color_Actions\{color.black}>
fluent COLOR_YELLOW = <color.yellow, Color_Actions\{color.yellow}>
fluent COLOR_WHITE = <color.white, Color_Actions\{color.white}>

set Detect_Actions = {detect.red, detect.green, detect.blue, detect.black, detect.yellow, detect.white}
fluent DETECT_RED = <detect.red, Detect_Actions\{detect.red}>
fluent DETECT_GREEN = <detect.green, Detect_Actions\{detect.green}>
fluent DETECT_BLUE = <detect.blue, Detect_Actions\{detect.blue}>
fluent DETECT_BLACK = <detect.black, Detect_Actions\{detect.black}>
fluent DETECT_YELLOW = <detect.yellow, Detect_Actions\{detect.yellow}>
fluent DETECT_WHITE = <detect.white, Detect_Actions\{detect.white}>

set Ack_ver_Actions = {ack_ver.move, ack_ver.sleep}
fluent ACK_VER_MOVE = <ack_ver.move, Ack_ver_Actions\{ack_ver.move}>
fluent ACK_VER_SLEEP = <ack_ver.sleep, Ack_ver_Actions\{ack_ver.sleep}>

set Ack_hor_Actions = {ack_hor.move, ack_hor.sleep}
fluent ACK_HOR_MOVE = <ack_hor.move, Ack_hor_Actions\{ack_hor.move}>
fluent ACK_HOR_SLEEP = <ack_hor.sleep, Ack_hor_Actions\{ack_hor.sleep}>

set Ack_bot_Actions = {ack_bot.move, ack_bot.sleep}
fluent ACK_BOT_MOVE = <ack_bot.move, Ack_bot_Actions\{ack_bot.move}>
fluent ACK_BOT_SLEEP = <ack_bot.sleep, Ack_bot_Actions\{ack_bot.sleep}>

set SpeedButton_Actions = {speedbutton.press, speedbutton.release}
fluent SPEEDBUTTON_PRESS = <speedbutton.press, SpeedButton_Actions\{speedbutton.press}>
fluent SPEEDBUTTON_RELEASE = <speedbutton.release, SpeedButton_Actions\{speedbutton.release}>

set VerMot_Actions = {vermot.move, vermot.sleep}
fluent VERMOT_MOVE = <vermot.move, VerMot_Actions\{vermot.move}>
fluent VERMOT_SLEEP = <vermot.sleep, VerMot_Actions\{vermot.sleep}>

set HorMot_Actions = {hormot.move, hormot.sleep}
fluent HORMOT_MOVE = <hormot.move, HorMot_Actions\{hormot.move}>
fluent HORMOT_SLEEP = <hormot.sleep, HorMot_Actions\{hormot.sleep}>

set BotMot_Actions = {botmot.seek, botmot.stop, botmot.return}
fluent BOTMOT_SEEK = <botmot.seek, BotMot_Actions\{botmot.seek}>
fluent BOTMOT_STOP = <botmot.stop, BotMot_Actions\{botmot.stop}>
fluent BOTMOT_RETURN = <botmot.return, BotMot_Actions\{botmot.return}>

set MotSpeed_Actions = {motspeed.level1, motspeed.level2, motspeed.level3}
fluent MOTSPEED_LEVEL1 = <motspeed.level1, MotSpeed_Actions\{motspeed.level1}>
fluent MOTSPEED_LEVEL2 = <motspeed.level2, MotSpeed_Actions\{motspeed.level2}>
fluent MOTSPEED_LEVEL3 = <motspeed.level3, MotSpeed_Actions\{motspeed.level3}>

set Spec_state__seek_Actions = {spec_state__seek.s0, spec_state__seek.s1, spec_state__seek.s2}
fluent SPEC_STATE__SEEK_S0 = <spec_state__seek.s0, Spec_state__seek_Actions\{spec_state__seek.s0}>
fluent SPEC_STATE__SEEK_S1 = <spec_state__seek.s1, Spec_state__seek_Actions\{spec_state__seek.s1}>
fluent SPEC_STATE__SEEK_S2 = <spec_state__seek.s2, Spec_state__seek_Actions\{spec_state__seek.s2}>

set Spec_currentColor_Actions = {spec_currentcolor.red, spec_currentcolor.green, spec_currentcolor.blue, spec_currentcolor.black, spec_currentcolor.yellow, spec_currentcolor.white}
fluent SPEC_CURRENTCOLOR_RED = <spec_currentcolor.red, Spec_currentColor_Actions\{spec_currentcolor.red}>
fluent SPEC_CURRENTCOLOR_GREEN = <spec_currentcolor.green, Spec_currentColor_Actions\{spec_currentcolor.green}>
fluent SPEC_CURRENTCOLOR_BLUE = <spec_currentcolor.blue, Spec_currentColor_Actions\{spec_currentcolor.blue}>
fluent SPEC_CURRENTCOLOR_BLACK = <spec_currentcolor.black, Spec_currentColor_Actions\{spec_currentcolor.black}>
fluent SPEC_CURRENTCOLOR_YELLOW = <spec_currentcolor.yellow, Spec_currentColor_Actions\{spec_currentcolor.yellow}>
fluent SPEC_CURRENTCOLOR_WHITE = <spec_currentcolor.white, Spec_currentColor_Actions\{spec_currentcolor.white}>

set Spec_dropping_Actions = {spec_dropping, not_spec_dropping}
fluent SPEC_DROPPING = <spec_dropping, Spec_dropping_Actions\{spec_dropping}>

set Spec_speedButtonValidPressed_Actions = {spec_speedbuttonvalidpressed, not_spec_speedbuttonvalidpressed}
fluent SPEC_SPEEDBUTTONVALIDPRESSED = <spec_speedbuttonvalidpressed, Spec_speedButtonValidPressed_Actions\{spec_speedbuttonvalidpressed}>

set PREV_1949_152_Actions = {prev_1949_152, not_prev_1949_152}
fluent PREV_1949_152 = <prev_1949_152, PREV_1949_152_Actions\{prev_1949_152}>

set PREV_1955_153_Actions = {prev_1955_153, not_prev_1955_153}
fluent PREV_1955_153 = <prev_1955_153, PREV_1955_153_Actions\{prev_1955_153}>

set PREV_1958_154_Actions = {prev_1958_154, not_prev_1958_154}
fluent PREV_1958_154 = <prev_1958_154, PREV_1958_154_Actions\{prev_1958_154}>

set PREV_1960_155_Actions = {prev_1960_155, not_prev_1960_155}
fluent PREV_1960_155 = <prev_1960_155, PREV_1960_155_Actions\{prev_1960_155}>

set PREV_1961_156_Actions = {prev_1961_156, not_prev_1961_156}
fluent PREV_1961_156 = <prev_1961_156, PREV_1961_156_Actions\{prev_1961_156}>

set PREV_1962_157_Actions = {prev_1962_157, not_prev_1962_157}
fluent PREV_1962_157 = <prev_1962_157, PREV_1962_157_Actions\{prev_1962_157}>

set PREV_1963_158_Actions = {prev_1963_158, not_prev_1963_158}
fluent PREV_1963_158 = <prev_1963_158, PREV_1963_158_Actions\{prev_1963_158}>

set PREV_1968_159_Actions = {prev_1968_159, not_prev_1968_159}
fluent PREV_1968_159 = <prev_1968_159, PREV_1968_159_Actions\{prev_1968_159}>

set PREV_1968_160_Actions = {prev_1968_160, not_prev_1968_160}
fluent PREV_1968_160 = <prev_1968_160, PREV_1968_160_Actions\{prev_1968_160}>

set PREV_1969_161_Actions = {prev_1969_161, not_prev_1969_161}
fluent PREV_1969_161 = <prev_1969_161, PREV_1969_161_Actions\{prev_1969_161}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================

//property divided into 1 subproperties.
ltl_property Initial_0 = (!tick W (tick && SPEC_STATE__SEEK_S0))
minimal || Initial_0_min =  Initial_0.
//property divided into 1 subproperties.
ltl_property Initial_1 = (!tick W (tick && (MOTSPEED_LEVEL1 && !SPEC_DROPPING)))
minimal || Initial_1_min =  Initial_1.
//property divided into 1 subproperties.
ltl_property Initial_2 = (!tick W (tick && !PREV_1949_152))
minimal || Initial_2_min =  Initial_2.
//property divided into 1 subproperties.
ltl_property Initial_3 = (!tick W (tick && !PREV_1955_153))
minimal || Initial_3_min =  Initial_3.
//property divided into 1 subproperties.
ltl_property Initial_4 = (!tick W (tick && !PREV_1958_154))
minimal || Initial_4_min =  Initial_4.
//property divided into 1 subproperties.
ltl_property Initial_5 = (!tick W (tick && !PREV_1960_155))
minimal || Initial_5_min =  Initial_5.
//property divided into 1 subproperties.
ltl_property Initial_6 = (!tick W (tick && !PREV_1961_156))
minimal || Initial_6_min =  Initial_6.
//property divided into 1 subproperties.
ltl_property Initial_7 = (!tick W (tick && !PREV_1962_157))
minimal || Initial_7_min =  Initial_7.
//property divided into 1 subproperties.
ltl_property Initial_8 = (!tick W (tick && !PREV_1963_158))
minimal || Initial_8_min =  Initial_8.
//property divided into 1 subproperties.
ltl_property Initial_9 = (!tick W (tick && !PREV_1968_159))
minimal || Initial_9_min =  Initial_9.
//property divided into 1 subproperties.
ltl_property Initial_10 = (!tick W (tick && !PREV_1968_160))
minimal || Initial_10_min =  Initial_10.
//property divided into 1 subproperties.
ltl_property Initial_11 = (!tick W (tick && !PREV_1969_161))
minimal || Initial_11_min =  Initial_11.
//=======Starting values=======
||Initial_Values = ( Initial_0_min ||  Initial_1_min ||  Initial_2_min ||  Initial_3_min ||  Initial_4_min ||  Initial_5_min ||  Initial_6_min ||  Initial_7_min ||  Initial_8_min ||  Initial_9_min ||  Initial_10_min ||  Initial_11_min).


//property divided into 1 subproperties.
ltl_property G0 = [](tick -> (VERMOT_MOVE -> (BOTMOT_STOP && HORMOT_SLEEP)))
minimal ||G0_min = G0.

//property divided into 1 subproperties.
ltl_property G1 = [](tick -> (HORMOT_MOVE -> (BOTMOT_STOP && VERMOT_SLEEP)))
minimal ||G1_min = G1.

//property divided into 1 subproperties.
ltl_property G2 = [](tick -> (!BOTMOT_STOP -> (VERMOT_SLEEP && HORMOT_SLEEP)))
minimal ||G2_min = G2.

//property divided into 1 subproperties.
ltl_property G3 = [](tick -> (!VERMOT_SLEEP || (((!SPEC_CURRENTCOLOR_BLACK || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLACK)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLACK))) || SPEC_CURRENTCOLOR_BLACK)) && ((!SPEC_CURRENTCOLOR_BLUE || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLUE)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLUE))) || SPEC_CURRENTCOLOR_BLUE)) && ((!SPEC_CURRENTCOLOR_GREEN || X(!tick W (tick && (SPEC_CURRENTCOLOR_GREEN)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_GREEN))) || SPEC_CURRENTCOLOR_GREEN)) && ((!SPEC_CURRENTCOLOR_RED || X(!tick W (tick && (SPEC_CURRENTCOLOR_RED)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_RED))) || SPEC_CURRENTCOLOR_RED)) && ((!SPEC_CURRENTCOLOR_WHITE || X(!tick W (tick && (SPEC_CURRENTCOLOR_WHITE)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_WHITE))) || SPEC_CURRENTCOLOR_WHITE)) && ((!SPEC_CURRENTCOLOR_YELLOW || X(!tick W (tick && (SPEC_CURRENTCOLOR_YELLOW)))) && (X(!tick W (tick && (!SPEC_CURRENTCOLOR_YELLOW))) || SPEC_CURRENTCOLOR_YELLOW)))))
minimal ||G3_min = G3.

//property divided into 2 subproperties.
ltl_property G4 = [](tick -> ((((SPEC_DROPPING && X(!tick W (tick && (!SPEC_DROPPING)))) || (X(!tick W (tick && (SPEC_DROPPING))) && !SPEC_DROPPING))) || (VERMOT_SLEEP && (!PREV_1949_152 || !ACK_BOT_SLEEP))))
minimal ||G4_min = G4.
ltl_property G5 = [](tick -> ((!VERMOT_SLEEP || (PREV_1949_152 && ACK_BOT_SLEEP)) || (((!SPEC_DROPPING || X(!tick W (tick && (SPEC_DROPPING)))) && (X(!tick W (tick && (!SPEC_DROPPING))) || SPEC_DROPPING)))))
minimal ||G5_min = G5.

//property divided into 1 subproperties.
ltl_property G6 = [](tick -> ((ACK_VER_MOVE || ACK_HOR_MOVE) -> ((VERMOT_SLEEP && HORMOT_SLEEP) && BOTMOT_STOP)))
minimal ||G6_min = G6.

//property divided into 1 subproperties.
ltl_property G7 = [](tick -> (SPEC_DROPPING -> VERMOT_SLEEP))
minimal ||G7_min = G7.

//property divided into 1 subproperties.
ltl_property G8 = [](tick -> (!SPEC_DROPPING -> (BOTMOT_STOP && HORMOT_SLEEP)))
minimal ||G8_min = G8.

//property divided into 1 subproperties.
ltl_property G9 = [](tick -> ((COLOR_BLACK && !SPEC_DROPPING) -> ((VERMOT_SLEEP && HORMOT_SLEEP) && BOTMOT_STOP)))
minimal ||G9_min = G9.

//property divided into 1 subproperties.
ltl_property G10 = [](tick -> ((COLOR_BLACK || SPEC_DROPPING) || ((VERMOT_MOVE && (((X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLACK))) || COLOR_BLACK) && (!COLOR_BLACK || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLACK))))) && ((X(!tick W (tick && (!SPEC_CURRENTCOLOR_BLUE))) || COLOR_BLUE) && (!COLOR_BLUE || X(!tick W (tick && (SPEC_CURRENTCOLOR_BLUE))))) && ((X(!tick W (tick && (!SPEC_CURRENTCOLOR_GREEN))) || COLOR_GREEN) && (!COLOR_GREEN || X(!tick W (tick && (SPEC_CURRENTCOLOR_GREEN))))) && ((X(!tick W (tick && (!SPEC_CURRENTCOLOR_RED))) || COLOR_RED) && (!COLOR_RED || X(!tick W (tick && (SPEC_CURRENTCOLOR_RED))))) && ((X(!tick W (tick && (!SPEC_CURRENTCOLOR_WHITE))) || COLOR_WHITE) && (!COLOR_WHITE || X(!tick W (tick && (SPEC_CURRENTCOLOR_WHITE))))) && ((X(!tick W (tick && (!SPEC_CURRENTCOLOR_YELLOW))) || COLOR_YELLOW) && (!COLOR_YELLOW || X(!tick W (tick && (SPEC_CURRENTCOLOR_YELLOW))))))) && X(!tick W (tick && SPEC_DROPPING)))))
minimal ||G10_min = G10.

//property divided into 1 subproperties.
ltl_property G11 = [](tick -> (((ACK_VER_SLEEP && PREV_1955_153) && SPEC_DROPPING) -> BOTMOT_SEEK))
minimal ||G11_min = G11.


//property divided into 1 subproperties.
ltl_property G12 = [](tick -> ((((((((SPEC_STATE__SEEK_S0 && ((!BOTMOT_SEEK && (!(DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) || !(DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) || !(DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) || !(DETECT_RED <-> SPEC_CURRENTCOLOR_RED) || !(DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) || !(DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW))) || ((DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) && (DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) && (DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) && (DETECT_RED <-> SPEC_CURRENTCOLOR_RED) && (DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) && (DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW)))) && X(!tick W (tick && SPEC_STATE__SEEK_S0))) || ((SPEC_STATE__SEEK_S0 && ((BOTMOT_SEEK && !BOTMOT_SEEK) && (!(DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) || !(DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) || !(DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) || !(DETECT_RED <-> SPEC_CURRENTCOLOR_RED) || !(DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) || !(DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW)))) && X(!tick W (tick && SPEC_STATE__SEEK_S1)))) || ((SPEC_STATE__SEEK_S0 && ((BOTMOT_SEEK && BOTMOT_SEEK) && (!(DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) || !(DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) || !(DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) || !(DETECT_RED <-> SPEC_CURRENTCOLOR_RED) || !(DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) || !(DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW)))) && X(!tick W (tick && SPEC_STATE__SEEK_S2)))) || (SPEC_STATE__SEEK_S1 && X(!tick W (tick && SPEC_STATE__SEEK_S1)))) || ((SPEC_STATE__SEEK_S2 && ((DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) && (DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) && (DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) && (DETECT_RED <-> SPEC_CURRENTCOLOR_RED) && (DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) && (DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW))) && X(!tick W (tick && SPEC_STATE__SEEK_S0)))) || ((SPEC_STATE__SEEK_S2 && (!BOTMOT_SEEK && (!(DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) || !(DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) || !(DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) || !(DETECT_RED <-> SPEC_CURRENTCOLOR_RED) || !(DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) || !(DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW)))) && X(!tick W (tick && SPEC_STATE__SEEK_S1)))) || ((SPEC_STATE__SEEK_S2 && (BOTMOT_SEEK && (!(DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) || !(DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) || !(DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) || !(DETECT_RED <-> SPEC_CURRENTCOLOR_RED) || !(DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) || !(DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW)))) && X(!tick W (tick && SPEC_STATE__SEEK_S2)))))
minimal ||G12_min = G12.

//property divided into 1 subproperties.
ltl_property G13 = [](tick -> (((SPEC_DROPPING && ((DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) && (DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) && (DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) && (DETECT_RED <-> SPEC_CURRENTCOLOR_RED) && (DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) && (DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW))) && PREV_1958_154) <-> HORMOT_MOVE))
minimal ||G13_min = G13.


//property divided into 1 subproperties.
ltl_property G14 = [](tick -> ((SPEEDBUTTON_PRESS && PREV_1960_155) <-> SPEC_SPEEDBUTTONVALIDPRESSED))
minimal ||G14_min = G14.

//property divided into 1 subproperties.
ltl_property G15 = [](tick -> ((SPEC_SPEEDBUTTONVALIDPRESSED && PREV_1961_156) -> MOTSPEED_LEVEL2))
minimal ||G15_min = G15.

//property divided into 1 subproperties.
ltl_property G16 = [](tick -> ((SPEC_SPEEDBUTTONVALIDPRESSED && PREV_1962_157) -> MOTSPEED_LEVEL3))
minimal ||G16_min = G16.

//property divided into 1 subproperties.
ltl_property G17 = [](tick -> ((SPEC_SPEEDBUTTONVALIDPRESSED && PREV_1963_158) -> MOTSPEED_LEVEL1))
minimal ||G17_min = G17.

//property divided into 1 subproperties.
ltl_property G18 = [](tick -> ((!SPEC_SPEEDBUTTONVALIDPRESSED && PREV_1961_156) -> MOTSPEED_LEVEL1))
minimal ||G18_min = G18.

//property divided into 1 subproperties.
ltl_property G19 = [](tick -> ((!SPEC_SPEEDBUTTONVALIDPRESSED && PREV_1962_157) -> MOTSPEED_LEVEL2))
minimal ||G19_min = G19.

//property divided into 1 subproperties.
ltl_property G20 = [](tick -> ((!SPEC_SPEEDBUTTONVALIDPRESSED && PREV_1963_158) -> MOTSPEED_LEVEL3))
minimal ||G20_min = G20.


//property divided into 2 subproperties.
ltl_property G21 = [](tick -> (X(!tick W (tick && !PREV_1949_152)) || BOTMOT_RETURN))
minimal ||G21_min = G21.
ltl_property G22 = [](tick -> (!BOTMOT_RETURN || X(!tick W (tick && PREV_1949_152))))
minimal ||G22_min = G22.


//property divided into 2 subproperties.
ltl_property G23 = [](tick -> (X(!tick W (tick && !PREV_1955_153)) || ACK_VER_MOVE))
minimal ||G23_min = G23.
ltl_property G24 = [](tick -> (!ACK_VER_MOVE || X(!tick W (tick && PREV_1955_153))))
minimal ||G24_min = G24.


//property divided into 2 subproperties.
ltl_property G25 = [](tick -> (X(!tick W (tick && !PREV_1958_154)) || !BOTMOT_STOP))
minimal ||G25_min = G25.
ltl_property G26 = [](tick -> (BOTMOT_STOP || X(!tick W (tick && PREV_1958_154))))
minimal ||G26_min = G26.


//property divided into 2 subproperties.
ltl_property G27 = [](tick -> (X(!tick W (tick && !PREV_1960_155)) || SPEEDBUTTON_RELEASE))
minimal ||G27_min = G27.
ltl_property G28 = [](tick -> (!SPEEDBUTTON_RELEASE || X(!tick W (tick && PREV_1960_155))))
minimal ||G28_min = G28.


//property divided into 2 subproperties.
ltl_property G29 = [](tick -> (X(!tick W (tick && !PREV_1961_156)) || MOTSPEED_LEVEL1))
minimal ||G29_min = G29.
ltl_property G30 = [](tick -> (!MOTSPEED_LEVEL1 || X(!tick W (tick && PREV_1961_156))))
minimal ||G30_min = G30.


//property divided into 2 subproperties.
ltl_property G31 = [](tick -> (X(!tick W (tick && !PREV_1962_157)) || MOTSPEED_LEVEL2))
minimal ||G31_min = G31.
ltl_property G32 = [](tick -> (!MOTSPEED_LEVEL2 || X(!tick W (tick && PREV_1962_157))))
minimal ||G32_min = G32.


//property divided into 2 subproperties.
ltl_property G33 = [](tick -> (X(!tick W (tick && !PREV_1963_158)) || MOTSPEED_LEVEL3))
minimal ||G33_min = G33.
ltl_property G34 = [](tick -> (!MOTSPEED_LEVEL3 || X(!tick W (tick && PREV_1963_158))))
minimal ||G34_min = G34.


//property divided into 2 subproperties.
ltl_property G35 = [](tick -> (X(!tick W (tick && !PREV_1968_159)) || HORMOT_MOVE))
minimal ||G35_min = G35.
ltl_property G36 = [](tick -> (!HORMOT_MOVE || X(!tick W (tick && PREV_1968_159))))
minimal ||G36_min = G36.


//property divided into 2 subproperties.
ltl_property G37 = [](tick -> (X(!tick W (tick && !PREV_1968_160)) || ACK_HOR_MOVE))
minimal ||G37_min = G37.
ltl_property G38 = [](tick -> (!ACK_HOR_MOVE || X(!tick W (tick && PREV_1968_160))))
minimal ||G38_min = G38.


//property divided into 2 subproperties.
ltl_property G39 = [](tick -> (X(!tick W (tick && !PREV_1969_161)) || ACK_VER_SLEEP))
minimal ||G39_min = G39.
ltl_property G40 = [](tick -> (!ACK_VER_SLEEP || X(!tick W (tick && PREV_1969_161))))
minimal ||G40_min = G40.

fluent True = <tick, tock>
assert G_l0 = (True || !True)
//property divided into 1 subproperties.
constraint A0 = [](tock -> (!SPEC_DROPPING -> ((ACK_VER_SLEEP && ACK_HOR_SLEEP) && ACK_BOT_SLEEP)))
minimal ||A0_min = A0.

//property divided into 1 subproperties.
constraint A1 = [](tock -> (ACK_HOR_MOVE <-> (((DETECT_BLACK <-> SPEC_CURRENTCOLOR_BLACK) && (DETECT_BLUE <-> SPEC_CURRENTCOLOR_BLUE) && (DETECT_GREEN <-> SPEC_CURRENTCOLOR_GREEN) && (DETECT_RED <-> SPEC_CURRENTCOLOR_RED) && (DETECT_WHITE <-> SPEC_CURRENTCOLOR_WHITE) && (DETECT_YELLOW <-> SPEC_CURRENTCOLOR_YELLOW)) && (PREV_1968_159 || PREV_1968_160))))
minimal ||A1_min = A1.

//property divided into 1 subproperties.
constraint A2 = [](tock -> (HORMOT_MOVE -> PREV_1969_161))
minimal ||A2_min = A2.

//property divided into 1 subproperties.
assert A_l0 = (tock && (SPEC_STATE__SEEK_S0 || SPEC_STATE__SEEK_S2))

//property divided into 1 subproperties.
assert A_l1 = (tock && !COLOR_BLACK)



||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0_min || A1_min || A2_min || G0_min || G1_min || G2_min || G3_min || G4_min || G5_min || G6_min || G7_min || G8_min || G9_min || G10_min || G11_min || G12_min || G13_min || G14_min || G15_min || G16_min || G17_min || G18_min || G19_min || G20_min || G21_min || G22_min || G23_min || G24_min || G25_min || G26_min || G27_min || G28_min || G29_min || G30_min || G31_min || G32_min || G33_min || G34_min || G35_min || G36_min || G37_min || G38_min || G39_min || G40_min). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && A_clock) -> ([]<>G_l0))
assert ASM =   ([]<>A_l0 && []<>A_l1 && A_clock)
assert GNT = ([]<>G_l0)
progress Time  = {tick}
