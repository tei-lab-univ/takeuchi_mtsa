/*
In this example we have a set of tasks CantTaks that have to be executed and each of 
them requires an amount of memory that for that is currently what is used as id. 
There are also some safety restrictions that define when the tasks should start. 
The number of activities and the memory can be easily chaged, but the safety restrictions
must be manually added. 
*/

const CantTask = 4
const Limit = 5
range Tasks = 1..CantTask
range Memory = 0..Limit

set Controllable = {s.[Tasks],g}
set NotControllable = {e.[Tasks]}
set Alphabet = {Controllable}


TASK(MEM=1) = (s.[MEM]-> e.[MEM] -> g -> REACH), 
REACH = (g->REACH).

MEM = RAM[0],
RAM[u:Memory] = (s.[id:Tasks] -> RAM[u+id] | e.[id:Tasks] -> RAM[u-id]).

||Plant = (forall[t:Tasks] TASK(t) || MEM).

fluent START[i:Tasks] = <s.[i],g>
fluent FINISH[i:Tasks] = <e.[i],g>
fluent PROCESSING[i:Tasks] = <s.[i],e.[i]>

fluent GOAL= <g, Alphabet\{g}>


ltl_property S2AftF1 = [] (START[2] -> FINISH[1])
ltl_property S1AftS4orS3 = [] (START[1] -> START[3] || START[4])

controller ||C = (Plant)~{G1}.
checkCompatibility ||Compatible = (Plant)~{G1}.

controllerSpec G1 = {
	safety = {S2AftF1,S1AftS4orS3}
	liveness = {GOAL}
	controllable = {Controllable}
}

assert TESTGOAL = <> forall[i:1..CantTask] FINISH[i]

||ExpectedC = Expected.

Expected = Q0,
	Q0	= (s[4] -> Q19
		  |s[3] -> Q26),
	Q1	= (s[3] -> Q7),
	Q2	= (e[1] -> Q6),
	Q3	= (s[1] -> Q2),
	Q4	= (s[3] -> Q10
		  |s[1] -> Q24),
	Q5	= (e[3] -> Q8
		  |s[2] -> Q33),
	Q6	= (s[2] -> Q17),
	Q7	= (e[3] -> Q29),
	Q8	= (s[2] -> Q14
		  |s[4] -> Q21),
	Q9	= (e[4] -> Q24
		  |e[1] -> Q28),
	Q10	= (e[3] -> Q3
		  |s[1] -> Q30),
	Q11	= (e[4] -> Q3
		  |s[1] -> Q25),
	Q12	= (e[2] -> Q1
		  |s[3] -> Q32),
	Q13	= (e[1] -> Q8
		  |s[4] -> Q25),
	Q14	= (e[2] -> Q31),
	Q15	= (e[4] -> Q29),
	Q16	= (e[3] -> Q6
		  |s[2] -> Q32),
	Q17	= (e[2] -> Q29),
	Q18	= (s[2] -> Q12
		  |s[3] -> Q16),
	Q19	= (e[4] -> Q4
		  |s[1] -> Q9),
	Q20	= (e[3] -> Q31),
	Q21	= (e[4] -> Q6),
	Q22	= (s[4] -> Q11
		  |s[1] -> Q13),
	Q23	= (g -> Q23),
	Q24	= (e[1] -> Q18
		  |s[3] -> Q30),
	Q25	= (e[4] -> Q2
		  |e[1] -> Q21),
	Q26	= (e[3] -> Q22
		  |s[1] -> Q27),
	Q27	= (e[1] -> Q5
		  |e[3] -> Q13),
	Q28	= (e[4] -> Q18),
	Q29	= (g -> Q23),
	Q30	= (e[3] -> Q2
		  |e[1] -> Q16),
	Q31	= (s[4] -> Q15),
	Q32	= (e[2] -> Q7
		  |e[3] -> Q17),
	Q33	= (e[3] -> Q14
		  |e[2] -> Q20).
