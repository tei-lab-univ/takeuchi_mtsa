/*****************************************************************************

Cats and mice are placed in oposite ends of a corridor divided in cells. They
move one cell at a time by turns (first the mice then the cats). The goal is
to control the mice in order to reach the center of the corridor while
avoiding sharing a cell with a cat.

The problem scales in two dimensions:
1- Criters: The number of cats and mice.
2- Levels: The number of cells in the corridor (2*Levels+1).

*****************************************************************************/

const N = 5
const K = 4

const Mice = N
const Cats = N
const Levels = K
const Areas = 2*Levels+1
const Last = Areas-1

const Center = Areas\2
range Area = 0..Areas-1

/*****************************************************************************/

Mouse(Mid=0) = Wait[Areas-1],
  Next[a:Area] =
    if (a==Center) then (safe -> cat.turn -> Wait[a])
    else (cat.turn -> Wait[a]),
  Wait[a:Area] = (
    mouse.turn -> Act[a]
    |cat[0..Cats-1].move[b:Area] -> Wait[a] ),
  Act[a:Area] = (
    mouse[Mid].move[a] -> Next[a]
    |when (a+1 <= Last) mouse[Mid].move[a+1] -> Next[a+1]
    |when (a-1 >= 0   ) mouse[Mid].move[a-1] -> Next[a-1] ).


Cat(Cid=0) = Next[0],
  Next[a:Area] = (mouse.turn -> Wait[a]),
  Wait[a:Area] = (
    cat.turn   -> Act[a]
    |mouse[0..Mice-1].move[b:Area] -> Wait[a] ),
  Act[a:Area] = (
    cat[Cid].move[a] -> Next[a]
    |when (a+1 <= Last) cat[Cid].move[a+1] -> Next[a+1]
    |when (a-1 >= 0)    cat[Cid].move[a-1] -> Next[a-1] ).

/*****************************************************************************/

ltl_property NOT_CAPTURE_00 = [](mouse[0..Mice-1].move[0] -> X(!cat[0..Cats-1].move[0] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_01 = [](mouse[0..Mice-1].move[1] -> X(!cat[0..Cats-1].move[1] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_02 = [](mouse[0..Mice-1].move[2] -> X(!cat[0..Cats-1].move[2] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_03 = [](mouse[0..Mice-1].move[3] -> X(!cat[0..Cats-1].move[3] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_04 = [](mouse[0..Mice-1].move[4] -> X(!cat[0..Cats-1].move[4] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_05 = [](mouse[0..Mice-1].move[5] -> X(!cat[0..Cats-1].move[5] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_06 = [](mouse[0..Mice-1].move[6] -> X(!cat[0..Cats-1].move[6] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_07 = [](mouse[0..Mice-1].move[7] -> X(!cat[0..Cats-1].move[7] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_08 = [](mouse[0..Mice-1].move[8] -> X(!cat[0..Cats-1].move[8] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_09 = [](mouse[0..Mice-1].move[9] -> X(!cat[0..Cats-1].move[9] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_10 = [](mouse[0..Mice-1].move[10] -> X(!cat[0..Cats-1].move[10] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_11 = [](mouse[0..Mice-1].move[11] -> X(!cat[0..Cats-1].move[11] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_12 = [](mouse[0..Mice-1].move[12] -> X(!cat[0..Cats-1].move[12] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_13 = [](mouse[0..Mice-1].move[13] -> X(!cat[0..Cats-1].move[13] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_14 = [](mouse[0..Mice-1].move[14] -> X(!cat[0..Cats-1].move[14] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_15 = [](mouse[0..Mice-1].move[15] -> X(!cat[0..Cats-1].move[15] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_16 = [](mouse[0..Mice-1].move[16] -> X(!cat[0..Cats-1].move[16] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_17 = [](mouse[0..Mice-1].move[17] -> X(!cat[0..Cats-1].move[17] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_18 = [](mouse[0..Mice-1].move[18] -> X(!cat[0..Cats-1].move[18] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_19 = [](mouse[0..Mice-1].move[19] -> X(!cat[0..Cats-1].move[19] W {mouse.turn, safe}))
ltl_property NOT_CAPTURE_20 = [](mouse[0..Mice-1].move[20] -> X(!cat[0..Cats-1].move[20] W {mouse.turn, safe}))

controllerSpec Goal = {
	safety = 	{
                    NOT_CAPTURE_00,
                    NOT_CAPTURE_01,NOT_CAPTURE_02,
                    NOT_CAPTURE_03,NOT_CAPTURE_04,
                    NOT_CAPTURE_05,NOT_CAPTURE_06,
                    NOT_CAPTURE_07,NOT_CAPTURE_08,
                    //NOT_CAPTURE_09,NOT_CAPTURE_10,
                    //NOT_CAPTURE_11,NOT_CAPTURE_12,
                    //NOT_CAPTURE_13,NOT_CAPTURE_14,
                    //NOT_CAPTURE_15,NOT_CAPTURE_16,
                    //NOT_CAPTURE_17,NOT_CAPTURE_18,
                    //NOT_CAPTURE_19,NOT_CAPTURE_20,	
				}
	controllable = {mouse[0..Mice-1].move[Area]}
	marking = {safe}
	nonblocking
}

||Environment = (forall [m:0..Mice-1] Mouse(m) || forall [c:0..Cats-1] Cat(c)).

controller ||TraditionalController = (Environment)~{Goal}.
controller ||MonolithicController = (forall [m:0..Mice-1] Mouse(m) || forall [c:0..Cats-1] Cat(c))~{Goal}.
heuristic  ||DirectedController = (forall [m:0..Mice-1] Mouse(m) || forall [c:0..Cats-1] Cat(c))~{Goal}.


